
utils.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003fc  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  000013fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003f4  080003f4  000013fc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003f4  080003fc  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000013f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f8  080003f8  000013f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013fc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005d6  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001cf  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00001bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000053  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d9c  00000000  00000000  00001cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000aa8  00000000  00000000  00016a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000722fa  00000000  00000000  000174ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000897e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000f0  00000000  00000000  0008982c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0008991c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003dc 	.word	0x080003dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003dc 	.word	0x080003dc

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	// Begin initialisation
	enableClocks();
 80001d8:	f000 f81a 	bl	8000210 <enableClocks>
	setupGPIOPinsTim2();
 80001dc:	f000 f828 	bl	8000230 <setupGPIOPinsTim2>
	setupTim2Pwm();
 80001e0:	f000 f856 	bl	8000290 <setupTim2Pwm>

	// Set servo angle
	//servoAngle(2, 70.0);

	TIM2->CCR1 = 20000;
 80001e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001e8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80001ec:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 20000;
 80001ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001f2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80001f6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = 20000;
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001fc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000200:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 20000;
 8000202:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000206:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800020a:	641a      	str	r2, [r3, #64]	@ 0x40



	/* Loop forever */
	while(1) {
 800020c:	bf00      	nop
 800020e:	e7fd      	b.n	800020c <main+0x38>

08000210 <enableClocks>:
 *      Author: willw
 */

#include "main.h"

void enableClocks(void) {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	// Enable all GPIO clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN | RCC_AHBENR_GPIOEEN;
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <enableClocks+0x1c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a04      	ldr	r2, [pc, #16]	@ (800022c <enableClocks+0x1c>)
 800021a:	f443 1378 	orr.w	r3, r3, #4063232	@ 0x3e0000
 800021e:	6153      	str	r3, [r2, #20]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000

08000230 <setupGPIOPinsTim2>:

void setupGPIOPinsTim2(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	// Setup GPIO for PWM output
	GPIOA->MODER = 0;
 8000234:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x2 << (15 * 2)) | (0x2 << (1 * 2)); // Alternate function mode for pins 15, 1 CH(1, 2)
 800023c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000246:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2 << (2 * 2)) | (0x2 << (3 * 2)); // Alternate function mode for pins 2, 3 CH(3, 4)
 8000250:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800025a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800025e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (0x1 << (1 * 4)) | (0x1 << (2 * 4)) | (0x1 << (3 * 4)); // Set alternate functions for pins 1, 2, 3
 8000260:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000264:	6a1b      	ldr	r3, [r3, #32]
 8000266:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800026a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[1] |= (0x1 << ((15 - 8) * 4)); // Set alternate function for pin 15
 8000274:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800027a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800027e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000282:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
	...

08000290 <setupTim2Pwm>:


void setupTim2Pwm(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Enable TIM2 peripheral clock
 8000294:	4b29      	ldr	r3, [pc, #164]	@ (800033c <setupTim2Pwm+0xac>)
 8000296:	69db      	ldr	r3, [r3, #28]
 8000298:	4a28      	ldr	r2, [pc, #160]	@ (800033c <setupTim2Pwm+0xac>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	61d3      	str	r3, [r2, #28]

	// Configure timer registers
	TIM2->PSC = 7; // Prescaler of 1 microsec for 8 MHz clock
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a4:	2207      	movs	r2, #7
 80002a6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 20000; // Auto-reload after 20 ms for PWM application
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80002b0:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set to PWM mode 1
	TIM2->CCMR1 |= (0x6 << 4) | TIM_CCMR1_OC1PE | (0x6 << 12) | TIM_CCMR1_OC2PE; // PWM mode 1 for Channel 1 and 2
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002bc:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80002c0:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80002c4:	6193      	str	r3, [r2, #24]
	TIM2->CCMR2 |= (0x6 << 4) | TIM_CCMR2_OC3PE | (0x6 << 12) | TIM_CCMR2_OC4PE; // PWM mode 1 for Channel 3 and 4
 80002c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d0:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80002d4:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80002d8:	61d3      	str	r3, [r2, #28]


	// Set and enable polarity for all channels
	TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P | TIM_CCER_CC3P | TIM_CCER_CC4P);
 80002da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e4:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80002e8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80002ec:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f8:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80002fc:	f043 0311 	orr.w	r3, r3, #17
 8000300:	6213      	str	r3, [r2, #32]


	TIM2->CR1 |= TIM_CR1_ARPE; // Enable auto-reload preload
 8000302:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800030c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000310:	6013      	str	r3, [r2, #0]
	TIM2->EGR = TIM_EGR_UG; // Generate an update event (apply PSC + ARR)
 8000312:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000316:	2201      	movs	r2, #1
 8000318:	615a      	str	r2, [r3, #20]

	TIM2->CNT = 0;
 800031a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800031e:	2200      	movs	r2, #0
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN; // Start the timer
 8000322:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	@ (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	@ (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	@ (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 f811 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ff2f 	bl	80001d4 <main>

08000376 <LoopForever>:

LoopForever:
  b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC1_2_IRQHandler>
	...

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	4d0d      	ldr	r5, [pc, #52]	@ (80003cc <__libc_init_array+0x38>)
 8000398:	4c0d      	ldr	r4, [pc, #52]	@ (80003d0 <__libc_init_array+0x3c>)
 800039a:	1b64      	subs	r4, r4, r5
 800039c:	10a4      	asrs	r4, r4, #2
 800039e:	2600      	movs	r6, #0
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	4d0b      	ldr	r5, [pc, #44]	@ (80003d4 <__libc_init_array+0x40>)
 80003a6:	4c0c      	ldr	r4, [pc, #48]	@ (80003d8 <__libc_init_array+0x44>)
 80003a8:	f000 f818 	bl	80003dc <_init>
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	2600      	movs	r6, #0
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
