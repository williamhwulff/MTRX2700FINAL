
finalMTRX2700.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800558c  0800558c  0000658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a4  080056a4  000070d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056a4  080056a4  000066a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056ac  080056ac  000070d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ac  080056ac  000066ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056b0  080056b0  000066b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  080056b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070d8  2**0
                  CONTENTS
 10 .bss          00000584  200000d8  200000d8  000070d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000065c  2000065c  000070d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014502  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003019  00000000  00000000  0001b60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0001e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb6  00000000  00000000  0001f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c0f  00000000  00000000  000207ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b39  00000000  00000000  000413fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb309  00000000  00000000  0005af36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011623f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005600  00000000  00000000  00116284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0011b884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005574 	.word	0x08005574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08005574 	.word	0x08005574

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <finishedTransmissionCallback>:
#include "main.h"



// Create delay after finishing transmission
void finishedTransmissionCallback(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    TIM2->CCR1 = 0; // Red on 0
 8000284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000288:	2200      	movs	r2, #0
 800028a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR3 = 0; // Green on full
 800028c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000290:	2200      	movs	r2, #0
 8000292:	63da      	str	r2, [r3, #60]	@ 0x3c

    delayMiliSec(10); // 10 ms delay
 8000294:	200a      	movs	r0, #10
 8000296:	f000 ffd5 	bl	8001244 <delayMiliSec>

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <EXTI0Callback>:

uint8_t EXTI0Callback(uint8_t messageSent) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	if (GPIOA->IDR & 0x01) {
 80002aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d022      	beq.n	80002fe <EXTI0Callback+0x5e>

		// RISING edge - button pressed
		TIM3->CNT = 0; // Reset count
 80002b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000368 <EXTI0Callback+0xc8>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM3->CR1 |= TIM_CR1_CEN; // Start timer
 80002be:	4b2a      	ldr	r3, [pc, #168]	@ (8000368 <EXTI0Callback+0xc8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a29      	ldr	r2, [pc, #164]	@ (8000368 <EXTI0Callback+0xc8>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6013      	str	r3, [r2, #0]

        // Debouncing by disabling interrupts, running delay and re-enabling
        EXTI->IMR &= ~EXTI_IMR_MR0; // Disable EXTI0 interrupt
 80002ca:	4b28      	ldr	r3, [pc, #160]	@ (800036c <EXTI0Callback+0xcc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a27      	ldr	r2, [pc, #156]	@ (800036c <EXTI0Callback+0xcc>)
 80002d0:	f023 0301 	bic.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]

        // Debounce delay
        while (TIM3->CNT < 20) {}
 80002d6:	bf00      	nop
 80002d8:	4b23      	ldr	r3, [pc, #140]	@ (8000368 <EXTI0Callback+0xc8>)
 80002da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002dc:	2b13      	cmp	r3, #19
 80002de:	d9fb      	bls.n	80002d8 <EXTI0Callback+0x38>

        // Clear any spurious pending bit again
        EXTI->PR |= EXTI_PR_PR0;
 80002e0:	4b22      	ldr	r3, [pc, #136]	@ (800036c <EXTI0Callback+0xcc>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a21      	ldr	r2, [pc, #132]	@ (800036c <EXTI0Callback+0xcc>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]

        EXTI->IMR |= EXTI_IMR_MR0;  // Re-enable EXTI0 interrupt
 80002ec:	4b1f      	ldr	r3, [pc, #124]	@ (800036c <EXTI0Callback+0xcc>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1e      	ldr	r2, [pc, #120]	@ (800036c <EXTI0Callback+0xcc>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6013      	str	r3, [r2, #0]

        messageSent = 0; // Reset message as unsent
 80002f8:	2300      	movs	r3, #0
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	e02e      	b.n	800035c <EXTI0Callback+0xbc>

    } else {
        // FALLING edge - button released
        TIM3->CR1 &= ~TIM_CR1_CEN; // Stop timer
 80002fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <EXTI0Callback+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a19      	ldr	r2, [pc, #100]	@ (8000368 <EXTI0Callback+0xc8>)
 8000304:	f023 0301 	bic.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
        uint16_t duration = TIM3->CNT; // Record the counter value to determine if dot or dash
 800030a:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <EXTI0Callback+0xc8>)
 800030c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800030e:	81fb      	strh	r3, [r7, #14]

        if (duration < 250 && messageSent == 0) {
 8000310:	89fb      	ldrh	r3, [r7, #14]
 8000312:	2bf9      	cmp	r3, #249	@ 0xf9
 8000314:	d811      	bhi.n	800033a <EXTI0Callback+0x9a>
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d10e      	bne.n	800033a <EXTI0Callback+0x9a>
            // Dot
            assignMorse(0); // Assign a 0 to the struct for a dot
 800031c:	2000      	movs	r0, #0
 800031e:	f000 fdf9 	bl	8000f14 <assignMorse>

            messageSent = 1; // Set value of message as sent
 8000322:	2301      	movs	r3, #1
 8000324:	71fb      	strb	r3, [r7, #7]

            TIM2->CCR1 = 10000; // Red on full
 8000326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800032a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800032e:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM2->CCR3 = 0; // Green on 0
 8000330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000334:	2200      	movs	r2, #0
 8000336:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000338:	e010      	b.n	800035c <EXTI0Callback+0xbc>

        } else if (messageSent == 0) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d10d      	bne.n	800035c <EXTI0Callback+0xbc>
            // Dash
            assignMorse(1); // Assign a 1 to the struct for a dash
 8000340:	2001      	movs	r0, #1
 8000342:	f000 fde7 	bl	8000f14 <assignMorse>

            messageSent = 1; // Set value of message as sent
 8000346:	2301      	movs	r3, #1
 8000348:	71fb      	strb	r3, [r7, #7]


            TIM2->CCR1 = 0; // Red on 0
 800034a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034e:	2200      	movs	r2, #0
 8000350:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM2->CCR3 = 10000; // Green on full
 8000352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800035a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
    }

	return messageSent; // Return for use in interrupt file
 800035c:	79fb      	ldrb	r3, [r7, #7]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40000400 	.word	0x40000400
 800036c:	40010400 	.word	0x40010400

08000370 <TIM3Callback>:


uint8_t TIM3Callback(uint8_t messageSent) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
	TIM3->CR1 &= ~TIM_CR1_CEN;  // Clear the CEN bit to stop the timer (prevent regular interval interrupts)
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <TIM3Callback+0x3c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0b      	ldr	r2, [pc, #44]	@ (80003ac <TIM3Callback+0x3c>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]

	assignMorse(1); // Assign a 1 to the struct for a dash
 8000386:	2001      	movs	r0, #1
 8000388:	f000 fdc4 	bl	8000f14 <assignMorse>

	messageSent = 1; // Set value of message as sent
 800038c:	2301      	movs	r3, #1
 800038e:	71fb      	strb	r3, [r7, #7]

	TIM2->CCR1 = 0; // Red on 0
 8000390:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000394:	2200      	movs	r2, #0
 8000396:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR3 = 10000; // Green on full
 8000398:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039c:	f242 7210 	movw	r2, #10000	@ 0x2710
 80003a0:	63da      	str	r2, [r3, #60]	@ 0x3c

	return messageSent; // Return for use in interrupt file
 80003a2:	79fb      	ldrb	r3, [r7, #7]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40000400 	.word	0x40000400

080003b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	db0b      	blt.n	80003da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	f003 021f 	and.w	r2, r3, #31
 80003c8:	4907      	ldr	r1, [pc, #28]	@ (80003e8 <__NVIC_EnableIRQ+0x38>)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	095b      	lsrs	r3, r3, #5
 80003d0:	2001      	movs	r0, #1
 80003d2:	fa00 f202 	lsl.w	r2, r0, r2
 80003d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000e100 	.word	0xe000e100

080003ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db0a      	blt.n	8000416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	b2da      	uxtb	r2, r3
 8000404:	490c      	ldr	r1, [pc, #48]	@ (8000438 <__NVIC_SetPriority+0x4c>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	0112      	lsls	r2, r2, #4
 800040c:	b2d2      	uxtb	r2, r2
 800040e:	440b      	add	r3, r1
 8000410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000414:	e00a      	b.n	800042c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4908      	ldr	r1, [pc, #32]	@ (800043c <__NVIC_SetPriority+0x50>)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	f003 030f 	and.w	r3, r3, #15
 8000422:	3b04      	subs	r3, #4
 8000424:	0112      	lsls	r2, r2, #4
 8000426:	b2d2      	uxtb	r2, r2
 8000428:	440b      	add	r3, r1
 800042a:	761a      	strb	r2, [r3, #24]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	e000e100 	.word	0xe000e100
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f001 fbea 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f844 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 f9b4 	bl	80007b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000450:	f000 f8a2 	bl	8000598 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000454:	f000 f8e0 	bl	8000618 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000458:	f000 f98c 	bl	8000774 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800045c:	f000 f91a 	bl	8000694 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Call user-defined initialisation functions
  PERIPHERAL_CLOCKS_Init(); // Start all peripheral clocks
 8000460:	f000 fa28 	bl	80008b4 <PERIPHERAL_CLOCKS_Init>
  EXTI0_Init(); // Enable interrupts for EXTIO line
 8000464:	f000 fa36 	bl	80008d4 <EXTI0_Init>
  TIM3_Init(); // Enable timer interrupts
 8000468:	f000 fa74 	bl	8000954 <TIM3_Init>
  TIM4_Init(); // Enable timer interrupts
 800046c:	f000 fa9c 	bl	80009a8 <TIM4_Init>
  LED_Init(); // Enable LEDs
 8000470:	f000 faba 	bl	80009e8 <LED_Init>

  SerialInitialise(BAUD_115200, &USART1_PORT, &finishedTransmissionCallback); // Initialise UART
 8000474:	4a14      	ldr	r2, [pc, #80]	@ (80004c8 <main+0x88>)
 8000476:	4915      	ldr	r1, [pc, #84]	@ (80004cc <main+0x8c>)
 8000478:	2004      	movs	r0, #4
 800047a:	f000 ffcf 	bl	800141c <SerialInitialise>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800047e:	2100      	movs	r1, #0
 8000480:	4813      	ldr	r0, [pc, #76]	@ (80004d0 <main+0x90>)
 8000482:	f003 fd23 	bl	8003ecc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000486:	2104      	movs	r1, #4
 8000488:	4811      	ldr	r0, [pc, #68]	@ (80004d0 <main+0x90>)
 800048a:	f003 fd1f 	bl	8003ecc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800048e:	2108      	movs	r1, #8
 8000490:	480f      	ldr	r0, [pc, #60]	@ (80004d0 <main+0x90>)
 8000492:	f003 fd1b 	bl	8003ecc <HAL_TIM_PWM_Start>

  // Enable PWM for timer 8 + set initial servo angle
  setupGPIOPinsTim8();
 8000496:	f001 f8a9 	bl	80015ec <setupGPIOPinsTim8>
  setupTim8Pwm();
 800049a:	f001 f8c9 	bl	8001630 <setupTim8Pwm>
  servoAngle(2, 60); // Set initial servo position
 800049e:	213c      	movs	r1, #60	@ 0x3c
 80004a0:	2002      	movs	r0, #2
 80004a2:	f001 f915 	bl	80016d0 <servoAngle>

  // Initialise morse code module
  delayMiliSec(1000); // Add delay for startup
 80004a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004aa:	f000 fecb 	bl	8001244 <delayMiliSec>
  initialiseMorse(); // Initialise the struct to store morse code values
 80004ae:	f000 fb1d 	bl	8000aec <initialiseMorse>
  initialiseLevelCompleteFlag(); // Initialise the challenge as incomplete
 80004b2:	f000 fd23 	bl	8000efc <initialiseLevelCompleteFlag>


  while (1)
  {

	  if (getLevelCompleteFlag() == 1) {
 80004b6:	f000 feff 	bl	80012b8 <getLevelCompleteFlag>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d1fa      	bne.n	80004b6 <main+0x76>
		  levelCompleteProcedure();
 80004c0:	f000 ff12 	bl	80012e8 <levelCompleteProcedure>
	  if (getLevelCompleteFlag() == 1) {
 80004c4:	e7f7      	b.n	80004b6 <main+0x76>
 80004c6:	bf00      	nop
 80004c8:	08000281 	.word	0x08000281
 80004cc:	20000050 	.word	0x20000050
 80004d0:	200001ac 	.word	0x200001ac

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09e      	sub	sp, #120	@ 0x78
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004de:	2228      	movs	r2, #40	@ 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f004 fc8c 	bl	8004e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	463b      	mov	r3, r7
 80004fa:	223c      	movs	r2, #60	@ 0x3c
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fc7e 	bl	8004e00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000504:	2303      	movs	r3, #3
 8000506:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000508:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800050c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000516:	2310      	movs	r3, #16
 8000518:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	2302      	movs	r3, #2
 800051c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000522:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000524:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000528:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800052e:	4618      	mov	r0, r3
 8000530:	f002 f84c 	bl	80025cc <HAL_RCC_OscConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800053a:	f000 fa67 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	230f      	movs	r3, #15
 8000540:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	2302      	movs	r3, #2
 8000544:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800054a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000554:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f003 f844 	bl	80035e8 <HAL_RCC_ClockConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000566:	f000 fa51 	bl	8000a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <SystemClock_Config+0xc0>)
 800056c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f003 f9f6 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000586:	f000 fa41 	bl	8000a0c <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3778      	adds	r7, #120	@ 0x78
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	00020020 	.word	0x00020020

08000598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <MX_I2C1_Init+0x74>)
 800059e:	4a1c      	ldr	r2, [pc, #112]	@ (8000610 <MX_I2C1_Init+0x78>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <MX_I2C1_Init+0x74>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000614 <MX_I2C1_Init+0x7c>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ae:	4b17      	ldr	r3, [pc, #92]	@ (800060c <MX_I2C1_Init+0x74>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_I2C1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d2:	480e      	ldr	r0, [pc, #56]	@ (800060c <MX_I2C1_Init+0x74>)
 80005d4:	f001 fe00 	bl	80021d8 <HAL_I2C_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005de:	f000 fa15 	bl	8000a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4809      	ldr	r0, [pc, #36]	@ (800060c <MX_I2C1_Init+0x74>)
 80005e6:	f001 fe92 	bl	800230e <HAL_I2CEx_ConfigAnalogFilter>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005f0:	f000 fa0c 	bl	8000a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_I2C1_Init+0x74>)
 80005f8:	f001 fed4 	bl	80023a4 <HAL_I2CEx_ConfigDigitalFilter>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000602:	f000 fa03 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000f4 	.word	0x200000f4
 8000610:	40005400 	.word	0x40005400
 8000614:	00201d2b 	.word	0x00201d2b

08000618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <MX_SPI1_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <MX_SPI1_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_SPI1_Init+0x74>)
 8000624:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800062a:	4b18      	ldr	r3, [pc, #96]	@ (800068c <MX_SPI1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000630:	4b16      	ldr	r3, [pc, #88]	@ (800068c <MX_SPI1_Init+0x74>)
 8000632:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000636:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_SPI1_Init+0x74>)
 800063a:	2202      	movs	r2, #2
 800063c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_SPI1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_SPI1_Init+0x74>)
 8000646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800064a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_SPI1_Init+0x74>)
 800064e:	2208      	movs	r2, #8
 8000650:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_SPI1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_SPI1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_SPI1_Init+0x74>)
 8000666:	2207      	movs	r2, #7
 8000668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_SPI1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_SPI1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_SPI1_Init+0x74>)
 8000678:	f003 fb26 	bl	8003cc8 <HAL_SPI_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 f9c3 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000148 	.word	0x20000148
 8000690:	40013000 	.word	0x40013000

08000694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <MX_TIM2_Init+0xdc>)
 80006ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80006c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <MX_TIM2_Init+0xdc>)
 80006c2:	222f      	movs	r2, #47	@ 0x2f
 80006c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <MX_TIM2_Init+0xdc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <MX_TIM2_Init+0xdc>)
 80006ce:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80006d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <MX_TIM2_Init+0xdc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <MX_TIM2_Init+0xdc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006e0:	4823      	ldr	r0, [pc, #140]	@ (8000770 <MX_TIM2_Init+0xdc>)
 80006e2:	f003 fb9c 	bl	8003e1e <HAL_TIM_PWM_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 f98e 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	481c      	ldr	r0, [pc, #112]	@ (8000770 <MX_TIM2_Init+0xdc>)
 8000700:	f004 f990 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800070a:	f000 f97f 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070e:	2360      	movs	r3, #96	@ 0x60
 8000710:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4812      	ldr	r0, [pc, #72]	@ (8000770 <MX_TIM2_Init+0xdc>)
 8000726:	f003 fcd1 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000730:	f000 f96c 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2204      	movs	r2, #4
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_TIM2_Init+0xdc>)
 800073c:	f003 fcc6 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000746:	f000 f961 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2208      	movs	r2, #8
 800074e:	4619      	mov	r1, r3
 8000750:	4807      	ldr	r0, [pc, #28]	@ (8000770 <MX_TIM2_Init+0xdc>)
 8000752:	f003 fcbb 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800075c:	f000 f956 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <MX_TIM2_Init+0xdc>)
 8000762:	f001 f8bf 	bl	80018e4 <HAL_TIM_MspPostInit>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	@ 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001ac 	.word	0x200001ac

08000774 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_USB_PCD_Init+0x3c>)
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <MX_USB_PCD_Init+0x40>)
 800077c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USB_PCD_Init+0x3c>)
 8000780:	2208      	movs	r2, #8
 8000782:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_USB_PCD_Init+0x3c>)
 8000786:	2202      	movs	r2, #2
 8000788:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USB_PCD_Init+0x3c>)
 800078c:	2202      	movs	r2, #2
 800078e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_USB_PCD_Init+0x3c>)
 8000792:	2200      	movs	r2, #0
 8000794:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USB_PCD_Init+0x3c>)
 8000798:	2200      	movs	r2, #0
 800079a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_USB_PCD_Init+0x3c>)
 800079e:	f001 fe4d 	bl	800243c <HAL_PCD_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80007a8:	f000 f930 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200001f8 	.word	0x200001f8
 80007b4:	40005c00 	.word	0x40005c00

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ce:	4b37      	ldr	r3, [pc, #220]	@ (80008ac <MX_GPIO_Init+0xf4>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a36      	ldr	r2, [pc, #216]	@ (80008ac <MX_GPIO_Init+0xf4>)
 80007d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <MX_GPIO_Init+0xf4>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <MX_GPIO_Init+0xf4>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a30      	ldr	r2, [pc, #192]	@ (80008ac <MX_GPIO_Init+0xf4>)
 80007ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b2e      	ldr	r3, [pc, #184]	@ (80008ac <MX_GPIO_Init+0xf4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_GPIO_Init+0xf4>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <MX_GPIO_Init+0xf4>)
 8000804:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_GPIO_Init+0xf4>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_GPIO_Init+0xf4>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a24      	ldr	r2, [pc, #144]	@ (80008ac <MX_GPIO_Init+0xf4>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_GPIO_Init+0xf4>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_GPIO_Init+0xf4>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <MX_GPIO_Init+0xf4>)
 8000834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_GPIO_Init+0xf4>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000846:	2200      	movs	r2, #0
 8000848:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800084c:	4818      	ldr	r0, [pc, #96]	@ (80008b0 <MX_GPIO_Init+0xf8>)
 800084e:	f001 fcab 	bl	80021a8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000852:	2337      	movs	r3, #55	@ 0x37
 8000854:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000856:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0xf8>)
 8000868:	f001 fb24 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800086c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000870:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	480a      	ldr	r0, [pc, #40]	@ (80008b0 <MX_GPIO_Init+0xf8>)
 8000886:	f001 fb15 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f001 fb08 	bl	8001eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48001000 	.word	0x48001000

080008b4 <PERIPHERAL_CLOCKS_Init>:

/* USER CODE BEGIN 4 */

void PERIPHERAL_CLOCKS_Init(void) {
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	// Enable all clocks for required GPIOs
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN | RCC_AHBENR_GPIOEEN;
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <PERIPHERAL_CLOCKS_Init+0x1c>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <PERIPHERAL_CLOCKS_Init+0x1c>)
 80008be:	f443 1378 	orr.w	r3, r3, #4063232	@ 0x3e0000
 80008c2:	6153      	str	r3, [r2, #20]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <EXTI0_Init>:

void EXTI0_Init(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
	__disable_irq(); // Disable interrupts during setup

	GPIOA->MODER &= ~0x3; // Set pin 0 mode to 00 (input)
 80008dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80008e6:	f023 0303 	bic.w	r3, r3, #3
 80008ea:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // Enable SYSCFG clock
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <EXTI0_Init+0x74>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <EXTI0_Init+0x74>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6193      	str	r3, [r2, #24]
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0; // Clear EXTI0 mapping
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <EXTI0_Init+0x78>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4a13      	ldr	r2, [pc, #76]	@ (800094c <EXTI0_Init+0x78>)
 80008fe:	f023 030f 	bic.w	r3, r3, #15
 8000902:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; // Map EXTI0 to PA0
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <EXTI0_Init+0x78>)
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <EXTI0_Init+0x78>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= EXTI_IMR_MR0; // Unmask EXTI0
 800090c:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <EXTI0_Init+0x7c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0f      	ldr	r2, [pc, #60]	@ (8000950 <EXTI0_Init+0x7c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= EXTI_RTSR_TR0; // Trigger on rising edge (start timer)
 8000918:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <EXTI0_Init+0x7c>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	4a0c      	ldr	r2, [pc, #48]	@ (8000950 <EXTI0_Init+0x7c>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= EXTI_FTSR_TR0; // Trigger on falling edge (stop timer)
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <EXTI0_Init+0x7c>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <EXTI0_Init+0x7c>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	60d3      	str	r3, [r2, #12]


	NVIC_EnableIRQ(EXTI0_IRQn);    // For EXTI lines 0 and 1
 8000930:	2006      	movs	r0, #6
 8000932:	f7ff fd3d 	bl	80003b0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI0_IRQn, 2);  // Optional: Set lower priority
 8000936:	2102      	movs	r1, #2
 8000938:	2006      	movs	r0, #6
 800093a:	f7ff fd57 	bl	80003ec <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800093e:	b662      	cpsie	i
}
 8000940:	bf00      	nop

	__enable_irq(); // Re-enable interrupts post-setup
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	40010000 	.word	0x40010000
 8000950:	40010400 	.word	0x40010400

08000954 <TIM3_Init>:

void TIM3_Init(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
	__disable_irq(); // Disable interrupts during setup

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // Enable timer 3
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <TIM3_Init+0x4c>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <TIM3_Init+0x4c>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	61d3      	str	r3, [r2, #28]

	// Configure timer registers
	TIM3->PSC = 47999; // Prescaler of 1 ms for 48 MHz clock
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <TIM3_Init+0x50>)
 800096a:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 499; // Auto-reload after 500 ms for morse code application
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <TIM3_Init+0x50>)
 8000972:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000976:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->EGR = TIM_EGR_UG; // Generate an update event (apply PSC + ARR)
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <TIM3_Init+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	615a      	str	r2, [r3, #20]

    TIM3->DIER |= TIM_DIER_UIE; // Enable update interrupts
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <TIM3_Init+0x50>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <TIM3_Init+0x50>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM3_IRQn, 1); // Set interrupt priority to 0
 800098a:	2101      	movs	r1, #1
 800098c:	201d      	movs	r0, #29
 800098e:	f7ff fd2d 	bl	80003ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);     // Enable Timer 3 interrupt
 8000992:	201d      	movs	r0, #29
 8000994:	f7ff fd0c 	bl	80003b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000998:	b662      	cpsie	i
}
 800099a:	bf00      	nop

	__enable_irq(); // Re-enable interrupts post-setup
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40000400 	.word	0x40000400

080009a8 <TIM4_Init>:

void TIM4_Init(void) {
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
    // Enable TIM4 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <TIM4_Init+0x38>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <TIM4_Init+0x38>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	61d3      	str	r3, [r2, #28]

    // Configure prescaler so 1 tick = 1 ms (assuming 48 MHz system clock)
    TIM4->PSC = 47999;   // (48,000,000 / (47999 + 1)) = 1000 Hz = 1 ms per tick
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <TIM4_Init+0x3c>)
 80009ba:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set auto-reload to maximum (for longer delays)
    TIM4->ARR = 0xFFFFFFFF;
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <TIM4_Init+0x3c>)
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->EGR = TIM_EGR_UG; // Generate an update event (apply PSC + ARR)
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <TIM4_Init+0x3c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	615a      	str	r2, [r3, #20]

    // Just in case: make sure counter is off
    TIM4->CR1 = 0;
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <TIM4_Init+0x3c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40000800 	.word	0x40000800

080009e8 <LED_Init>:

void LED_Init(void) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0

	// Initialise pointer to higher half-word of MODE register in GPIOE
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <LED_Init+0x20>)
 80009f0:	607b      	str	r3, [r7, #4]

    *led_output_registers = 0x5555; // Output mode 0b01 for each port
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80009f8:	801a      	strh	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	48001002 	.word	0x48001002

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <arrAlloc>:
#include "main.h"

// Dynamically allocate memory for an array
void* arrAlloc(uint8_t size, size_t elemSize) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
    void* arr = calloc(size, elemSize);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	6839      	ldr	r1, [r7, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 f8b5 	bl	8004b98 <calloc>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	60fb      	str	r3, [r7, #12]
    if (arr == NULL) {
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <arrAlloc+0x26>
        exit(1);  // Allocation failed
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f004 f8c9 	bl	8004bd0 <exit>
    }
    return arr;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <matrixAlloc>:

// Allocate a 2D matrix (matrixSize rows, each with arrSize elements)
void** matrixAlloc(uint8_t matrixSize, uint8_t arrSize, size_t elemSize) {
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	603a      	str	r2, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	460b      	mov	r3, r1
 8000a56:	71bb      	strb	r3, [r7, #6]
    void** arr = calloc(matrixSize, sizeof(void*));
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 f89b 	bl	8004b98 <calloc>
 8000a62:	4603      	mov	r3, r0
 8000a64:	60bb      	str	r3, [r7, #8]
    if (arr == NULL) {
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <matrixAlloc+0x2a>
        exit(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f004 f8af 	bl	8004bd0 <exit>
    }

    for (uint8_t i = 0; i < matrixSize; i++) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e00d      	b.n	8000a94 <matrixAlloc+0x4c>
        arr[i] = arrAlloc(arrSize, elemSize);
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	18d4      	adds	r4, r2, r3
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	6839      	ldr	r1, [r7, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffc7 	bl	8000a18 <arrAlloc>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	3301      	adds	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3ed      	bcc.n	8000a78 <matrixAlloc+0x30>
    }
    return arr;
 8000a9c:	68bb      	ldr	r3, [r7, #8]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}

08000aa6 <freeMatrix>:
    }
    return newArr;
}

// Free all rows, then the outer matrix
void freeMatrix(void** matrix, uint8_t matrixSize) {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	70fb      	strb	r3, [r7, #3]
    if (!matrix) return;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d015      	beq.n	8000ae4 <freeMatrix+0x3e>
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e00a      	b.n	8000ad4 <freeMatrix+0x2e>
        free(matrix[i]);
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 f893 	bl	8004bf4 <free>
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfa      	ldrb	r2, [r7, #15]
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d3f0      	bcc.n	8000abe <freeMatrix+0x18>
    }
    free(matrix);  // Also free the outer array
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f004 f889 	bl	8004bf4 <free>
 8000ae2:	e000      	b.n	8000ae6 <freeMatrix+0x40>
    if (!matrix) return;
 8000ae4:	bf00      	nop
}
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <initialiseMorse>:
Strings strings;           // Create struct to store all strings

uint8_t levelCompleteFlag; // Flag signals if challenge complete


void initialiseMorse(void) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0

	// First declare level parameters
	morseLevels.numLevels = 3;
 8000af2:	4b94      	ldr	r3, [pc, #592]	@ (8000d44 <initialiseMorse+0x258>)
 8000af4:	2203      	movs	r2, #3
 8000af6:	721a      	strb	r2, [r3, #8]
	morseLevels.maxLevelSize = 8;
 8000af8:	4b92      	ldr	r3, [pc, #584]	@ (8000d44 <initialiseMorse+0x258>)
 8000afa:	2208      	movs	r2, #8
 8000afc:	725a      	strb	r2, [r3, #9]
	morseLevels.maxMorseLetterLength = 4;
 8000afe:	4b91      	ldr	r3, [pc, #580]	@ (8000d44 <initialiseMorse+0x258>)
 8000b00:	2204      	movs	r2, #4
 8000b02:	729a      	strb	r2, [r3, #10]

	// Next allocate space for the level data and their sizes
	morseLevels.levels = (MorseBin**)matrixAlloc(morseLevels.numLevels, morseLevels.maxLevelSize, sizeof(MorseBin));
 8000b04:	4b8f      	ldr	r3, [pc, #572]	@ (8000d44 <initialiseMorse+0x258>)
 8000b06:	7a1b      	ldrb	r3, [r3, #8]
 8000b08:	4a8e      	ldr	r2, [pc, #568]	@ (8000d44 <initialiseMorse+0x258>)
 8000b0a:	7a51      	ldrb	r1, [r2, #9]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff9a 	bl	8000a48 <matrixAlloc>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a8b      	ldr	r2, [pc, #556]	@ (8000d44 <initialiseMorse+0x258>)
 8000b18:	6013      	str	r3, [r2, #0]
	morseLevels.size = (uint8_t*)arrAlloc(morseLevels.numLevels, sizeof(uint8_t));
 8000b1a:	4b8a      	ldr	r3, [pc, #552]	@ (8000d44 <initialiseMorse+0x258>)
 8000b1c:	7a1b      	ldrb	r3, [r3, #8]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff79 	bl	8000a18 <arrAlloc>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a86      	ldr	r2, [pc, #536]	@ (8000d44 <initialiseMorse+0x258>)
 8000b2a:	6053      	str	r3, [r2, #4]

	// Level 1 "SOS"
	morseLevels.levels[0][0] = morseDict[18];
 8000b2c:	4b85      	ldr	r3, [pc, #532]	@ (8000d44 <initialiseMorse+0x258>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b85      	ldr	r3, [pc, #532]	@ (8000d48 <initialiseMorse+0x25c>)
 8000b34:	3336      	adds	r3, #54	@ 0x36
 8000b36:	8819      	ldrh	r1, [r3, #0]
 8000b38:	789b      	ldrb	r3, [r3, #2]
 8000b3a:	8011      	strh	r1, [r2, #0]
 8000b3c:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[0][1] = morseDict[14];
 8000b3e:	4b81      	ldr	r3, [pc, #516]	@ (8000d44 <initialiseMorse+0x258>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1cda      	adds	r2, r3, #3
 8000b46:	4b80      	ldr	r3, [pc, #512]	@ (8000d48 <initialiseMorse+0x25c>)
 8000b48:	332a      	adds	r3, #42	@ 0x2a
 8000b4a:	8819      	ldrh	r1, [r3, #0]
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	8011      	strh	r1, [r2, #0]
 8000b50:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[0][2] = morseDict[18];
 8000b52:	4b7c      	ldr	r3, [pc, #496]	@ (8000d44 <initialiseMorse+0x258>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	1d9a      	adds	r2, r3, #6
 8000b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d48 <initialiseMorse+0x25c>)
 8000b5c:	3336      	adds	r3, #54	@ 0x36
 8000b5e:	8819      	ldrh	r1, [r3, #0]
 8000b60:	789b      	ldrb	r3, [r3, #2]
 8000b62:	8011      	strh	r1, [r2, #0]
 8000b64:	7093      	strb	r3, [r2, #2]
	morseLevels.size[0] = 3;
 8000b66:	4b77      	ldr	r3, [pc, #476]	@ (8000d44 <initialiseMorse+0x258>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	701a      	strb	r2, [r3, #0]

	// Level 2 "HELP"
	morseLevels.levels[1][0] = morseDict[7];
 8000b6e:	4b75      	ldr	r3, [pc, #468]	@ (8000d44 <initialiseMorse+0x258>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3304      	adds	r3, #4
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b74      	ldr	r3, [pc, #464]	@ (8000d48 <initialiseMorse+0x25c>)
 8000b78:	3315      	adds	r3, #21
 8000b7a:	8819      	ldrh	r1, [r3, #0]
 8000b7c:	789b      	ldrb	r3, [r3, #2]
 8000b7e:	8011      	strh	r1, [r2, #0]
 8000b80:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[1][1] = morseDict[4];
 8000b82:	4b70      	ldr	r3, [pc, #448]	@ (8000d44 <initialiseMorse+0x258>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3304      	adds	r3, #4
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1cda      	adds	r2, r3, #3
 8000b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d48 <initialiseMorse+0x25c>)
 8000b8e:	330c      	adds	r3, #12
 8000b90:	8819      	ldrh	r1, [r3, #0]
 8000b92:	789b      	ldrb	r3, [r3, #2]
 8000b94:	8011      	strh	r1, [r2, #0]
 8000b96:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[1][2] = morseDict[11];
 8000b98:	4b6a      	ldr	r3, [pc, #424]	@ (8000d44 <initialiseMorse+0x258>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1d9a      	adds	r2, r3, #6
 8000ba2:	4b69      	ldr	r3, [pc, #420]	@ (8000d48 <initialiseMorse+0x25c>)
 8000ba4:	3321      	adds	r3, #33	@ 0x21
 8000ba6:	8819      	ldrh	r1, [r3, #0]
 8000ba8:	789b      	ldrb	r3, [r3, #2]
 8000baa:	8011      	strh	r1, [r2, #0]
 8000bac:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[1][3] = morseDict[15];
 8000bae:	4b65      	ldr	r3, [pc, #404]	@ (8000d44 <initialiseMorse+0x258>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f103 0209 	add.w	r2, r3, #9
 8000bba:	4b63      	ldr	r3, [pc, #396]	@ (8000d48 <initialiseMorse+0x25c>)
 8000bbc:	332d      	adds	r3, #45	@ 0x2d
 8000bbe:	8819      	ldrh	r1, [r3, #0]
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	8011      	strh	r1, [r2, #0]
 8000bc4:	7093      	strb	r3, [r2, #2]
	morseLevels.size[1] = 4;
 8000bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8000d44 <initialiseMorse+0x258>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	2204      	movs	r2, #4
 8000bce:	701a      	strb	r2, [r3, #0]

	// Level 3 "SAVE KHIT"
	morseLevels.levels[2][0] = morseDict[18];
 8000bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8000d44 <initialiseMorse+0x258>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d48 <initialiseMorse+0x25c>)
 8000bda:	3336      	adds	r3, #54	@ 0x36
 8000bdc:	8819      	ldrh	r1, [r3, #0]
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	8011      	strh	r1, [r2, #0]
 8000be2:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][1] = morseDict[0];
 8000be4:	4b57      	ldr	r3, [pc, #348]	@ (8000d44 <initialiseMorse+0x258>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3308      	adds	r3, #8
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3303      	adds	r3, #3
 8000bee:	4a56      	ldr	r2, [pc, #344]	@ (8000d48 <initialiseMorse+0x25c>)
 8000bf0:	8811      	ldrh	r1, [r2, #0]
 8000bf2:	7892      	ldrb	r2, [r2, #2]
 8000bf4:	8019      	strh	r1, [r3, #0]
 8000bf6:	709a      	strb	r2, [r3, #2]
	morseLevels.levels[2][2] = morseDict[21];
 8000bf8:	4b52      	ldr	r3, [pc, #328]	@ (8000d44 <initialiseMorse+0x258>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1d9a      	adds	r2, r3, #6
 8000c02:	4b51      	ldr	r3, [pc, #324]	@ (8000d48 <initialiseMorse+0x25c>)
 8000c04:	333f      	adds	r3, #63	@ 0x3f
 8000c06:	8819      	ldrh	r1, [r3, #0]
 8000c08:	789b      	ldrb	r3, [r3, #2]
 8000c0a:	8011      	strh	r1, [r2, #0]
 8000c0c:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][3] = morseDict[4];
 8000c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000d44 <initialiseMorse+0x258>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3308      	adds	r3, #8
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f103 0209 	add.w	r2, r3, #9
 8000c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8000d48 <initialiseMorse+0x25c>)
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	8819      	ldrh	r1, [r3, #0]
 8000c20:	789b      	ldrb	r3, [r3, #2]
 8000c22:	8011      	strh	r1, [r2, #0]
 8000c24:	7093      	strb	r3, [r2, #2]

	morseLevels.levels[2][4] = morseDict[10];
 8000c26:	4b47      	ldr	r3, [pc, #284]	@ (8000d44 <initialiseMorse+0x258>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f103 020c 	add.w	r2, r3, #12
 8000c32:	4b45      	ldr	r3, [pc, #276]	@ (8000d48 <initialiseMorse+0x25c>)
 8000c34:	331e      	adds	r3, #30
 8000c36:	8819      	ldrh	r1, [r3, #0]
 8000c38:	789b      	ldrb	r3, [r3, #2]
 8000c3a:	8011      	strh	r1, [r2, #0]
 8000c3c:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][5] = morseDict[7];
 8000c3e:	4b41      	ldr	r3, [pc, #260]	@ (8000d44 <initialiseMorse+0x258>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3308      	adds	r3, #8
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f103 020f 	add.w	r2, r3, #15
 8000c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d48 <initialiseMorse+0x25c>)
 8000c4c:	3315      	adds	r3, #21
 8000c4e:	8819      	ldrh	r1, [r3, #0]
 8000c50:	789b      	ldrb	r3, [r3, #2]
 8000c52:	8011      	strh	r1, [r2, #0]
 8000c54:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][6] = morseDict[8];
 8000c56:	4b3b      	ldr	r3, [pc, #236]	@ (8000d44 <initialiseMorse+0x258>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f103 0212 	add.w	r2, r3, #18
 8000c62:	4b39      	ldr	r3, [pc, #228]	@ (8000d48 <initialiseMorse+0x25c>)
 8000c64:	3318      	adds	r3, #24
 8000c66:	8819      	ldrh	r1, [r3, #0]
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	8011      	strh	r1, [r2, #0]
 8000c6c:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][7] = morseDict[19];
 8000c6e:	4b35      	ldr	r3, [pc, #212]	@ (8000d44 <initialiseMorse+0x258>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3308      	adds	r3, #8
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f103 0215 	add.w	r2, r3, #21
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <initialiseMorse+0x25c>)
 8000c7c:	3339      	adds	r3, #57	@ 0x39
 8000c7e:	8819      	ldrh	r1, [r3, #0]
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	8011      	strh	r1, [r2, #0]
 8000c84:	7093      	strb	r3, [r2, #2]
	morseLevels.size[2] = 8;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <initialiseMorse+0x258>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	701a      	strb	r2, [r3, #0]

	morseLog.index = (uint8_t*)arrAlloc(morseLevels.numLevels, sizeof(uint8_t));
 8000c90:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <initialiseMorse+0x258>)
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	2101      	movs	r1, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff febe 	bl	8000a18 <arrAlloc>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8000d4c <initialiseMorse+0x260>)
 8000ca0:	6013      	str	r3, [r2, #0]
	morseLog.letter = (uint8_t*)arrAlloc(morseLevels.maxMorseLetterLength, sizeof(uint8_t));
 8000ca2:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <initialiseMorse+0x258>)
 8000ca4:	7a9b      	ldrb	r3, [r3, #10]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff feb5 	bl	8000a18 <arrAlloc>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <initialiseMorse+0x260>)
 8000cb2:	6093      	str	r3, [r2, #8]
	morseLog.currentLevel = 0;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <initialiseMorse+0x260>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	711a      	strb	r2, [r3, #4]
	morseLog.letterIndex = 0;
 8000cba:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <initialiseMorse+0x260>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	731a      	strb	r2, [r3, #12]


	// Create strings for user interface

	// Create level display header
	strings.levelDisplay = (uint8_t**)arrAlloc((morseLevels.numLevels + 1), sizeof(uint8_t*));
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <initialiseMorse+0x258>)
 8000cc2:	7a1b      	ldrb	r3, [r3, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fea4 	bl	8000a18 <arrAlloc>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d50 <initialiseMorse+0x264>)
 8000cd4:	6013      	str	r3, [r2, #0]
	strings.levelDisplay[0] = (uint8_t*)arrAlloc(28, sizeof(uint8_t));
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <initialiseMorse+0x264>)
 8000cd8:	681c      	ldr	r4, [r3, #0]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	201c      	movs	r0, #28
 8000cde:	f7ff fe9b 	bl	8000a18 <arrAlloc>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6023      	str	r3, [r4, #0]

	sprintf((char*)strings.levelDisplay[0], "\r\nLevels to be cleared:\r\n\r\n");
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <initialiseMorse+0x264>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4919      	ldr	r1, [pc, #100]	@ (8000d54 <initialiseMorse+0x268>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 f864 	bl	8004dbc <siprintf>

	// Fill in each level line
	for (uint8_t i = 0; i < morseLevels.numLevels; i++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	e06d      	b.n	8000dd6 <initialiseMorse+0x2ea>
		strings.levelDisplay[i + 1] = (uint8_t*)arrAlloc(12 + (2 * morseLevels.size[i]), sizeof(uint8_t));
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <initialiseMorse+0x258>)
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	3306      	adds	r3, #6
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	b2d8      	uxtb	r0, r3
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <initialiseMorse+0x264>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	3301      	adds	r3, #1
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	18d4      	adds	r4, r2, r3
 8000d18:	2101      	movs	r1, #1
 8000d1a:	f7ff fe7d 	bl	8000a18 <arrAlloc>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6023      	str	r3, [r4, #0]

	    sprintf((char*)strings.levelDisplay[i + 1], "Level %d: ", i + 1); // Start with the level name
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <initialiseMorse+0x264>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	3301      	adds	r3, #1
 8000d34:	461a      	mov	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <initialiseMorse+0x26c>)
 8000d38:	f004 f840 	bl	8004dbc <siprintf>

	    // Append each letter to the existing line
	    for (uint8_t j = 0; j < morseLevels.size[i]; j++) {
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	71bb      	strb	r3, [r7, #6]
 8000d40:	e02d      	b.n	8000d9e <initialiseMorse+0x2b2>
 8000d42:	bf00      	nop
 8000d44:	200004cc 	.word	0x200004cc
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	200004d8 	.word	0x200004d8
 8000d50:	200004e8 	.word	0x200004e8
 8000d54:	0800558c 	.word	0x0800558c
 8000d58:	080055a8 	.word	0x080055a8
	        char letterStr[4];  // Enough space for letter + space + null
	        sprintf((char*)letterStr, "%c ", morseLevels.levels[i][j].letter);
 8000d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed4 <initialiseMorse+0x3e8>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	463b      	mov	r3, r7
 8000d78:	4957      	ldr	r1, [pc, #348]	@ (8000ed8 <initialiseMorse+0x3ec>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 f81e 	bl	8004dbc <siprintf>
	        strcat((char*)strings.levelDisplay[i + 1], letterStr);  // Append to current line
 8000d80:	4b56      	ldr	r3, [pc, #344]	@ (8000edc <initialiseMorse+0x3f0>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	3301      	adds	r3, #1
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	463a      	mov	r2, r7
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 f83c 	bl	8004e10 <strcat>
	    for (uint8_t j = 0; j < morseLevels.size[i]; j++) {
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	71bb      	strb	r3, [r7, #6]
 8000d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed4 <initialiseMorse+0x3e8>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3d6      	bcc.n	8000d5c <initialiseMorse+0x270>
	    }

	    strcat((char*)strings.levelDisplay[i + 1], "\r\n");  // End the line
 8000dae:	4b4b      	ldr	r3, [pc, #300]	@ (8000edc <initialiseMorse+0x3f0>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	3301      	adds	r3, #1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	681c      	ldr	r4, [r3, #0]
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fa07 	bl	80001d0 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4423      	add	r3, r4
 8000dc6:	4a46      	ldr	r2, [pc, #280]	@ (8000ee0 <initialiseMorse+0x3f4>)
 8000dc8:	8811      	ldrh	r1, [r2, #0]
 8000dca:	7892      	ldrb	r2, [r2, #2]
 8000dcc:	8019      	strh	r1, [r3, #0]
 8000dce:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < morseLevels.numLevels; i++) {
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed4 <initialiseMorse+0x3e8>)
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d38c      	bcc.n	8000cfa <initialiseMorse+0x20e>
	}


	// Display levels message
	for (uint8_t i = 0; i < morseLevels.numLevels + 1; i++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	717b      	strb	r3, [r7, #5]
 8000de4:	e00c      	b.n	8000e00 <initialiseMorse+0x314>
		SerialOutputTest(strings.levelDisplay[i], &USART1_PORT);
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <initialiseMorse+0x3f0>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	797b      	ldrb	r3, [r7, #5]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	493c      	ldr	r1, [pc, #240]	@ (8000ee4 <initialiseMorse+0x3f8>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fbb6 	bl	8001566 <SerialOutputTest>
	for (uint8_t i = 0; i < morseLevels.numLevels + 1; i++) {
 8000dfa:	797b      	ldrb	r3, [r7, #5]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	717b      	strb	r3, [r7, #5]
 8000e00:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <initialiseMorse+0x3e8>)
 8000e02:	7a1b      	ldrb	r3, [r3, #8]
 8000e04:	797a      	ldrb	r2, [r7, #5]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d9ed      	bls.n	8000de6 <initialiseMorse+0x2fa>
	}

	// Create other messages
	strings.newline = (uint8_t*)arrAlloc(2, sizeof(uint8_t)); // Allocate memory for newline message
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fe03 	bl	8000a18 <arrAlloc>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a31      	ldr	r2, [pc, #196]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e16:	6193      	str	r3, [r2, #24]
	sprintf((char*)strings.newline, "\r\n"); // Newline message
 8000e18:	4b30      	ldr	r3, [pc, #192]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4930      	ldr	r1, [pc, #192]	@ (8000ee0 <initialiseMorse+0x3f4>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 ffcc 	bl	8004dbc <siprintf>

	strings.fail = (uint8_t*)arrAlloc(39, sizeof(uint8_t)); // Allocate memory for fail message
 8000e24:	2101      	movs	r1, #1
 8000e26:	2027      	movs	r0, #39	@ 0x27
 8000e28:	f7ff fdf6 	bl	8000a18 <arrAlloc>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e30:	6093      	str	r3, [r2, #8]
	sprintf((char*)strings.fail, "\r\nLevel failed, please try again!\r\n"); // Fail message
 8000e32:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	492c      	ldr	r1, [pc, #176]	@ (8000ee8 <initialiseMorse+0x3fc>)
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 ffbf 	bl	8004dbc <siprintf>

	strings.completeLevel = (uint8_t*)arrAlloc(21, sizeof(uint8_t)); // Allocate memory for level complete message
 8000e3e:	2101      	movs	r1, #1
 8000e40:	2015      	movs	r0, #21
 8000e42:	f7ff fde9 	bl	8000a18 <arrAlloc>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a24      	ldr	r2, [pc, #144]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e4a:	6113      	str	r3, [r2, #16]
	sprintf((char*)strings.completeLevel, "\r\nLevel complete!\r\n"); // Level complete message
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	4926      	ldr	r1, [pc, #152]	@ (8000eec <initialiseMorse+0x400>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 ffb2 	bl	8004dbc <siprintf>

	strings.completeGame = (uint8_t*)arrAlloc(20, sizeof(uint8_t)); // Allocate memory for game complete message
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2014      	movs	r0, #20
 8000e5c:	f7ff fddc 	bl	8000a18 <arrAlloc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a1e      	ldr	r2, [pc, #120]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e64:	6153      	str	r3, [r2, #20]
	sprintf((char*)strings.completeGame, "\r\nGame complete!\r\n"); // Game complete message
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4921      	ldr	r1, [pc, #132]	@ (8000ef0 <initialiseMorse+0x404>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 ffa5 	bl	8004dbc <siprintf>

	// Setup arrays for the morse input messages
	strings.morseInput = (uint8_t**)arrAlloc(2, sizeof(uint8_t*));
 8000e72:	2104      	movs	r1, #4
 8000e74:	2002      	movs	r0, #2
 8000e76:	f7ff fdcf 	bl	8000a18 <arrAlloc>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e7e:	6053      	str	r3, [r2, #4]
	strings.morseInput[0] = (uint8_t*)arrAlloc(15, sizeof(uint8_t));
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e82:	685c      	ldr	r4, [r3, #4]
 8000e84:	2101      	movs	r1, #1
 8000e86:	200f      	movs	r0, #15
 8000e88:	f7ff fdc6 	bl	8000a18 <arrAlloc>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6023      	str	r3, [r4, #0]
	strings.morseInput[1] = (uint8_t*)arrAlloc(16, sizeof(uint8_t));
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <initialiseMorse+0x3f0>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	1d1c      	adds	r4, r3, #4
 8000e96:	2101      	movs	r1, #1
 8000e98:	2010      	movs	r0, #16
 8000e9a:	f7ff fdbd 	bl	8000a18 <arrAlloc>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6023      	str	r3, [r4, #0]

	sprintf((char*)strings.morseInput[0], "Entered: dot\r\n"); // Dot input message
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <initialiseMorse+0x3f0>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4912      	ldr	r1, [pc, #72]	@ (8000ef4 <initialiseMorse+0x408>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 ff86 	bl	8004dbc <siprintf>
	sprintf((char*)strings.morseInput[1], "Entered: dash\r\n"); // Dash input message
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <initialiseMorse+0x3f0>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	490f      	ldr	r1, [pc, #60]	@ (8000ef8 <initialiseMorse+0x40c>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 ff7e 	bl	8004dbc <siprintf>

	SerialOutputTest(strings.newline, &USART1_PORT); // Output newline message
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <initialiseMorse+0x3f0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <initialiseMorse+0x3f8>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fb4d 	bl	8001566 <SerialOutputTest>
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	200004cc 	.word	0x200004cc
 8000ed8:	080055b4 	.word	0x080055b4
 8000edc:	200004e8 	.word	0x200004e8
 8000ee0:	080055b8 	.word	0x080055b8
 8000ee4:	20000050 	.word	0x20000050
 8000ee8:	080055bc 	.word	0x080055bc
 8000eec:	080055e0 	.word	0x080055e0
 8000ef0:	080055f4 	.word	0x080055f4
 8000ef4:	08005608 	.word	0x08005608
 8000ef8:	08005618 	.word	0x08005618

08000efc <initialiseLevelCompleteFlag>:


void initialiseLevelCompleteFlag(void) {
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	levelCompleteFlag = 0;
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <initialiseLevelCompleteFlag+0x14>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000504 	.word	0x20000504

08000f14 <assignMorse>:




void assignMorse(uint8_t dotDash) {
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]

	// User-provided input values
	uint8_t level = morseLog.currentLevel; // Set index for current level
 8000f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001108 <assignMorse+0x1f4>)
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	777b      	strb	r3, [r7, #29]
	uint8_t index = morseLog.index[level]; // Set index for length of level code
 8000f24:	4b78      	ldr	r3, [pc, #480]	@ (8001108 <assignMorse+0x1f4>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	7f7b      	ldrb	r3, [r7, #29]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	773b      	strb	r3, [r7, #28]
	uint8_t withinLetterIndex = morseLog.letterIndex; // Set index for current position in letter
 8000f30:	4b75      	ldr	r3, [pc, #468]	@ (8001108 <assignMorse+0x1f4>)
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
 8000f34:	76fb      	strb	r3, [r7, #27]

	// Comparison values as set in level initialisation
	uint8_t letterCode = morseLevels.levels[level][index].code; // Morse coded letter value
 8000f36:	4b75      	ldr	r3, [pc, #468]	@ (800110c <assignMorse+0x1f8>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	7f7b      	ldrb	r3, [r7, #29]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	7f3a      	ldrb	r2, [r7, #28]
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	76bb      	strb	r3, [r7, #26]
	uint8_t letterLength = morseLevels.levels[level][index].length; // Length of morse coded value
 8000f50:	4b6e      	ldr	r3, [pc, #440]	@ (800110c <assignMorse+0x1f8>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	7f7b      	ldrb	r3, [r7, #29]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	7f3a      	ldrb	r2, [r7, #28]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	789b      	ldrb	r3, [r3, #2]
 8000f68:	767b      	strb	r3, [r7, #25]
	uint8_t letter = morseLevels.levels[level][index].letter; // ASCII value of letter
 8000f6a:	4b68      	ldr	r3, [pc, #416]	@ (800110c <assignMorse+0x1f8>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	7f7b      	ldrb	r3, [r7, #29]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	6819      	ldr	r1, [r3, #0]
 8000f76:	7f3a      	ldrb	r2, [r7, #28]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	763b      	strb	r3, [r7, #24]

	// Declare letter message
	strings.letter = (uint8_t*)arrAlloc(24, sizeof(uint8_t)); // Allocate memory for letter completed message
 8000f84:	2101      	movs	r1, #1
 8000f86:	2018      	movs	r0, #24
 8000f88:	f7ff fd46 	bl	8000a18 <arrAlloc>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a60      	ldr	r2, [pc, #384]	@ (8001110 <assignMorse+0x1fc>)
 8000f90:	60d3      	str	r3, [r2, #12]
	sprintf((char*)strings.letter, "Letter completed: %c\r\n", letter); // Letter completed message
 8000f92:	4b5f      	ldr	r3, [pc, #380]	@ (8001110 <assignMorse+0x1fc>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	7e3a      	ldrb	r2, [r7, #24]
 8000f98:	495e      	ldr	r1, [pc, #376]	@ (8001114 <assignMorse+0x200>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 ff0e 	bl	8004dbc <siprintf>

	morseLog.letter[withinLetterIndex] = dotDash; // 0 for dot, 1 for dash
 8000fa0:	4b59      	ldr	r3, [pc, #356]	@ (8001108 <assignMorse+0x1f4>)
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	7efb      	ldrb	r3, [r7, #27]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	701a      	strb	r2, [r3, #0]

	// Create singular strings for ease of transmission

	// Fail message
	// Compute required size
	size_t lenFail = strlen((char*)strings.fail)
 8000fac:	4b58      	ldr	r3, [pc, #352]	@ (8001110 <assignMorse+0x1fc>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4604      	mov	r4, r0
			+ strlen((char*)strings.newline)
 8000fb8:	4b55      	ldr	r3, [pc, #340]	@ (8001110 <assignMorse+0x1fc>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff f907 	bl	80001d0 <strlen>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	441c      	add	r4, r3
			+ strlen((char*)strings.levelDisplay[level + 1])
 8000fc6:	4b52      	ldr	r3, [pc, #328]	@ (8001110 <assignMorse+0x1fc>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	7f7b      	ldrb	r3, [r7, #29]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f8fb 	bl	80001d0 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	441c      	add	r4, r3
			+ strlen((char*)strings.newline)
 8000fde:	4b4c      	ldr	r3, [pc, #304]	@ (8001110 <assignMorse+0x1fc>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f8f4 	bl	80001d0 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4423      	add	r3, r4
	size_t lenFail = strlen((char*)strings.fail)
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
			+ 1; // For null terminator

	// Allocate memory
	uint8_t* failString = (uint8_t*)arrAlloc(lenFail, sizeof(uint8_t));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fd0e 	bl	8000a18 <arrAlloc>
 8000ffc:	6138      	str	r0, [r7, #16]

	// Start with a copy of strings.fail
	strcpy((char*)failString, (char*)strings.fail);
 8000ffe:	4b44      	ldr	r3, [pc, #272]	@ (8001110 <assignMorse+0x1fc>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	4619      	mov	r1, r3
 8001004:	6938      	ldr	r0, [r7, #16]
 8001006:	f003 ff4f 	bl	8004ea8 <strcpy>

	// Concatenate the rest
	strcat((char*)failString, (char*)strings.newline);
 800100a:	4b41      	ldr	r3, [pc, #260]	@ (8001110 <assignMorse+0x1fc>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4619      	mov	r1, r3
 8001010:	6938      	ldr	r0, [r7, #16]
 8001012:	f003 fefd 	bl	8004e10 <strcat>
	strcat((char*)failString, (char*)strings.levelDisplay[level + 1]);
 8001016:	4b3e      	ldr	r3, [pc, #248]	@ (8001110 <assignMorse+0x1fc>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	7f7b      	ldrb	r3, [r7, #29]
 800101c:	3301      	adds	r3, #1
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	6938      	ldr	r0, [r7, #16]
 8001028:	f003 fef2 	bl	8004e10 <strcat>
	strcat((char*)failString, (char*)strings.newline);
 800102c:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <assignMorse+0x1fc>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4619      	mov	r1, r3
 8001032:	6938      	ldr	r0, [r7, #16]
 8001034:	f003 feec 	bl	8004e10 <strcat>



	// Level complete message
	// Compute required size
	size_t lenLevelComplete = strlen((char*)strings.completeLevel)
 8001038:	4b35      	ldr	r3, [pc, #212]	@ (8001110 <assignMorse+0x1fc>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8c7 	bl	80001d0 <strlen>
 8001042:	4604      	mov	r4, r0
			+ strlen((char*)strings.newline)
 8001044:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <assignMorse+0x1fc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f8c1 	bl	80001d0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	441c      	add	r4, r3
			+ strlen((char*)strings.levelDisplay[level + 2])
 8001052:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <assignMorse+0x1fc>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	7f7b      	ldrb	r3, [r7, #29]
 8001058:	3302      	adds	r3, #2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f8b5 	bl	80001d0 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	441c      	add	r4, r3
			+ strlen((char*)strings.newline)
 800106a:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <assignMorse+0x1fc>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f8ae 	bl	80001d0 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	4423      	add	r3, r4
	size_t lenLevelComplete = strlen((char*)strings.completeLevel)
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
			+ 1; // For null terminator

	// Allocate memory
	uint8_t* levelCompleteString = (uint8_t*)arrAlloc(lenLevelComplete, sizeof(uint8_t));
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fcc8 	bl	8000a18 <arrAlloc>
 8001088:	60b8      	str	r0, [r7, #8]

	// Start with a copy of strings.fail
	strcpy((char*)levelCompleteString, (char*)strings.completeLevel);
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <assignMorse+0x1fc>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	4619      	mov	r1, r3
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f003 ff09 	bl	8004ea8 <strcpy>

	// Concatenate the rest
	strcat((char*)levelCompleteString, (char*)strings.newline);
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <assignMorse+0x1fc>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4619      	mov	r1, r3
 800109c:	68b8      	ldr	r0, [r7, #8]
 800109e:	f003 feb7 	bl	8004e10 <strcat>
	strcat((char*)levelCompleteString, (char*)strings.levelDisplay[level + 2]);
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <assignMorse+0x1fc>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	7f7b      	ldrb	r3, [r7, #29]
 80010a8:	3302      	adds	r3, #2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	68b8      	ldr	r0, [r7, #8]
 80010b4:	f003 feac 	bl	8004e10 <strcat>
	strcat((char*)levelCompleteString, (char*)strings.newline);
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <assignMorse+0x1fc>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4619      	mov	r1, r3
 80010be:	68b8      	ldr	r0, [r7, #8]
 80010c0:	f003 fea6 	bl	8004e10 <strcat>




	// Check if the correct input provided
	if (dotDash != ((letterCode >> ((letterLength - 1) - withinLetterIndex)) & 1)) {
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	7eb9      	ldrb	r1, [r7, #26]
 80010c8:	7e7b      	ldrb	r3, [r7, #25]
 80010ca:	1e58      	subs	r0, r3, #1
 80010cc:	7efb      	ldrb	r3, [r7, #27]
 80010ce:	1ac3      	subs	r3, r0, r3
 80010d0:	fa41 f303 	asr.w	r3, r1, r3
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	429a      	cmp	r2, r3
 80010da:	d010      	beq.n	80010fe <assignMorse+0x1ea>

		SerialOutputTest(failString, &USART1_PORT); // Output the fail code on the USART line
 80010dc:	490e      	ldr	r1, [pc, #56]	@ (8001118 <assignMorse+0x204>)
 80010de:	6938      	ldr	r0, [r7, #16]
 80010e0:	f000 fa41 	bl	8001566 <SerialOutputTest>
		free(failString); // Free dynamically allocated memory
 80010e4:	6938      	ldr	r0, [r7, #16]
 80010e6:	f003 fd85 	bl	8004bf4 <free>

		morseLog.index[level] = 0;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <assignMorse+0x1f4>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	7f7b      	ldrb	r3, [r7, #29]
 80010f0:	4413      	add	r3, r2
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
		morseLog.letterIndex = 0;
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <assignMorse+0x1f4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	731a      	strb	r2, [r3, #12]
		return;
 80010fc:	e095      	b.n	800122a <assignMorse+0x316>
	}

	// Create morse letter out of currently stored morse code
	uint8_t fullLetter = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i <= withinLetterIndex; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	77bb      	strb	r3, [r7, #30]
 8001106:	e01d      	b.n	8001144 <assignMorse+0x230>
 8001108:	200004d8 	.word	0x200004d8
 800110c:	200004cc 	.word	0x200004cc
 8001110:	200004e8 	.word	0x200004e8
 8001114:	08005628 	.word	0x08005628
 8001118:	20000050 	.word	0x20000050
	    fullLetter <<= 1; // Shift bits left as index increases
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	77fb      	strb	r3, [r7, #31]
	    fullLetter |= (morseLog.letter[i] & 1); // Set each bit to 1 or 0 depending on dot/dash
 8001122:	4b43      	ldr	r3, [pc, #268]	@ (8001230 <assignMorse+0x31c>)
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	7fbb      	ldrb	r3, [r7, #30]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b25b      	sxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b25a      	sxtb	r2, r3
 8001134:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i <= withinLetterIndex; i++) {
 800113e:	7fbb      	ldrb	r3, [r7, #30]
 8001140:	3301      	adds	r3, #1
 8001142:	77bb      	strb	r3, [r7, #30]
 8001144:	7fba      	ldrb	r2, [r7, #30]
 8001146:	7efb      	ldrb	r3, [r7, #27]
 8001148:	429a      	cmp	r2, r3
 800114a:	d9e7      	bls.n	800111c <assignMorse+0x208>
	}


	SerialOutputTest(strings.morseInput[dotDash], &USART1_PORT); // Output whether dot/dash
 800114c:	4b39      	ldr	r3, [pc, #228]	@ (8001234 <assignMorse+0x320>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4937      	ldr	r1, [pc, #220]	@ (8001238 <assignMorse+0x324>)
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fa03 	bl	8001566 <SerialOutputTest>

	// Check if full letter matches the provided value
	if ((fullLetter == letterCode) && (withinLetterIndex == (letterLength - 1))) {
 8001160:	7ffa      	ldrb	r2, [r7, #31]
 8001162:	7ebb      	ldrb	r3, [r7, #26]
 8001164:	429a      	cmp	r2, r3
 8001166:	d158      	bne.n	800121a <assignMorse+0x306>
 8001168:	7efa      	ldrb	r2, [r7, #27]
 800116a:	7e7b      	ldrb	r3, [r7, #25]
 800116c:	3b01      	subs	r3, #1
 800116e:	429a      	cmp	r2, r3
 8001170:	d153      	bne.n	800121a <assignMorse+0x306>

		SerialOutputTest(strings.letter, &USART1_PORT); // Output letter
 8001172:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <assignMorse+0x320>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	4930      	ldr	r1, [pc, #192]	@ (8001238 <assignMorse+0x324>)
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f9f4 	bl	8001566 <SerialOutputTest>
		free(strings.letter); // Free dynamically allocated memory
 800117e:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <assignMorse+0x320>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fd36 	bl	8004bf4 <free>

		morseLog.letterIndex = 0; // Index back to the start of a new letter
 8001188:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <assignMorse+0x31c>)
 800118a:	2200      	movs	r2, #0
 800118c:	731a      	strb	r2, [r3, #12]
		morseLog.index[level]++; // Increase the index variable for a new letter
 800118e:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <assignMorse+0x31c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	7f7b      	ldrb	r3, [r7, #29]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	3201      	adds	r2, #1
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]


		// Check if letter is the last in the level
		if (index == (morseLevels.size[level] - 1) && (level != (morseLevels.numLevels - 1))) {
 800119e:	7f3a      	ldrb	r2, [r7, #28]
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <assignMorse+0x328>)
 80011a2:	6859      	ldr	r1, [r3, #4]
 80011a4:	7f7b      	ldrb	r3, [r7, #29]
 80011a6:	440b      	add	r3, r1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d118      	bne.n	80011e2 <assignMorse+0x2ce>
 80011b0:	7f7a      	ldrb	r2, [r7, #29]
 80011b2:	4b22      	ldr	r3, [pc, #136]	@ (800123c <assignMorse+0x328>)
 80011b4:	7a1b      	ldrb	r3, [r3, #8]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d012      	beq.n	80011e2 <assignMorse+0x2ce>

			SerialOutputTest(levelCompleteString, &USART1_PORT); // Output level complete message
 80011bc:	491e      	ldr	r1, [pc, #120]	@ (8001238 <assignMorse+0x324>)
 80011be:	68b8      	ldr	r0, [r7, #8]
 80011c0:	f000 f9d1 	bl	8001566 <SerialOutputTest>
			free(levelCompleteString); // Free dynamically allocated memory
 80011c4:	68b8      	ldr	r0, [r7, #8]
 80011c6:	f003 fd15 	bl	8004bf4 <free>


			morseLog.currentLevel++; // Increase the level number
 80011ca:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <assignMorse+0x31c>)
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <assignMorse+0x31c>)
 80011d4:	711a      	strb	r2, [r3, #4]
			morseLog.index[level] = 0; // Reset the letter index
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <assignMorse+0x31c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	7f7b      	ldrb	r3, [r7, #29]
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		}

		// Check if all levels are complete
		if ((level == (morseLevels.numLevels - 1)) && (index == (morseLevels.size[level] - 1))) {
 80011e2:	7f7a      	ldrb	r2, [r7, #29]
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <assignMorse+0x328>)
 80011e6:	7a1b      	ldrb	r3, [r3, #8]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d11c      	bne.n	8001228 <assignMorse+0x314>
 80011ee:	7f3a      	ldrb	r2, [r7, #28]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <assignMorse+0x328>)
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	7f7b      	ldrb	r3, [r7, #29]
 80011f6:	440b      	add	r3, r1
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d113      	bne.n	8001228 <assignMorse+0x314>
			SerialOutputTest(strings.completeGame, &USART1_PORT); // Output game complete message
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <assignMorse+0x320>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <assignMorse+0x324>)
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9ad 	bl	8001566 <SerialOutputTest>

			// Stop button presses - wait for USART receive interrupt to finish program
	        EXTI->IMR &= ~EXTI_IMR_MR0; // Disable EXTI0 interrupt
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <assignMorse+0x32c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0b      	ldr	r2, [pc, #44]	@ (8001240 <assignMorse+0x32c>)
 8001212:	f023 0301 	bic.w	r3, r3, #1
 8001216:	6013      	str	r3, [r2, #0]
		}

		return;
 8001218:	e006      	b.n	8001228 <assignMorse+0x314>
	}



	morseLog.letterIndex++; // Increase index for dot/dash within the letter
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <assignMorse+0x31c>)
 800121c:	7b1b      	ldrb	r3, [r3, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <assignMorse+0x31c>)
 8001224:	731a      	strb	r2, [r3, #12]
 8001226:	e000      	b.n	800122a <assignMorse+0x316>
		return;
 8001228:	bf00      	nop
}
 800122a:	3724      	adds	r7, #36	@ 0x24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	200004d8 	.word	0x200004d8
 8001234:	200004e8 	.word	0x200004e8
 8001238:	20000050 	.word	0x20000050
 800123c:	200004cc 	.word	0x200004cc
 8001240:	40010400 	.word	0x40010400

08001244 <delayMiliSec>:


void delayMiliSec(uint16_t ms) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
	volatile uint32_t* timerCnt = &(TIM4->CNT);
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <delayMiliSec+0x44>)
 8001250:	60fb      	str	r3, [r7, #12]


	TIM4->CNT = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <delayMiliSec+0x48>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM4->CR1 |= TIM_CR1_CEN; // Start timer
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <delayMiliSec+0x48>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <delayMiliSec+0x48>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]

    while (*timerCnt < ms) {
 8001264:	bf00      	nop
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3fa      	bcc.n	8001266 <delayMiliSec+0x22>
        // Wait (busy loop)
    }

    TIM4->CR1 &= ~TIM_CR1_CEN; // Stop timer
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <delayMiliSec+0x48>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a05      	ldr	r2, [pc, #20]	@ (800128c <delayMiliSec+0x48>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40000824 	.word	0x40000824
 800128c:	40000800 	.word	0x40000800

08001290 <setLedState>:

	return *led_register;
}

// Function to set the LED state
void setLedState(uint8_t state) {
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
    uint8_t ledState = state;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	73fb      	strb	r3, [r7, #15]

    // Update LED display
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <setLedState+0x24>)
 80012a0:	60bb      	str	r3, [r7, #8]
    *led_register = ledState;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	48001015 	.word	0x48001015

080012b8 <getLevelCompleteFlag>:

uint8_t getLevelCompleteFlag(void) {
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	return levelCompleteFlag;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <getLevelCompleteFlag+0x14>)
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000504 	.word	0x20000504

080012d0 <setLevelCompleteFlag>:

void setLevelCompleteFlag(void) {
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	levelCompleteFlag = 1;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <setLevelCompleteFlag+0x14>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000504 	.word	0x20000504

080012e8 <levelCompleteProcedure>:

void levelCompleteProcedure(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	servoAngle(2, 150); // Set final servo angle
 80012ec:	2196      	movs	r1, #150	@ 0x96
 80012ee:	2002      	movs	r0, #2
 80012f0:	f000 f9ee 	bl	80016d0 <servoAngle>

	// Free all dynamically allocated memory
	freeMatrix((void**)morseLevels.levels, morseLevels.numLevels);
 80012f4:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <levelCompleteProcedure+0x98>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <levelCompleteProcedure+0x98>)
 80012fa:	7a12      	ldrb	r2, [r2, #8]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fbd1 	bl	8000aa6 <freeMatrix>
	free(morseLevels.size);
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <levelCompleteProcedure+0x98>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	f003 fc73 	bl	8004bf4 <free>
	free(morseLog.index);
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <levelCompleteProcedure+0x9c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fc6e 	bl	8004bf4 <free>
	free(morseLog.letter);
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <levelCompleteProcedure+0x9c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fc69 	bl	8004bf4 <free>

	freeMatrix((void**)strings.levelDisplay, (morseLevels.numLevels + 1));
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <levelCompleteProcedure+0xa0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <levelCompleteProcedure+0x98>)
 8001328:	7a1b      	ldrb	r3, [r3, #8]
 800132a:	3301      	adds	r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f7ff fbb8 	bl	8000aa6 <freeMatrix>
	freeMatrix((void**)strings.morseInput, 2);
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <levelCompleteProcedure+0xa0>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2102      	movs	r1, #2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fbb2 	bl	8000aa6 <freeMatrix>
	free(strings.fail);
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <levelCompleteProcedure+0xa0>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fc54 	bl	8004bf4 <free>
	free(strings.completeLevel);
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <levelCompleteProcedure+0xa0>)
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fc4f 	bl	8004bf4 <free>
	free(strings.completeGame);
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <levelCompleteProcedure+0xa0>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fc4a 	bl	8004bf4 <free>


	while(1) {
		setLedState(0b01010101);
 8001360:	2055      	movs	r0, #85	@ 0x55
 8001362:	f7ff ff95 	bl	8001290 <setLedState>
		delayMiliSec(1000); // 1000 ms delay
 8001366:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136a:	f7ff ff6b 	bl	8001244 <delayMiliSec>
		setLedState(0b10101010);
 800136e:	20aa      	movs	r0, #170	@ 0xaa
 8001370:	f7ff ff8e 	bl	8001290 <setLedState>
		delayMiliSec(1000); // 1000 ms delay
 8001374:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001378:	f7ff ff64 	bl	8001244 <delayMiliSec>
		setLedState(0b01010101);
 800137c:	bf00      	nop
 800137e:	e7ef      	b.n	8001360 <levelCompleteProcedure+0x78>
 8001380:	200004cc 	.word	0x200004cc
 8001384:	200004d8 	.word	0x200004d8
 8001388:	200004e8 	.word	0x200004e8

0800138c <__NVIC_EnableIRQ>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	@ (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	@ (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	@ (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(void)) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop

	__disable_irq(); // Disable interrupts for setup

	serial_port->completion_function = completion_function;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <SerialInitialise+0x114>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a3e      	ldr	r2, [pc, #248]	@ (8001530 <SerialInitialise+0x114>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800143e:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <SerialInitialise+0x114>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a3b      	ldr	r2, [pc, #236]	@ (8001530 <SerialInitialise+0x114>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	4b38      	ldr	r3, [pc, #224]	@ (8001530 <SerialInitialise+0x114>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4937      	ldr	r1, [pc, #220]	@ (8001530 <SerialInitialise+0x114>)
 8001454:	4313      	orrs	r3, r2
 8001456:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	6952      	ldr	r2, [r2, #20]
 8001460:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	6992      	ldr	r2, [r2, #24]
 800146a:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	69d9      	ldr	r1, [r3, #28]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	430a      	orrs	r2, r1
 800147c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	6a19      	ldr	r1, [r3, #32]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	430a      	orrs	r2, r1
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <SerialInitialise+0x114>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	4925      	ldr	r1, [pc, #148]	@ (8001530 <SerialInitialise+0x114>)
 800149a:	4313      	orrs	r3, r2
 800149c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <SerialInitialise+0x114>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4922      	ldr	r1, [pc, #136]	@ (8001530 <SerialInitialise+0x114>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	330c      	adds	r3, #12
 80014b2:	617b      	str	r3, [r7, #20]

	switch(baudRate){
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d825      	bhi.n	8001506 <SerialInitialise+0xea>
 80014ba:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <SerialInitialise+0xa4>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014d5 	.word	0x080014d5
 80014c4:	080014df 	.word	0x080014df
 80014c8:	080014e9 	.word	0x080014e9
 80014cc:	080014f3 	.word	0x080014f3
 80014d0:	080014fd 	.word	0x080014fd
		case BAUD_9600:
			*baud_rate_config = 0x1388; // 9600 at 48MHz
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	801a      	strh	r2, [r3, #0]
			break;
 80014dc:	e013      	b.n	8001506 <SerialInitialise+0xea>
		case BAUD_19200:
			*baud_rate_config = 0x09C4; // 19200 at 48MHz
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80014e4:	801a      	strh	r2, [r3, #0]
			break;
 80014e6:	e00e      	b.n	8001506 <SerialInitialise+0xea>
		case BAUD_38400:
			*baud_rate_config = 0x04E2; // 38400 at 48MHz
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80014ee:	801a      	strh	r2, [r3, #0]
			break;
 80014f0:	e009      	b.n	8001506 <SerialInitialise+0xea>
		case BAUD_57600:
			*baud_rate_config = 0x0341; // 57600 at 48MHz
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f240 3241 	movw	r2, #833	@ 0x341
 80014f8:	801a      	strh	r2, [r3, #0]
			break;
 80014fa:	e004      	b.n	8001506 <SerialInitialise+0xea>
		case BAUD_115200:
			*baud_rate_config = 0x01A1; // 115200 at 48MHz
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8001502:	801a      	strh	r2, [r3, #0]
			break;
 8001504:	bf00      	nop
	}


	// enable serial port for tx and rx and rx interrupts
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 022d 	orr.w	r2, r2, #45	@ 0x2d
 8001514:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(USART1_IRQn);        // Enable USART1 IRQ
 8001516:	2025      	movs	r0, #37	@ 0x25
 8001518:	f7ff ff38 	bl	800138c <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 2);   // Set priority to 2
 800151c:	2102      	movs	r1, #2
 800151e:	2025      	movs	r0, #37	@ 0x25
 8001520:	f7ff ff52 	bl	80013c8 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8001524:	b662      	cpsie	i
}
 8001526:	bf00      	nop


	__enable_irq(); // Enable interrupts post setup
}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000

08001534 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8001540:	bf00      	nop
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f8      	beq.n	8001542 <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	b292      	uxth	r2, r2
 8001558:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <SerialOutputTest>:

void SerialOutputTest(uint8_t* string, SerialPort *serial_port) {
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]

	uint8_t counter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
	while(*string != '\0') {
 8001574:	e00b      	b.n	800158e <SerialOutputTest+0x28>
		SerialOutputChar(*string, serial_port);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ffd9 	bl	8001534 <SerialOutputChar>
		counter++;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	3301      	adds	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
		string++;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3301      	adds	r3, #1
 800158c:	607b      	str	r3, [r7, #4]
	while(*string != '\0') {
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ef      	bne.n	8001576 <SerialOutputTest+0x10>
	}

	serial_port->completion_function();
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	4798      	blx	r3
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <SerialInputChar>:

uint8_t SerialInputChar(SerialPort* serial_port) {
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

	// Check for overrun and frame errors and clear
	while((serial_port->UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0){
 80015ac:	e003      	b.n	80015b6 <SerialInputChar+0x12>
		serial_port->UART->ICR = USART_ICR_ORECF | USART_ICR_FECF; // Clear error flags
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	220a      	movs	r2, #10
 80015b4:	621a      	str	r2, [r3, #32]
	while((serial_port->UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0){
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f003 030a 	and.w	r3, r3, #10
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f4      	bne.n	80015ae <SerialInputChar+0xa>
	}

	while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {
 80015c4:	bf00      	nop
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f003 0320 	and.w	r3, r3, #32
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f8      	beq.n	80015c6 <SerialInputChar+0x22>
	}

	return serial_port->UART->RDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <setupGPIOPinsTim8>:
 */

#include "main.h"


void setupGPIOPinsTim8(void) {
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	// Setup GPIO for PWM output
	GPIOC->MODER |= (0x2 << (6 * 2)) | (0x2 << (7 * 2)); // Alternate function mode for pins 6, 7 CH(1, 2)
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <setupGPIOPinsTim8+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <setupGPIOPinsTim8+0x40>)
 80015f6:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80015fa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x2 << (8 * 2)) | (0x2 << (9 * 2)); // Alternate function mode for pins 8, 9 CH(3, 4)
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <setupGPIOPinsTim8+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <setupGPIOPinsTim8+0x40>)
 8001602:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8001606:	6013      	str	r3, [r2, #0]

	GPIOC->AFR[0] |= (0x4 << (6 * 4)) | (0x4 << (7 * 4)); // Set alternate functions for pins 6, 7
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <setupGPIOPinsTim8+0x40>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <setupGPIOPinsTim8+0x40>)
 800160e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8001612:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[1] |= (0x4 << ((8 - 8) * 4)) | (0x4 << ((9 - 8) * 4)); // Set alternate function for pins 8, 9
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <setupGPIOPinsTim8+0x40>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <setupGPIOPinsTim8+0x40>)
 800161a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800161e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	48000800 	.word	0x48000800

08001630 <setupTim8Pwm>:


void setupTim8Pwm(void) {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN; // Enable TIM8 peripheral clock
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <setupTim8Pwm+0x98>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a23      	ldr	r2, [pc, #140]	@ (80016c8 <setupTim8Pwm+0x98>)
 800163a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800163e:	6193      	str	r3, [r2, #24]
	TIM8->BDTR |= TIM_BDTR_MOE; // Enable outputs for timer 8
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <setupTim8Pwm+0x9c>)
 8001642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001644:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <setupTim8Pwm+0x9c>)
 8001646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164a:	6453      	str	r3, [r2, #68]	@ 0x44

	// Configure timer registers
	TIM8->PSC = 7; // Prescaler of 1 microsec for 8 MHz clock
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <setupTim8Pwm+0x9c>)
 800164e:	2207      	movs	r2, #7
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM8->ARR = 20000; // Auto-reload after 20 ms for PWM application
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <setupTim8Pwm+0x9c>)
 8001654:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001658:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Set to PWM mode 1
	TIM8->CCMR1 |= (0x6 << 4) | TIM_CCMR1_OC1PE | (0x6 << 12) | TIM_CCMR1_OC2PE; // PWM mode 1 for Channel 1 and 2
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <setupTim8Pwm+0x9c>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a1b      	ldr	r2, [pc, #108]	@ (80016cc <setupTim8Pwm+0x9c>)
 8001660:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8001664:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001668:	6193      	str	r3, [r2, #24]
	TIM8->CCMR2 |= (0x6 << 4) | TIM_CCMR2_OC3PE | (0x6 << 12) | TIM_CCMR2_OC4PE; // PWM mode 1 for Channel 3 and 4
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <setupTim8Pwm+0x9c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <setupTim8Pwm+0x9c>)
 8001670:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8001674:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001678:	61d3      	str	r3, [r2, #28]


	// Set and enable polarity for all channels
	TIM8->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P | TIM_CCER_CC3P | TIM_CCER_CC4P);
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <setupTim8Pwm+0x9c>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <setupTim8Pwm+0x9c>)
 8001680:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8001684:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001688:	6213      	str	r3, [r2, #32]
	TIM8->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <setupTim8Pwm+0x9c>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <setupTim8Pwm+0x9c>)
 8001690:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8001694:	f043 0311 	orr.w	r3, r3, #17
 8001698:	6213      	str	r3, [r2, #32]


	TIM8->CR1 |= TIM_CR1_ARPE; // Enable auto-reload preload
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <setupTim8Pwm+0x9c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <setupTim8Pwm+0x9c>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a4:	6013      	str	r3, [r2, #0]
	TIM8->EGR = TIM_EGR_UG; // Generate an update event (apply PSC + ARR)
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <setupTim8Pwm+0x9c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	615a      	str	r2, [r3, #20]

	TIM8->CNT = 0;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <setupTim8Pwm+0x9c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM8->CR1 |= TIM_CR1_CEN; // Start the timer
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <setupTim8Pwm+0x9c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <setupTim8Pwm+0x9c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6013      	str	r3, [r2, #0]

}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40013400 	.word	0x40013400

080016d0 <servoAngle>:


void servoAngle(uint8_t channel, uint8_t degree) {
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	460a      	mov	r2, r1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	// Calculate the pulse width
    uint16_t pulse = (uint16_t)(1000 + (1000 * degree)/90);
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	4a18      	ldr	r2, [pc, #96]	@ (800174c <servoAngle+0x7c>)
 80016ec:	fb82 1203 	smull	r1, r2, r2, r3
 80016f0:	441a      	add	r2, r3
 80016f2:	1192      	asrs	r2, r2, #6
 80016f4:	17db      	asrs	r3, r3, #31
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016fe:	81fb      	strh	r3, [r7, #14]

    // Apply to the given channel
    switch (channel) {
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	3b01      	subs	r3, #1
 8001704:	2b03      	cmp	r3, #3
 8001706:	d81b      	bhi.n	8001740 <servoAngle+0x70>
 8001708:	a201      	add	r2, pc, #4	@ (adr r2, 8001710 <servoAngle+0x40>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001721 	.word	0x08001721
 8001714:	08001729 	.word	0x08001729
 8001718:	08001731 	.word	0x08001731
 800171c:	08001739 	.word	0x08001739
        case 1: TIM8->CCR1 = pulse; break;
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <servoAngle+0x80>)
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	6353      	str	r3, [r2, #52]	@ 0x34
 8001726:	e00b      	b.n	8001740 <servoAngle+0x70>
        case 2: TIM8->CCR2 = pulse; break;
 8001728:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <servoAngle+0x80>)
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	6393      	str	r3, [r2, #56]	@ 0x38
 800172e:	e007      	b.n	8001740 <servoAngle+0x70>
        case 3: TIM8->CCR3 = pulse; break;
 8001730:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <servoAngle+0x80>)
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001736:	e003      	b.n	8001740 <servoAngle+0x70>
        case 4: TIM8->CCR4 = pulse; break;
 8001738:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <servoAngle+0x80>)
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	bf00      	nop
    }
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	b60b60b7 	.word	0xb60b60b7
 8001750:	40013400 	.word	0x40013400

08001754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_MspInit+0x44>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_MspInit+0x44>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6193      	str	r3, [r2, #24]
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_MspInit+0x44>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_MspInit+0x44>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <HAL_MspInit+0x44>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_MspInit+0x44>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800178a:	2007      	movs	r0, #7
 800178c:	f000 fb5e 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_I2C_MspInit+0x7c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d127      	bne.n	800180e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_I2C_MspInit+0x80>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a16      	ldr	r2, [pc, #88]	@ (800181c <HAL_I2C_MspInit+0x80>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_I2C_MspInit+0x80>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80017d6:	23c0      	movs	r3, #192	@ 0xc0
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	2301      	movs	r3, #1
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e6:	2304      	movs	r3, #4
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	480b      	ldr	r0, [pc, #44]	@ (8001820 <HAL_I2C_MspInit+0x84>)
 80017f2:	f000 fb5f 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_I2C_MspInit+0x80>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a08      	ldr	r2, [pc, #32]	@ (800181c <HAL_I2C_MspInit+0x80>)
 80017fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_I2C_MspInit+0x80>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	@ 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40005400 	.word	0x40005400
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400

08001824 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <HAL_SPI_MspInit+0x7c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d128      	bne.n	8001898 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <HAL_SPI_MspInit+0x80>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a16      	ldr	r2, [pc, #88]	@ (80018a4 <HAL_SPI_MspInit+0x80>)
 800184c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001850:	6193      	str	r3, [r2, #24]
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <HAL_SPI_MspInit+0x80>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_SPI_MspInit+0x80>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a10      	ldr	r2, [pc, #64]	@ (80018a4 <HAL_SPI_MspInit+0x80>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_SPI_MspInit+0x80>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001876:	23e0      	movs	r3, #224	@ 0xe0
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001886:	2305      	movs	r3, #5
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001894:	f000 fb0e 	bl	8001eb4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	@ 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40013000 	.word	0x40013000
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b8:	d10b      	bne.n	80018d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_TIM_PWM_MspInit+0x38>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <HAL_TIM_PWM_MspInit+0x38>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_TIM_PWM_MspInit+0x38>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001904:	d11d      	bne.n	8001942 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_TIM_MspPostInit+0x68>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a10      	ldr	r2, [pc, #64]	@ (800194c <HAL_TIM_MspPostInit+0x68>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_TIM_MspPostInit+0x68>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 800191e:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001922:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001930:	2301      	movs	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193e:	f000 fab9 	bl	8001eb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a18      	ldr	r2, [pc, #96]	@ (80019d0 <HAL_PCD_MspInit+0x80>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d129      	bne.n	80019c6 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_PCD_MspInit+0x84>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <HAL_PCD_MspInit+0x84>)
 8001978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197c:	6153      	str	r3, [r2, #20]
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_PCD_MspInit+0x84>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800198a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800199c:	230e      	movs	r3, #14
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019aa:	f000 fa83 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_PCD_MspInit+0x84>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_PCD_MspInit+0x84>)
 80019b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_PCD_MspInit+0x84>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40005c00 	.word	0x40005c00
 80019d4:	40021000 	.word	0x40021000

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <NMI_Handler+0x4>

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <MemManage_Handler+0x4>

080019f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <UsageFault_Handler+0x4>

08001a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2e:	f000 f93b 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */

uint8_t messageSent = 1;

void EXTI0_IRQHandler(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) {
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <EXTI0_IRQHandler+0x34>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00e      	beq.n	8001a66 <EXTI0_IRQHandler+0x2e>
        EXTI->PR |= EXTI_PR_PR0; // Clear interrupt flag
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <EXTI0_IRQHandler+0x34>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <EXTI0_IRQHandler+0x34>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6153      	str	r3, [r2, #20]

        messageSent = EXTI0Callback(messageSent);
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <EXTI0_IRQHandler+0x38>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fc21 	bl	80002a0 <EXTI0Callback>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <EXTI0_IRQHandler+0x38>)
 8001a64:	701a      	strb	r2, [r3, #0]
    }
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40010400 	.word	0x40010400
 8001a70:	20000078 	.word	0x20000078

08001a74 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF && messageSent == 0) {
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <TIM3_IRQHandler+0x4c>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <TIM3_IRQHandler+0x38>
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <TIM3_IRQHandler+0x50>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10f      	bne.n	8001aac <TIM3_IRQHandler+0x38>
        TIM3->SR &= ~TIM_SR_UIF;  // Clear the interrupt flag
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <TIM3_IRQHandler+0x4c>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac0 <TIM3_IRQHandler+0x4c>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	6113      	str	r3, [r2, #16]

        messageSent = TIM3Callback(messageSent);
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <TIM3_IRQHandler+0x50>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fc67 	bl	8000370 <TIM3Callback>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <TIM3_IRQHandler+0x50>)
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e006      	b.n	8001aba <TIM3_IRQHandler+0x46>
    } else {
        TIM3->SR &= ~TIM_SR_UIF;  // Clear the interrupt flag
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <TIM3_IRQHandler+0x4c>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a03      	ldr	r2, [pc, #12]	@ (8001ac0 <TIM3_IRQHandler+0x4c>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6113      	str	r3, [r2, #16]
    }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40000400 	.word	0x40000400
 8001ac4:	20000078 	.word	0x20000078

08001ac8 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	if (USART1->ISR & USART_ISR_RXNE) {
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <USART1_IRQHandler+0x30>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <USART1_IRQHandler+0x26>
		// Check if RXNE flag is set the receive data
		uint8_t status = SerialInputChar(&USART1_PORT);
 8001ada:	4808      	ldr	r0, [pc, #32]	@ (8001afc <USART1_IRQHandler+0x34>)
 8001adc:	f7ff fd62 	bl	80015a4 <SerialInputChar>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]

		// Check status and set flag
		if(status == 1) {
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <USART1_IRQHandler+0x26>
			setLevelCompleteFlag();
 8001aea:	f7ff fbf1 	bl	80012d0 <setLevelCompleteFlag>
		}
	}
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40013800 	.word	0x40013800
 8001afc:	20000050 	.word	0x20000050

08001b00 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0a:	f003 f9a1 	bl	8004e50 <__errno>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2216      	movs	r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
  return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_exit>:

void _exit (int status)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe7 	bl	8001b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <_exit+0x12>
	...

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	@ (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f003 f972 	bl	8004e50 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	2000a000 	.word	0x2000a000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	20000508 	.word	0x20000508
 8001ba0:	20000660 	.word	0x20000660

08001ba4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bcc:	f7ff ffea 	bl	8001ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopForever+0xe>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopForever+0x16>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f003 f931 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfa:	f7fe fc21 	bl	8000440 <main>

08001bfe <LoopForever>:

LoopForever:
    b LoopForever
 8001bfe:	e7fe      	b.n	8001bfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c00:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001c0c:	080056b4 	.word	0x080056b4
  ldr r2, =_sbss
 8001c10:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001c14:	2000065c 	.word	0x2000065c

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	@ (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f90d 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fd8c 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f917 	bl	8001e9a <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f8ed 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	@ (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000007c 	.word	0x2000007c
 8001ca0:	20000084 	.word	0x20000084
 8001ca4:	20000080 	.word	0x20000080

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000084 	.word	0x20000084
 8001ccc:	2000050c 	.word	0x2000050c

08001cd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000050c 	.word	0x2000050c

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	@ (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	@ (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff47 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff5c 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffb0 	bl	8001e08 <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	e154      	b.n	800216e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8146 	beq.w	8002168 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d005      	beq.n	8001ef4 <HAL_GPIO_Init+0x40>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d130      	bne.n	8001f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 0201 	and.w	r2, r3, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d017      	beq.n	8001f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d123      	bne.n	8001fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	08da      	lsrs	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3208      	adds	r2, #8
 8001fe0:	6939      	ldr	r1, [r7, #16]
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0203 	and.w	r2, r3, #3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80a0 	beq.w	8002168 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002028:	4b58      	ldr	r3, [pc, #352]	@ (800218c <HAL_GPIO_Init+0x2d8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a57      	ldr	r2, [pc, #348]	@ (800218c <HAL_GPIO_Init+0x2d8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b55      	ldr	r3, [pc, #340]	@ (800218c <HAL_GPIO_Init+0x2d8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002040:	4a53      	ldr	r2, [pc, #332]	@ (8002190 <HAL_GPIO_Init+0x2dc>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800206a:	d019      	beq.n	80020a0 <HAL_GPIO_Init+0x1ec>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a49      	ldr	r2, [pc, #292]	@ (8002194 <HAL_GPIO_Init+0x2e0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d013      	beq.n	800209c <HAL_GPIO_Init+0x1e8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a48      	ldr	r2, [pc, #288]	@ (8002198 <HAL_GPIO_Init+0x2e4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00d      	beq.n	8002098 <HAL_GPIO_Init+0x1e4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a47      	ldr	r2, [pc, #284]	@ (800219c <HAL_GPIO_Init+0x2e8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d007      	beq.n	8002094 <HAL_GPIO_Init+0x1e0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a46      	ldr	r2, [pc, #280]	@ (80021a0 <HAL_GPIO_Init+0x2ec>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_GPIO_Init+0x1dc>
 800208c:	2304      	movs	r3, #4
 800208e:	e008      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002090:	2305      	movs	r3, #5
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002094:	2303      	movs	r3, #3
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002098:	2302      	movs	r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 80020a0:	2300      	movs	r3, #0
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	f002 0203 	and.w	r2, r2, #3
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4093      	lsls	r3, r2
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b2:	4937      	ldr	r1, [pc, #220]	@ (8002190 <HAL_GPIO_Init+0x2dc>)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c0:	4b38      	ldr	r3, [pc, #224]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020e4:	4a2f      	ldr	r2, [pc, #188]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ea:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800210e:	4a25      	ldr	r2, [pc, #148]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002114:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002138:	4a1a      	ldr	r2, [pc, #104]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213e:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002162:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <HAL_GPIO_Init+0x2f0>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	f47f aea3 	bne.w	8001ec4 <HAL_GPIO_Init+0x10>
  }
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000
 8002194:	48000400 	.word	0x48000400
 8002198:	48000800 	.word	0x48000800
 800219c:	48000c00 	.word	0x48000c00
 80021a0:	48001000 	.word	0x48001000
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e08d      	b.n	8002306 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff facc 	bl	800179c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	@ 0x24
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e006      	b.n	8002260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800225e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d108      	bne.n	800227a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	e007      	b.n	800228a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002288:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800229c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69d9      	ldr	r1, [r3, #28]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d138      	bne.n	8002396 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800232e:	2302      	movs	r3, #2
 8002330:	e032      	b.n	8002398 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2224      	movs	r2, #36	@ 0x24
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002360:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d139      	bne.n	800242e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e033      	b.n	8002430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	@ 0x24
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0b9      	b.n	80025c2 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fa74 	bl	8001950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2203      	movs	r2, #3
 800246c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fb55 	bl	8004b24 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e03e      	b.n	80024fe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	3311      	adds	r3, #17
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	3310      	adds	r3, #16
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	3313      	adds	r3, #19
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	3320      	adds	r3, #32
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3324      	adds	r3, #36	@ 0x24
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	3301      	adds	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	791b      	ldrb	r3, [r3, #4]
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3bb      	bcc.n	8002480 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e044      	b.n	8002598 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	3301      	adds	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	791b      	ldrb	r3, [r3, #4]
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3b5      	bcc.n	800250e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025ae:	f002 fad4 	bl	8004b5a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025dc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f000 bff4 	b.w	80035da <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 816d 	beq.w	80028e2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002608:	4bb4      	ldr	r3, [pc, #720]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b04      	cmp	r3, #4
 8002612:	d00c      	beq.n	800262e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002614:	4bb1      	ldr	r3, [pc, #708]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d157      	bne.n	80026d0 <HAL_RCC_OscConfig+0x104>
 8002620:	4bae      	ldr	r3, [pc, #696]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d150      	bne.n	80026d0 <HAL_RCC_OscConfig+0x104>
 800262e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002632:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002642:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b3f      	cmp	r3, #63	@ 0x3f
 800264e:	d802      	bhi.n	8002656 <HAL_RCC_OscConfig+0x8a>
 8002650:	4ba2      	ldr	r3, [pc, #648]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0xb6>
 8002656:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800265a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800266a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800266e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002672:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800267e:	4b97      	ldr	r3, [pc, #604]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002686:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800268a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800268e:	fa92 f2a2 	rbit	r2, r2
 8002692:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002696:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800269a:	fab2 f282 	clz	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f042 0220 	orr.w	r2, r2, #32
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f002 021f 	and.w	r2, r2, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8114 	beq.w	80028e0 <HAL_RCC_OscConfig+0x314>
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 810b 	bne.w	80028e0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f000 bf85 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e0:	d106      	bne.n	80026f0 <HAL_RCC_OscConfig+0x124>
 80026e2:	4b7e      	ldr	r3, [pc, #504]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7d      	ldr	r2, [pc, #500]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e036      	b.n	800275e <HAL_RCC_OscConfig+0x192>
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x14e>
 8002700:	4b76      	ldr	r3, [pc, #472]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a75      	ldr	r2, [pc, #468]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b73      	ldr	r3, [pc, #460]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a72      	ldr	r2, [pc, #456]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e021      	b.n	800275e <HAL_RCC_OscConfig+0x192>
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x17a>
 800272c:	4b6b      	ldr	r3, [pc, #428]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6a      	ldr	r2, [pc, #424]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002732:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b68      	ldr	r3, [pc, #416]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a67      	ldr	r2, [pc, #412]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 800273e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x192>
 8002746:	4b65      	ldr	r3, [pc, #404]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a64      	ldr	r2, [pc, #400]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b62      	ldr	r3, [pc, #392]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a61      	ldr	r2, [pc, #388]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800275e:	4b5f      	ldr	r3, [pc, #380]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	495a      	ldr	r1, [pc, #360]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002774:	4313      	orrs	r3, r2
 8002776:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d054      	beq.n	8002832 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff faa2 	bl	8001cd0 <HAL_GetTick>
 800278c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002792:	f7ff fa9d 	bl	8001cd0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d902      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f000 bf19 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
 80027a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80027bc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80027c8:	d802      	bhi.n	80027d0 <HAL_RCC_OscConfig+0x204>
 80027ca:	4b44      	ldr	r3, [pc, #272]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e015      	b.n	80027fc <HAL_RCC_OscConfig+0x230>
 80027d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80027e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027e8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80027ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80027f8:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002800:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002804:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002808:	fa92 f2a2 	rbit	r2, r2
 800280c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002810:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f002 021f 	and.w	r2, r2, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0b0      	beq.n	8002792 <HAL_RCC_OscConfig+0x1c6>
 8002830:	e057      	b.n	80028e2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fa4d 	bl	8001cd0 <HAL_GetTick>
 8002836:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff fa48 	bl	8001cd0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	@ 0x64
 800284a:	d902      	bls.n	8002852 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	f000 bec4 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
 8002852:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002856:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002866:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b3f      	cmp	r3, #63	@ 0x3f
 8002872:	d802      	bhi.n	800287a <HAL_RCC_OscConfig+0x2ae>
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x2da>
 800287a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800288e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002892:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002896:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028a2:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <HAL_RCC_OscConfig+0x310>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028aa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80028ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028b2:	fa92 f2a2 	rbit	r2, r2
 80028b6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80028ba:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80028be:	fab2 f282 	clz	r2, r2
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f042 0220 	orr.w	r2, r2, #32
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f002 021f 	and.w	r2, r2, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1b0      	bne.n	800283c <HAL_RCC_OscConfig+0x270>
 80028da:	e002      	b.n	80028e2 <HAL_RCC_OscConfig+0x316>
 80028dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 816c 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f8:	4bcc      	ldr	r3, [pc, #816]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002904:	4bc9      	ldr	r3, [pc, #804]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d16d      	bne.n	80029ec <HAL_RCC_OscConfig+0x420>
 8002910:	4bc6      	ldr	r3, [pc, #792]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d167      	bne.n	80029ec <HAL_RCC_OscConfig+0x420>
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800292e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b3f      	cmp	r3, #63	@ 0x3f
 800293a:	d802      	bhi.n	8002942 <HAL_RCC_OscConfig+0x376>
 800293c:	4bbb      	ldr	r3, [pc, #748]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	e013      	b.n	800296a <HAL_RCC_OscConfig+0x39e>
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800295a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002966:	4bb1      	ldr	r3, [pc, #708]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	2202      	movs	r2, #2
 800296c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002970:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800297c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f002 021f 	and.w	r2, r2, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3e6>
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d002      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f000 be14 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b9e      	ldr	r3, [pc, #632]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	21f8      	movs	r1, #248	@ 0xf8
 80029c8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029d0:	fa91 f1a1 	rbit	r1, r1
 80029d4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80029d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80029dc:	fab1 f181 	clz	r1, r1
 80029e0:	b2c9      	uxtb	r1, r1
 80029e2:	408b      	lsls	r3, r1
 80029e4:	4991      	ldr	r1, [pc, #580]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	e0f1      	b.n	8002bd0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8083 	beq.w	8002b04 <HAL_RCC_OscConfig+0x538>
 80029fe:	2301      	movs	r3, #1
 8002a00:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a10:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a1e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	461a      	mov	r2, r3
 8002a26:	2301      	movs	r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff f951 	bl	8001cd0 <HAL_GetTick>
 8002a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7ff f94c 	bl	8001cd0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d902      	bls.n	8002a4a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	f000 bdc8 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002a5c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a68:	d802      	bhi.n	8002a70 <HAL_RCC_OscConfig+0x4a4>
 8002a6a:	4b70      	ldr	r3, [pc, #448]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	e013      	b.n	8002a98 <HAL_RCC_OscConfig+0x4cc>
 8002a70:	2302      	movs	r3, #2
 8002a72:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a82:	2302      	movs	r3, #2
 8002a84:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a88:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a94:	4b65      	ldr	r3, [pc, #404]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002aa2:	fa92 f2a2 	rbit	r2, r2
 8002aa6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002aaa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0220 	orr.w	r2, r2, #32
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0b4      	beq.n	8002a34 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	21f8      	movs	r1, #248	@ 0xf8
 8002ae0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002ae8:	fa91 f1a1 	rbit	r1, r1
 8002aec:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002af0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002af4:	fab1 f181 	clz	r1, r1
 8002af8:	b2c9      	uxtb	r1, r1
 8002afa:	408b      	lsls	r3, r1
 8002afc:	494b      	ldr	r1, [pc, #300]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
 8002b02:	e065      	b.n	8002bd0 <HAL_RCC_OscConfig+0x604>
 8002b04:	2301      	movs	r3, #1
 8002b06:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff f8ce 	bl	8001cd0 <HAL_GetTick>
 8002b34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f8c9 	bl	8001cd0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d902      	bls.n	8002b50 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	f000 bd45 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b6e:	d802      	bhi.n	8002b76 <HAL_RCC_OscConfig+0x5aa>
 8002b70:	4b2e      	ldr	r3, [pc, #184]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	e013      	b.n	8002b9e <HAL_RCC_OscConfig+0x5d2>
 8002b76:	2302      	movs	r3, #2
 8002b78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b9a:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <HAL_RCC_OscConfig+0x660>)
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002ba4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ba8:	fa92 f2a2 	rbit	r2, r2
 8002bac:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002bb0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f002 021f 	and.w	r2, r2, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1b4      	bne.n	8002b3a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8115 	beq.w	8002e10 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d07e      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x728>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_OscConfig+0x664>)
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7ff f856 	bl	8001cd0 <HAL_GetTick>
 8002c24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c28:	e00f      	b.n	8002c4a <HAL_RCC_OscConfig+0x67e>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7ff f84c 	bl	8001cd0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d902      	bls.n	8002c4a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	f000 bcc8 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c64:	2202      	movs	r2, #2
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ca2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca4:	4bb0      	ldr	r3, [pc, #704]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	6019      	str	r1, [r3, #0]
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	fa93 f1a3 	rbit	r1, r3
 8002cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cca:	6019      	str	r1, [r3, #0]
  return result;
 8002ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0a0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x668>
 8002cf2:	e08d      	b.n	8002e10 <HAL_RCC_OscConfig+0x844>
 8002cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d16:	601a      	str	r2, [r3, #0]
  return result;
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b90      	ldr	r3, [pc, #576]	@ (8002f6c <HAL_RCC_OscConfig+0x9a0>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	461a      	mov	r2, r3
 8002d32:	2300      	movs	r3, #0
 8002d34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe ffcb 	bl	8001cd0 <HAL_GetTick>
 8002d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe ffc6 	bl	8001cd0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d902      	bls.n	8002d56 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f000 bc42 	b.w	80035da <HAL_RCC_OscConfig+0x100e>
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002da6:	2202      	movs	r2, #2
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002dc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc2:	4b69      	ldr	r3, [pc, #420]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dce:	2102      	movs	r1, #2
 8002dd0:	6019      	str	r1, [r3, #0]
 8002dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fa93 f1a3 	rbit	r1, r3
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002de8:	6019      	str	r1, [r3, #0]
  return result;
 8002dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d197      	bne.n	8002d40 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 819e 	beq.w	8003162 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	4b4b      	ldr	r3, [pc, #300]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	61d3      	str	r3, [r2, #28]
 8002e44:	4b48      	ldr	r3, [pc, #288]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e50:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e5e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b42      	ldr	r3, [pc, #264]	@ (8002f70 <HAL_RCC_OscConfig+0x9a4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b3f      	ldr	r3, [pc, #252]	@ (8002f70 <HAL_RCC_OscConfig+0x9a4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3e      	ldr	r2, [pc, #248]	@ (8002f70 <HAL_RCC_OscConfig+0x9a4>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe ff27 	bl	8001cd0 <HAL_GetTick>
 8002e82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	e009      	b.n	8002e9c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe ff22 	bl	8001cd0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	@ 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e39e      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_OscConfig+0x9a4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x8fa>
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e035      	b.n	8002f32 <HAL_RCC_OscConfig+0x966>
 8002ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x924>
 8002ed6:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a23      	ldr	r2, [pc, #140]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6213      	str	r3, [r2, #32]
 8002ee2:	4b21      	ldr	r3, [pc, #132]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a20      	ldr	r2, [pc, #128]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	e020      	b.n	8002f32 <HAL_RCC_OscConfig+0x966>
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x94e>
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	4b16      	ldr	r3, [pc, #88]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a15      	ldr	r2, [pc, #84]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x966>
 8002f1a:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f68 <HAL_RCC_OscConfig+0x99c>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7fe fec4 	bl	8001cd0 <HAL_GetTick>
 8002f48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e012      	b.n	8002f74 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe febf 	bl	8001cd0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d908      	bls.n	8002f74 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e339      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	10908120 	.word	0x10908120
 8002f70:	40007000 	.word	0x40007000
 8002f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fba:	601a      	str	r2, [r3, #0]
  return result;
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fc4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_OscConfig+0xa10>
 8002fd6:	4b98      	ldr	r3, [pc, #608]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	e013      	b.n	8003004 <HAL_RCC_OscConfig+0xa38>
 8002fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	4b8d      	ldr	r3, [pc, #564]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003008:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800300c:	2102      	movs	r1, #2
 800300e:	6011      	str	r1, [r2, #0]
 8003010:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003014:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	fa92 f1a2 	rbit	r1, r2
 800301e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003022:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003026:	6011      	str	r1, [r2, #0]
  return result;
 8003028:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800302c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	fab2 f282 	clz	r2, r2
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f002 021f 	and.w	r2, r2, #31
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	f43f af7f 	beq.w	8002f4e <HAL_RCC_OscConfig+0x982>
 8003050:	e07d      	b.n	800314e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fe fe3d 	bl	8001cd0 <HAL_GetTick>
 8003056:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fe fe38 	bl	8001cd0 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e2b2      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
 8003074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003078:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800307c:	2202      	movs	r2, #2
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003092:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030a0:	2202      	movs	r2, #2
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030ba:	601a      	str	r2, [r3, #0]
  return result;
 80030bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <HAL_RCC_OscConfig+0xb10>
 80030d6:	4b58      	ldr	r3, [pc, #352]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	e013      	b.n	8003104 <HAL_RCC_OscConfig+0xb38>
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	4b4d      	ldr	r3, [pc, #308]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003108:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800310c:	2102      	movs	r1, #2
 800310e:	6011      	str	r1, [r2, #0]
 8003110:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003114:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	fa92 f1a2 	rbit	r1, r2
 800311e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003122:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003126:	6011      	str	r1, [r2, #0]
  return result;
 8003128:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800312c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	fab2 f282 	clz	r2, r2
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f002 021f 	and.w	r2, r2, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f202 	lsl.w	r2, r1, r2
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d186      	bne.n	800305c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800314e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b38      	ldr	r3, [pc, #224]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a37      	ldr	r2, [pc, #220]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003160:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8232 	beq.w	80035d8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003174:	4b30      	ldr	r3, [pc, #192]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	f000 8201 	beq.w	8003584 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	2b02      	cmp	r3, #2
 8003190:	f040 8157 	bne.w	8003442 <HAL_RCC_OscConfig+0xe76>
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800319c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031b8:	601a      	str	r2, [r3, #0]
  return result;
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031c2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	461a      	mov	r2, r3
 80031d6:	2300      	movs	r3, #0
 80031d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fe fd79 	bl	8001cd0 <HAL_GetTick>
 80031de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e2:	e009      	b.n	80031f8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fd74 	bl	8001cd0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1f0      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800321c:	601a      	str	r2, [r3, #0]
  return result;
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003226:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003230:	d804      	bhi.n	800323c <HAL_RCC_OscConfig+0xc70>
 8003232:	4b01      	ldr	r3, [pc, #4]	@ (8003238 <HAL_RCC_OscConfig+0xc6c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	e029      	b.n	800328c <HAL_RCC_OscConfig+0xcc0>
 8003238:	40021000 	.word	0x40021000
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003244:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	fa93 f2a3 	rbit	r2, r3
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800326a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fa93 f2a3 	rbit	r2, r3
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	4bc3      	ldr	r3, [pc, #780]	@ (8003598 <HAL_RCC_OscConfig+0xfcc>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003290:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003294:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003298:	6011      	str	r1, [r2, #0]
 800329a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800329e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	fa92 f1a2 	rbit	r1, r2
 80032a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032b0:	6011      	str	r1, [r2, #0]
  return result;
 80032b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032b6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	fab2 f282 	clz	r2, r2
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	f042 0220 	orr.w	r2, r2, #32
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f002 021f 	and.w	r2, r2, #31
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d185      	bne.n	80031e4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d8:	4baf      	ldr	r3, [pc, #700]	@ (8003598 <HAL_RCC_OscConfig+0xfcc>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80032ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	49a7      	ldr	r1, [pc, #668]	@ (8003598 <HAL_RCC_OscConfig+0xfcc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
 8003300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003304:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003308:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003312:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003320:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003324:	601a      	str	r2, [r3, #0]
  return result;
 8003326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800332e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800333a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	2301      	movs	r3, #1
 8003344:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe fcc3 	bl	8001cd0 <HAL_GetTick>
 800334a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334e:	e009      	b.n	8003364 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fcbe 	bl	8001cd0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e13a      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
 8003364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003368:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800336c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003388:	601a      	str	r2, [r3, #0]
  return result;
 800338a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003392:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b3f      	cmp	r3, #63	@ 0x3f
 800339c:	d802      	bhi.n	80033a4 <HAL_RCC_OscConfig+0xdd8>
 800339e:	4b7e      	ldr	r3, [pc, #504]	@ (8003598 <HAL_RCC_OscConfig+0xfcc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e027      	b.n	80033f4 <HAL_RCC_OscConfig+0xe28>
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ce:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033dc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f2a3 	rbit	r2, r3
 80033e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	4b69      	ldr	r3, [pc, #420]	@ (8003598 <HAL_RCC_OscConfig+0xfcc>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033f8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80033fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003400:	6011      	str	r1, [r2, #0]
 8003402:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003406:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	fa92 f1a2 	rbit	r1, r2
 8003410:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003414:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003418:	6011      	str	r1, [r2, #0]
  return result;
 800341a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800341e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	fab2 f282 	clz	r2, r2
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	f042 0220 	orr.w	r2, r2, #32
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	f002 021f 	and.w	r2, r2, #31
 8003434:	2101      	movs	r1, #1
 8003436:	fa01 f202 	lsl.w	r2, r1, r2
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d087      	beq.n	8003350 <HAL_RCC_OscConfig+0xd84>
 8003440:	e0ca      	b.n	80035d8 <HAL_RCC_OscConfig+0x100c>
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800344a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003466:	601a      	str	r2, [r3, #0]
  return result;
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003470:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800347c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	461a      	mov	r2, r3
 8003484:	2300      	movs	r3, #0
 8003486:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fc22 	bl	8001cd0 <HAL_GetTick>
 800348c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003490:	e009      	b.n	80034a6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003492:	f7fe fc1d 	bl	8001cd0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e099      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
 80034a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034aa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f2a3 	rbit	r2, r3
 80034c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034ca:	601a      	str	r2, [r3, #0]
  return result;
 80034cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80034de:	d802      	bhi.n	80034e6 <HAL_RCC_OscConfig+0xf1a>
 80034e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003598 <HAL_RCC_OscConfig+0xfcc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	e027      	b.n	8003536 <HAL_RCC_OscConfig+0xf6a>
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003514:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_RCC_OscConfig+0xfcc>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800353a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800353e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003542:	6011      	str	r1, [r2, #0]
 8003544:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003548:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	fa92 f1a2 	rbit	r1, r2
 8003552:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003556:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800355a:	6011      	str	r1, [r2, #0]
  return result;
 800355c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003560:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	fab2 f282 	clz	r2, r2
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f042 0220 	orr.w	r2, r2, #32
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f002 021f 	and.w	r2, r2, #31
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f202 	lsl.w	r2, r1, r2
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d187      	bne.n	8003492 <HAL_RCC_OscConfig+0xec6>
 8003582:	e029      	b.n	80035d8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d103      	bne.n	800359c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e020      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
 8003598:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359c:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <HAL_RCC_OscConfig+0x1018>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035c0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000

080035e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b09e      	sub	sp, #120	@ 0x78
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e154      	b.n	80038aa <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b89      	ldr	r3, [pc, #548]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d910      	bls.n	8003630 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b86      	ldr	r3, [pc, #536]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 0207 	bic.w	r2, r3, #7
 8003616:	4984      	ldr	r1, [pc, #528]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b82      	ldr	r3, [pc, #520]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e13c      	b.n	80038aa <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b7b      	ldr	r3, [pc, #492]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4978      	ldr	r1, [pc, #480]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 800364a:	4313      	orrs	r3, r2
 800364c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80cd 	beq.w	80037f6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d137      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xec>
 8003664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003668:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b3f      	cmp	r3, #63	@ 0x3f
 800367c:	d802      	bhi.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 800367e:	4b6b      	ldr	r3, [pc, #428]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	e00f      	b.n	80036a4 <HAL_RCC_ClockConfig+0xbc>
 8003684:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003688:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	667b      	str	r3, [r7, #100]	@ 0x64
 8003692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003696:	663b      	str	r3, [r7, #96]	@ 0x60
 8003698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036a0:	4b62      	ldr	r3, [pc, #392]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ac:	fa92 f2a2 	rbit	r2, r2
 80036b0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036b4:	fab2 f282 	clz	r2, r2
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	f042 0220 	orr.w	r2, r2, #32
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	f002 021f 	and.w	r2, r2, #31
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d171      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0ea      	b.n	80038aa <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d137      	bne.n	800374c <HAL_RCC_ClockConfig+0x164>
 80036dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80036f4:	d802      	bhi.n	80036fc <HAL_RCC_ClockConfig+0x114>
 80036f6:	4b4d      	ldr	r3, [pc, #308]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	e00f      	b.n	800371c <HAL_RCC_ClockConfig+0x134>
 80036fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003700:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	647b      	str	r3, [r7, #68]	@ 0x44
 800370a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800370e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003718:	4b44      	ldr	r3, [pc, #272]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003720:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003724:	fa92 f2a2 	rbit	r2, r2
 8003728:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800372a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	f042 0220 	orr.w	r2, r2, #32
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f002 021f 	and.w	r2, r2, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f202 	lsl.w	r2, r1, r2
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d135      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0ae      	b.n	80038aa <HAL_RCC_ClockConfig+0x2c2>
 800374c:	2302      	movs	r3, #2
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b3f      	cmp	r3, #63	@ 0x3f
 8003762:	d802      	bhi.n	800376a <HAL_RCC_ClockConfig+0x182>
 8003764:	4b31      	ldr	r3, [pc, #196]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	e00d      	b.n	8003786 <HAL_RCC_ClockConfig+0x19e>
 800376a:	2302      	movs	r3, #2
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
 8003776:	2302      	movs	r3, #2
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	2202      	movs	r2, #2
 8003788:	61ba      	str	r2, [r7, #24]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	fa92 f2a2 	rbit	r2, r2
 8003790:	617a      	str	r2, [r7, #20]
  return result;
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	fab2 f282 	clz	r2, r2
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f042 0220 	orr.w	r2, r2, #32
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f002 021f 	and.w	r2, r2, #31
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f202 	lsl.w	r2, r1, r2
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e07a      	b.n	80038aa <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b4:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 0203 	bic.w	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	491a      	ldr	r1, [pc, #104]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c6:	f7fe fa83 	bl	8001cd0 <HAL_GetTick>
 80037ca:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ce:	f7fe fa7f 	bl	8001cd0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e062      	b.n	80038aa <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <HAL_RCC_ClockConfig+0x244>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 020c 	and.w	r2, r3, #12
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d1eb      	bne.n	80037ce <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d215      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 0207 	bic.w	r2, r3, #7
 800380c:	4906      	ldr	r1, [pc, #24]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003814:	4b04      	ldr	r3, [pc, #16]	@ (8003828 <HAL_RCC_ClockConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d006      	beq.n	8003830 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_RCC_ClockConfig+0x2c2>
 8003826:	bf00      	nop
 8003828:	40022000 	.word	0x40022000
 800382c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383c:	4b1d      	ldr	r3, [pc, #116]	@ (80038b4 <HAL_RCC_ClockConfig+0x2cc>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	491a      	ldr	r1, [pc, #104]	@ (80038b4 <HAL_RCC_ClockConfig+0x2cc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385a:	4b16      	ldr	r3, [pc, #88]	@ (80038b4 <HAL_RCC_ClockConfig+0x2cc>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4912      	ldr	r1, [pc, #72]	@ (80038b4 <HAL_RCC_ClockConfig+0x2cc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800386e:	f000 f829 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8003872:	4601      	mov	r1, r0
 8003874:	4b0f      	ldr	r3, [pc, #60]	@ (80038b4 <HAL_RCC_ClockConfig+0x2cc>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800387c:	22f0      	movs	r2, #240	@ 0xf0
 800387e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	fa92 f2a2 	rbit	r2, r2
 8003886:	60fa      	str	r2, [r7, #12]
  return result;
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	fab2 f282 	clz	r2, r2
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	40d3      	lsrs	r3, r2
 8003892:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x2d0>)
 8003894:	5cd3      	ldrb	r3, [r2, r3]
 8003896:	fa21 f303 	lsr.w	r3, r1, r3
 800389a:	4a08      	ldr	r2, [pc, #32]	@ (80038bc <HAL_RCC_ClockConfig+0x2d4>)
 800389c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800389e:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HAL_RCC_ClockConfig+0x2d8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe f9d0 	bl	8001c48 <HAL_InitTick>
  
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3778      	adds	r7, #120	@ 0x78
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	08005640 	.word	0x08005640
 80038bc:	2000007c 	.word	0x2000007c
 80038c0:	20000080 	.word	0x20000080

080038c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80038de:	4b1e      	ldr	r3, [pc, #120]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x94>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x30>
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x36>
 80038f2:	e026      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f4:	4b19      	ldr	r3, [pc, #100]	@ (800395c <HAL_RCC_GetSysClockFreq+0x98>)
 80038f6:	613b      	str	r3, [r7, #16]
      break;
 80038f8:	e026      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	0c9b      	lsrs	r3, r3, #18
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	4a17      	ldr	r2, [pc, #92]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003908:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x94>)
 800390a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	4a14      	ldr	r2, [pc, #80]	@ (8003964 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
 8003914:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003920:	4a0e      	ldr	r2, [pc, #56]	@ (800395c <HAL_RCC_GetSysClockFreq+0x98>)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	fbb2 f2f3 	udiv	r2, r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e004      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a0c      	ldr	r2, [pc, #48]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]
      break;
 8003940:	e002      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_GetSysClockFreq+0x98>)
 8003944:	613b      	str	r3, [r7, #16]
      break;
 8003946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003948:	693b      	ldr	r3, [r7, #16]
}
 800394a:	4618      	mov	r0, r3
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	007a1200 	.word	0x007a1200
 8003960:	08005650 	.word	0x08005650
 8003964:	08005660 	.word	0x08005660
 8003968:	003d0900 	.word	0x003d0900

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b092      	sub	sp, #72	@ 0x48
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800397c:	2300      	movs	r3, #0
 800397e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80d2 	beq.w	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003990:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10e      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4a49      	ldr	r2, [pc, #292]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	61d3      	str	r3, [r2, #28]
 80039a8:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ba:	4b44      	ldr	r3, [pc, #272]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d118      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c6:	4b41      	ldr	r3, [pc, #260]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a40      	ldr	r2, [pc, #256]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d2:	f7fe f97d 	bl	8001cd0 <HAL_GetTick>
 80039d6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d8:	e008      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039da:	f7fe f979 	bl	8001cd0 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b64      	cmp	r3, #100	@ 0x64
 80039e6:	d901      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e167      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	4b37      	ldr	r3, [pc, #220]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039f8:	4b33      	ldr	r3, [pc, #204]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8082 	beq.w	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d07a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a18:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b25      	ldr	r3, [pc, #148]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	461a      	mov	r2, r3
 8003a42:	2301      	movs	r3, #1
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	2300      	movs	r3, #0
 8003a68:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d049      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fe f929 	bl	8001cd0 <HAL_GetTick>
 8003a7e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fe f925 	bl	8001cd0 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e111      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	61fb      	str	r3, [r7, #28]
  return result;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d108      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003ac2:	4b01      	ldr	r3, [pc, #4]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	e00d      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	10908100 	.word	0x10908100
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	4b78      	ldr	r3, [pc, #480]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	613a      	str	r2, [r7, #16]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	fa92 f2a2 	rbit	r2, r2
 8003aee:	60fa      	str	r2, [r7, #12]
  return result;
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	fab2 f282 	clz	r2, r2
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f002 021f 	and.w	r2, r2, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f202 	lsl.w	r2, r1, r2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0b9      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	496a      	ldr	r1, [pc, #424]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b28:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b40:	4b60      	ldr	r3, [pc, #384]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	f023 0203 	bic.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	495d      	ldr	r1, [pc, #372]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b5e:	4b59      	ldr	r3, [pc, #356]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4956      	ldr	r1, [pc, #344]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b7c:	4b51      	ldr	r3, [pc, #324]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	494e      	ldr	r1, [pc, #312]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	f023 0210 	bic.w	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4947      	ldr	r1, [pc, #284]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bb8:	4b42      	ldr	r3, [pc, #264]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc4:	493f      	ldr	r1, [pc, #252]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f023 0220 	bic.w	r2, r3, #32
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4938      	ldr	r1, [pc, #224]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf4:	4b33      	ldr	r3, [pc, #204]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	4930      	ldr	r1, [pc, #192]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c12:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	4929      	ldr	r1, [pc, #164]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c30:	4b24      	ldr	r3, [pc, #144]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	4921      	ldr	r1, [pc, #132]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	491a      	ldr	r1, [pc, #104]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c6c:	4b15      	ldr	r3, [pc, #84]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c78:	4912      	ldr	r1, [pc, #72]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	490b      	ldr	r1, [pc, #44]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	4903      	ldr	r1, [pc, #12]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3748      	adds	r7, #72	@ 0x48
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e09d      	b.n	8003e16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cea:	d009      	beq.n	8003d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
 8003cf2:	e005      	b.n	8003d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fd82 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d40:	d902      	bls.n	8003d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d56:	d007      	beq.n	8003d68 <HAL_SPI_Init+0xa0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003daa:	ea42 0103 	orr.w	r1, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	f003 0204 	and.w	r2, r3, #4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003de4:	ea42 0103 	orr.w	r1, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e049      	b.n	8003ec4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fd fd2f 	bl	80018a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 fa49 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_TIM_PWM_Start+0x24>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e03c      	b.n	8003f6a <HAL_TIM_PWM_Start+0x9e>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d109      	bne.n	8003f0a <HAL_TIM_PWM_Start+0x3e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	e02f      	b.n	8003f6a <HAL_TIM_PWM_Start+0x9e>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d109      	bne.n	8003f24 <HAL_TIM_PWM_Start+0x58>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e022      	b.n	8003f6a <HAL_TIM_PWM_Start+0x9e>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d109      	bne.n	8003f3e <HAL_TIM_PWM_Start+0x72>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e015      	b.n	8003f6a <HAL_TIM_PWM_Start+0x9e>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d109      	bne.n	8003f58 <HAL_TIM_PWM_Start+0x8c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e008      	b.n	8003f6a <HAL_TIM_PWM_Start+0x9e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e097      	b.n	80040a2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <HAL_TIM_PWM_Start+0xb6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f80:	e023      	b.n	8003fca <HAL_TIM_PWM_Start+0xfe>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_PWM_Start+0xc6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f90:	e01b      	b.n	8003fca <HAL_TIM_PWM_Start+0xfe>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0xd6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa0:	e013      	b.n	8003fca <HAL_TIM_PWM_Start+0xfe>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0xe6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fb0:	e00b      	b.n	8003fca <HAL_TIM_PWM_Start+0xfe>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0xf6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fc0:	e003      	b.n	8003fca <HAL_TIM_PWM_Start+0xfe>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fd00 	bl	80049d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a33      	ldr	r2, [pc, #204]	@ (80040ac <HAL_TIM_PWM_Start+0x1e0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_TIM_PWM_Start+0x13e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a32      	ldr	r2, [pc, #200]	@ (80040b0 <HAL_TIM_PWM_Start+0x1e4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_TIM_PWM_Start+0x13e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	@ (80040b4 <HAL_TIM_PWM_Start+0x1e8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_TIM_PWM_Start+0x13e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80040b8 <HAL_TIM_PWM_Start+0x1ec>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIM_PWM_Start+0x13e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2d      	ldr	r2, [pc, #180]	@ (80040bc <HAL_TIM_PWM_Start+0x1f0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_TIM_PWM_Start+0x142>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <HAL_TIM_PWM_Start+0x144>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a20      	ldr	r2, [pc, #128]	@ (80040ac <HAL_TIM_PWM_Start+0x1e0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d018      	beq.n	8004060 <HAL_TIM_PWM_Start+0x194>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004036:	d013      	beq.n	8004060 <HAL_TIM_PWM_Start+0x194>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a20      	ldr	r2, [pc, #128]	@ (80040c0 <HAL_TIM_PWM_Start+0x1f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <HAL_TIM_PWM_Start+0x194>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1f      	ldr	r2, [pc, #124]	@ (80040c4 <HAL_TIM_PWM_Start+0x1f8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_TIM_PWM_Start+0x194>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <HAL_TIM_PWM_Start+0x1e4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_TIM_PWM_Start+0x194>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a16      	ldr	r2, [pc, #88]	@ (80040b4 <HAL_TIM_PWM_Start+0x1e8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d115      	bne.n	800408c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	4b18      	ldr	r3, [pc, #96]	@ (80040c8 <HAL_TIM_PWM_Start+0x1fc>)
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b06      	cmp	r3, #6
 8004070:	d015      	beq.n	800409e <HAL_TIM_PWM_Start+0x1d2>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004078:	d011      	beq.n	800409e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408a:	e008      	b.n	800409e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e000      	b.n	80040a0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40013400 	.word	0x40013400
 80040b4:	40014000 	.word	0x40014000
 80040b8:	40014400 	.word	0x40014400
 80040bc:	40014800 	.word	0x40014800
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	00010007 	.word	0x00010007

080040cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0ff      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b14      	cmp	r3, #20
 80040f6:	f200 80f0 	bhi.w	80042da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004155 	.word	0x08004155
 8004104:	080042db 	.word	0x080042db
 8004108:	080042db 	.word	0x080042db
 800410c:	080042db 	.word	0x080042db
 8004110:	08004195 	.word	0x08004195
 8004114:	080042db 	.word	0x080042db
 8004118:	080042db 	.word	0x080042db
 800411c:	080042db 	.word	0x080042db
 8004120:	080041d7 	.word	0x080041d7
 8004124:	080042db 	.word	0x080042db
 8004128:	080042db 	.word	0x080042db
 800412c:	080042db 	.word	0x080042db
 8004130:	08004217 	.word	0x08004217
 8004134:	080042db 	.word	0x080042db
 8004138:	080042db 	.word	0x080042db
 800413c:	080042db 	.word	0x080042db
 8004140:	08004259 	.word	0x08004259
 8004144:	080042db 	.word	0x080042db
 8004148:	080042db 	.word	0x080042db
 800414c:	080042db 	.word	0x080042db
 8004150:	08004299 	.word	0x08004299
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f966 	bl	800442c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0208 	orr.w	r2, r2, #8
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	619a      	str	r2, [r3, #24]
      break;
 8004192:	e0a5      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f9d6 	bl	800454c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6999      	ldr	r1, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	619a      	str	r2, [r3, #24]
      break;
 80041d4:	e084      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fa3f 	bl	8004660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0208 	orr.w	r2, r2, #8
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0204 	bic.w	r2, r2, #4
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	61da      	str	r2, [r3, #28]
      break;
 8004214:	e064      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 faa7 	bl	8004770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	021a      	lsls	r2, r3, #8
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	61da      	str	r2, [r3, #28]
      break;
 8004256:	e043      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 faf0 	bl	8004844 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004296:	e023      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fb34 	bl	800490c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042d8:	e002      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
      break;
 80042de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a42      	ldr	r2, [pc, #264]	@ (8004410 <TIM_Base_SetConfig+0x11c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3f      	ldr	r2, [pc, #252]	@ (8004414 <TIM_Base_SetConfig+0x120>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3e      	ldr	r2, [pc, #248]	@ (8004418 <TIM_Base_SetConfig+0x124>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x38>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3d      	ldr	r2, [pc, #244]	@ (800441c <TIM_Base_SetConfig+0x128>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a33      	ldr	r2, [pc, #204]	@ (8004410 <TIM_Base_SetConfig+0x11c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01b      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434c:	d017      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a30      	ldr	r2, [pc, #192]	@ (8004414 <TIM_Base_SetConfig+0x120>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2f      	ldr	r2, [pc, #188]	@ (8004418 <TIM_Base_SetConfig+0x124>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2e      	ldr	r2, [pc, #184]	@ (800441c <TIM_Base_SetConfig+0x128>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2d      	ldr	r2, [pc, #180]	@ (8004420 <TIM_Base_SetConfig+0x12c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2c      	ldr	r2, [pc, #176]	@ (8004424 <TIM_Base_SetConfig+0x130>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a2b      	ldr	r2, [pc, #172]	@ (8004428 <TIM_Base_SetConfig+0x134>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <TIM_Base_SetConfig+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00f      	beq.n	80043dc <TIM_Base_SetConfig+0xe8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a17      	ldr	r2, [pc, #92]	@ (800441c <TIM_Base_SetConfig+0x128>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_Base_SetConfig+0xe8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <TIM_Base_SetConfig+0x12c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_Base_SetConfig+0xe8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a15      	ldr	r2, [pc, #84]	@ (8004424 <TIM_Base_SetConfig+0x130>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_Base_SetConfig+0xe8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <TIM_Base_SetConfig+0x134>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d103      	bne.n	80043e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d105      	bne.n	8004402 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f023 0201 	bic.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	611a      	str	r2, [r3, #16]
  }
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40013400 	.word	0x40013400
 8004420:	40014000 	.word	0x40014000
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800

0800442c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f023 0201 	bic.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800445a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 0302 	bic.w	r3, r3, #2
 8004478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a2c      	ldr	r2, [pc, #176]	@ (8004538 <TIM_OC1_SetConfig+0x10c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00f      	beq.n	80044ac <TIM_OC1_SetConfig+0x80>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a2b      	ldr	r2, [pc, #172]	@ (800453c <TIM_OC1_SetConfig+0x110>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_OC1_SetConfig+0x80>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <TIM_OC1_SetConfig+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d007      	beq.n	80044ac <TIM_OC1_SetConfig+0x80>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <TIM_OC1_SetConfig+0x118>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_OC1_SetConfig+0x80>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a28      	ldr	r2, [pc, #160]	@ (8004548 <TIM_OC1_SetConfig+0x11c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d10c      	bne.n	80044c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0308 	bic.w	r3, r3, #8
 80044b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <TIM_OC1_SetConfig+0x10c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00f      	beq.n	80044ee <TIM_OC1_SetConfig+0xc2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1a      	ldr	r2, [pc, #104]	@ (800453c <TIM_OC1_SetConfig+0x110>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00b      	beq.n	80044ee <TIM_OC1_SetConfig+0xc2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a19      	ldr	r2, [pc, #100]	@ (8004540 <TIM_OC1_SetConfig+0x114>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <TIM_OC1_SetConfig+0xc2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a18      	ldr	r2, [pc, #96]	@ (8004544 <TIM_OC1_SetConfig+0x118>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_OC1_SetConfig+0xc2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a17      	ldr	r2, [pc, #92]	@ (8004548 <TIM_OC1_SetConfig+0x11c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d111      	bne.n	8004512 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	621a      	str	r2, [r3, #32]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40013400 	.word	0x40013400
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800

0800454c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f023 0210 	bic.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800457a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800457e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0320 	bic.w	r3, r3, #32
 800459a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a28      	ldr	r2, [pc, #160]	@ (800464c <TIM_OC2_SetConfig+0x100>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_OC2_SetConfig+0x6c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <TIM_OC2_SetConfig+0x104>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d10d      	bne.n	80045d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1d      	ldr	r2, [pc, #116]	@ (800464c <TIM_OC2_SetConfig+0x100>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00f      	beq.n	80045fc <TIM_OC2_SetConfig+0xb0>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a1c      	ldr	r2, [pc, #112]	@ (8004650 <TIM_OC2_SetConfig+0x104>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00b      	beq.n	80045fc <TIM_OC2_SetConfig+0xb0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004654 <TIM_OC2_SetConfig+0x108>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d007      	beq.n	80045fc <TIM_OC2_SetConfig+0xb0>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004658 <TIM_OC2_SetConfig+0x10c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_OC2_SetConfig+0xb0>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a19      	ldr	r2, [pc, #100]	@ (800465c <TIM_OC2_SetConfig+0x110>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d113      	bne.n	8004624 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004602:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800460a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a27      	ldr	r2, [pc, #156]	@ (800475c <TIM_OC3_SetConfig+0xfc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_OC3_SetConfig+0x6a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a26      	ldr	r2, [pc, #152]	@ (8004760 <TIM_OC3_SetConfig+0x100>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10d      	bne.n	80046e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1c      	ldr	r2, [pc, #112]	@ (800475c <TIM_OC3_SetConfig+0xfc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00f      	beq.n	800470e <TIM_OC3_SetConfig+0xae>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004760 <TIM_OC3_SetConfig+0x100>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <TIM_OC3_SetConfig+0xae>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004764 <TIM_OC3_SetConfig+0x104>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <TIM_OC3_SetConfig+0xae>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a19      	ldr	r2, [pc, #100]	@ (8004768 <TIM_OC3_SetConfig+0x108>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_OC3_SetConfig+0xae>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a18      	ldr	r2, [pc, #96]	@ (800476c <TIM_OC3_SetConfig+0x10c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d113      	bne.n	8004736 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	621a      	str	r2, [r3, #32]
}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40013400 	.word	0x40013400
 8004764:	40014000 	.word	0x40014000
 8004768:	40014400 	.word	0x40014400
 800476c:	40014800 	.word	0x40014800

08004770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800479e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	031b      	lsls	r3, r3, #12
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <TIM_OC4_SetConfig+0xc0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00f      	beq.n	80047f4 <TIM_OC4_SetConfig+0x84>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <TIM_OC4_SetConfig+0xc4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00b      	beq.n	80047f4 <TIM_OC4_SetConfig+0x84>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a16      	ldr	r2, [pc, #88]	@ (8004838 <TIM_OC4_SetConfig+0xc8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_OC4_SetConfig+0x84>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a15      	ldr	r2, [pc, #84]	@ (800483c <TIM_OC4_SetConfig+0xcc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_OC4_SetConfig+0x84>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a14      	ldr	r2, [pc, #80]	@ (8004840 <TIM_OC4_SetConfig+0xd0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d109      	bne.n	8004808 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40013400 	.word	0x40013400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <TIM_OC5_SetConfig+0xb4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00f      	beq.n	80048be <TIM_OC5_SetConfig+0x7a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <TIM_OC5_SetConfig+0xb8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00b      	beq.n	80048be <TIM_OC5_SetConfig+0x7a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <TIM_OC5_SetConfig+0xbc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <TIM_OC5_SetConfig+0x7a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a14      	ldr	r2, [pc, #80]	@ (8004904 <TIM_OC5_SetConfig+0xc0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_OC5_SetConfig+0x7a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a13      	ldr	r2, [pc, #76]	@ (8004908 <TIM_OC5_SetConfig+0xc4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d109      	bne.n	80048d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40013400 	.word	0x40013400
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800

0800490c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800493a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	051b      	lsls	r3, r3, #20
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <TIM_OC6_SetConfig+0xb8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00f      	beq.n	8004988 <TIM_OC6_SetConfig+0x7c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <TIM_OC6_SetConfig+0xbc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_OC6_SetConfig+0x7c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <TIM_OC6_SetConfig+0xc0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_OC6_SetConfig+0x7c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a15      	ldr	r2, [pc, #84]	@ (80049d0 <TIM_OC6_SetConfig+0xc4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_OC6_SetConfig+0x7c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <TIM_OC6_SetConfig+0xc8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d109      	bne.n	800499c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800498e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40013400 	.word	0x40013400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800

080049d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2201      	movs	r2, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1a      	ldr	r2, [r3, #32]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1a      	ldr	r2, [r3, #32]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e063      	b.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2b      	ldr	r2, [pc, #172]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d018      	beq.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aae:	d013      	beq.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a18      	ldr	r2, [pc, #96]	@ (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a17      	ldr	r2, [pc, #92]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a12      	ldr	r2, [pc, #72]	@ (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a13      	ldr	r2, [pc, #76]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10c      	bne.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ade:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40013400 	.word	0x40013400
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40014000 	.word	0x40014000

08004b24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b2c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004b30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	1d3b      	adds	r3, r7, #4
 8004b64:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <calloc>:
 8004b98:	4b02      	ldr	r3, [pc, #8]	@ (8004ba4 <calloc+0xc>)
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	f000 b802 	b.w	8004ba8 <_calloc_r>
 8004ba4:	20000088 	.word	0x20000088

08004ba8 <_calloc_r>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	fba1 5402 	umull	r5, r4, r1, r2
 8004bae:	b934      	cbnz	r4, 8004bbe <_calloc_r+0x16>
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	f000 f849 	bl	8004c48 <_malloc_r>
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	b928      	cbnz	r0, 8004bc6 <_calloc_r+0x1e>
 8004bba:	4630      	mov	r0, r6
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	6002      	str	r2, [r0, #0]
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	e7f9      	b.n	8004bba <_calloc_r+0x12>
 8004bc6:	462a      	mov	r2, r5
 8004bc8:	4621      	mov	r1, r4
 8004bca:	f000 f919 	bl	8004e00 <memset>
 8004bce:	e7f4      	b.n	8004bba <_calloc_r+0x12>

08004bd0 <exit>:
 8004bd0:	b508      	push	{r3, lr}
 8004bd2:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <exit+0x1c>)
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	b113      	cbz	r3, 8004bde <exit+0xe>
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f3af 8000 	nop.w
 8004bde:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <exit+0x20>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <exit+0x16>
 8004be4:	4798      	blx	r3
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7fc ff9a 	bl	8001b20 <_exit>
 8004bec:	00000000 	.word	0x00000000
 8004bf0:	20000650 	.word	0x20000650

08004bf4 <free>:
 8004bf4:	4b02      	ldr	r3, [pc, #8]	@ (8004c00 <free+0xc>)
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	f000 b96b 	b.w	8004ed4 <_free_r>
 8004bfe:	bf00      	nop
 8004c00:	20000088 	.word	0x20000088

08004c04 <sbrk_aligned>:
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	4e0f      	ldr	r6, [pc, #60]	@ (8004c44 <sbrk_aligned+0x40>)
 8004c08:	460c      	mov	r4, r1
 8004c0a:	6831      	ldr	r1, [r6, #0]
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	b911      	cbnz	r1, 8004c16 <sbrk_aligned+0x12>
 8004c10:	f000 f90e 	bl	8004e30 <_sbrk_r>
 8004c14:	6030      	str	r0, [r6, #0]
 8004c16:	4621      	mov	r1, r4
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f000 f909 	bl	8004e30 <_sbrk_r>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	d103      	bne.n	8004c2a <sbrk_aligned+0x26>
 8004c22:	f04f 34ff 	mov.w	r4, #4294967295
 8004c26:	4620      	mov	r0, r4
 8004c28:	bd70      	pop	{r4, r5, r6, pc}
 8004c2a:	1cc4      	adds	r4, r0, #3
 8004c2c:	f024 0403 	bic.w	r4, r4, #3
 8004c30:	42a0      	cmp	r0, r4
 8004c32:	d0f8      	beq.n	8004c26 <sbrk_aligned+0x22>
 8004c34:	1a21      	subs	r1, r4, r0
 8004c36:	4628      	mov	r0, r5
 8004c38:	f000 f8fa 	bl	8004e30 <_sbrk_r>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d1f2      	bne.n	8004c26 <sbrk_aligned+0x22>
 8004c40:	e7ef      	b.n	8004c22 <sbrk_aligned+0x1e>
 8004c42:	bf00      	nop
 8004c44:	20000510 	.word	0x20000510

08004c48 <_malloc_r>:
 8004c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c4c:	1ccd      	adds	r5, r1, #3
 8004c4e:	f025 0503 	bic.w	r5, r5, #3
 8004c52:	3508      	adds	r5, #8
 8004c54:	2d0c      	cmp	r5, #12
 8004c56:	bf38      	it	cc
 8004c58:	250c      	movcc	r5, #12
 8004c5a:	2d00      	cmp	r5, #0
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	db01      	blt.n	8004c64 <_malloc_r+0x1c>
 8004c60:	42a9      	cmp	r1, r5
 8004c62:	d904      	bls.n	8004c6e <_malloc_r+0x26>
 8004c64:	230c      	movs	r3, #12
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	2000      	movs	r0, #0
 8004c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d44 <_malloc_r+0xfc>
 8004c72:	f000 f869 	bl	8004d48 <__malloc_lock>
 8004c76:	f8d8 3000 	ldr.w	r3, [r8]
 8004c7a:	461c      	mov	r4, r3
 8004c7c:	bb44      	cbnz	r4, 8004cd0 <_malloc_r+0x88>
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff ffbf 	bl	8004c04 <sbrk_aligned>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	4604      	mov	r4, r0
 8004c8a:	d158      	bne.n	8004d3e <_malloc_r+0xf6>
 8004c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c90:	4627      	mov	r7, r4
 8004c92:	2f00      	cmp	r7, #0
 8004c94:	d143      	bne.n	8004d1e <_malloc_r+0xd6>
 8004c96:	2c00      	cmp	r4, #0
 8004c98:	d04b      	beq.n	8004d32 <_malloc_r+0xea>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	eb04 0903 	add.w	r9, r4, r3
 8004ca4:	f000 f8c4 	bl	8004e30 <_sbrk_r>
 8004ca8:	4581      	cmp	r9, r0
 8004caa:	d142      	bne.n	8004d32 <_malloc_r+0xea>
 8004cac:	6821      	ldr	r1, [r4, #0]
 8004cae:	1a6d      	subs	r5, r5, r1
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f7ff ffa6 	bl	8004c04 <sbrk_aligned>
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d03a      	beq.n	8004d32 <_malloc_r+0xea>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	442b      	add	r3, r5
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	bb62      	cbnz	r2, 8004d24 <_malloc_r+0xdc>
 8004cca:	f8c8 7000 	str.w	r7, [r8]
 8004cce:	e00f      	b.n	8004cf0 <_malloc_r+0xa8>
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	1b52      	subs	r2, r2, r5
 8004cd4:	d420      	bmi.n	8004d18 <_malloc_r+0xd0>
 8004cd6:	2a0b      	cmp	r2, #11
 8004cd8:	d917      	bls.n	8004d0a <_malloc_r+0xc2>
 8004cda:	1961      	adds	r1, r4, r5
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	6025      	str	r5, [r4, #0]
 8004ce0:	bf18      	it	ne
 8004ce2:	6059      	strne	r1, [r3, #4]
 8004ce4:	6863      	ldr	r3, [r4, #4]
 8004ce6:	bf08      	it	eq
 8004ce8:	f8c8 1000 	streq.w	r1, [r8]
 8004cec:	5162      	str	r2, [r4, r5]
 8004cee:	604b      	str	r3, [r1, #4]
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f82f 	bl	8004d54 <__malloc_unlock>
 8004cf6:	f104 000b 	add.w	r0, r4, #11
 8004cfa:	1d23      	adds	r3, r4, #4
 8004cfc:	f020 0007 	bic.w	r0, r0, #7
 8004d00:	1ac2      	subs	r2, r0, r3
 8004d02:	bf1c      	itt	ne
 8004d04:	1a1b      	subne	r3, r3, r0
 8004d06:	50a3      	strne	r3, [r4, r2]
 8004d08:	e7af      	b.n	8004c6a <_malloc_r+0x22>
 8004d0a:	6862      	ldr	r2, [r4, #4]
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	bf0c      	ite	eq
 8004d10:	f8c8 2000 	streq.w	r2, [r8]
 8004d14:	605a      	strne	r2, [r3, #4]
 8004d16:	e7eb      	b.n	8004cf0 <_malloc_r+0xa8>
 8004d18:	4623      	mov	r3, r4
 8004d1a:	6864      	ldr	r4, [r4, #4]
 8004d1c:	e7ae      	b.n	8004c7c <_malloc_r+0x34>
 8004d1e:	463c      	mov	r4, r7
 8004d20:	687f      	ldr	r7, [r7, #4]
 8004d22:	e7b6      	b.n	8004c92 <_malloc_r+0x4a>
 8004d24:	461a      	mov	r2, r3
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d1fb      	bne.n	8004d24 <_malloc_r+0xdc>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6053      	str	r3, [r2, #4]
 8004d30:	e7de      	b.n	8004cf0 <_malloc_r+0xa8>
 8004d32:	230c      	movs	r3, #12
 8004d34:	6033      	str	r3, [r6, #0]
 8004d36:	4630      	mov	r0, r6
 8004d38:	f000 f80c 	bl	8004d54 <__malloc_unlock>
 8004d3c:	e794      	b.n	8004c68 <_malloc_r+0x20>
 8004d3e:	6005      	str	r5, [r0, #0]
 8004d40:	e7d6      	b.n	8004cf0 <_malloc_r+0xa8>
 8004d42:	bf00      	nop
 8004d44:	20000514 	.word	0x20000514

08004d48 <__malloc_lock>:
 8004d48:	4801      	ldr	r0, [pc, #4]	@ (8004d50 <__malloc_lock+0x8>)
 8004d4a:	f000 b8ab 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8004d4e:	bf00      	nop
 8004d50:	20000658 	.word	0x20000658

08004d54 <__malloc_unlock>:
 8004d54:	4801      	ldr	r0, [pc, #4]	@ (8004d5c <__malloc_unlock+0x8>)
 8004d56:	f000 b8a6 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	20000658 	.word	0x20000658

08004d60 <_realloc_r>:
 8004d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	4607      	mov	r7, r0
 8004d66:	4614      	mov	r4, r2
 8004d68:	460d      	mov	r5, r1
 8004d6a:	b921      	cbnz	r1, 8004d76 <_realloc_r+0x16>
 8004d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d70:	4611      	mov	r1, r2
 8004d72:	f7ff bf69 	b.w	8004c48 <_malloc_r>
 8004d76:	b92a      	cbnz	r2, 8004d84 <_realloc_r+0x24>
 8004d78:	f000 f8ac 	bl	8004ed4 <_free_r>
 8004d7c:	4625      	mov	r5, r4
 8004d7e:	4628      	mov	r0, r5
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d84:	f000 f8f0 	bl	8004f68 <_malloc_usable_size_r>
 8004d88:	4284      	cmp	r4, r0
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	d802      	bhi.n	8004d94 <_realloc_r+0x34>
 8004d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d92:	d8f4      	bhi.n	8004d7e <_realloc_r+0x1e>
 8004d94:	4621      	mov	r1, r4
 8004d96:	4638      	mov	r0, r7
 8004d98:	f7ff ff56 	bl	8004c48 <_malloc_r>
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	b908      	cbnz	r0, 8004da4 <_realloc_r+0x44>
 8004da0:	4645      	mov	r5, r8
 8004da2:	e7ec      	b.n	8004d7e <_realloc_r+0x1e>
 8004da4:	42b4      	cmp	r4, r6
 8004da6:	4622      	mov	r2, r4
 8004da8:	4629      	mov	r1, r5
 8004daa:	bf28      	it	cs
 8004dac:	4632      	movcs	r2, r6
 8004dae:	f000 f883 	bl	8004eb8 <memcpy>
 8004db2:	4629      	mov	r1, r5
 8004db4:	4638      	mov	r0, r7
 8004db6:	f000 f88d 	bl	8004ed4 <_free_r>
 8004dba:	e7f1      	b.n	8004da0 <_realloc_r+0x40>

08004dbc <siprintf>:
 8004dbc:	b40e      	push	{r1, r2, r3}
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	b09d      	sub	sp, #116	@ 0x74
 8004dc2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004dc4:	9002      	str	r0, [sp, #8]
 8004dc6:	9006      	str	r0, [sp, #24]
 8004dc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004dcc:	480a      	ldr	r0, [pc, #40]	@ (8004df8 <siprintf+0x3c>)
 8004dce:	9107      	str	r1, [sp, #28]
 8004dd0:	9104      	str	r1, [sp, #16]
 8004dd2:	490a      	ldr	r1, [pc, #40]	@ (8004dfc <siprintf+0x40>)
 8004dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd8:	9105      	str	r1, [sp, #20]
 8004dda:	2400      	movs	r4, #0
 8004ddc:	a902      	add	r1, sp, #8
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004de4:	f000 f924 	bl	8005030 <_svfiprintf_r>
 8004de8:	9b02      	ldr	r3, [sp, #8]
 8004dea:	701c      	strb	r4, [r3, #0]
 8004dec:	b01d      	add	sp, #116	@ 0x74
 8004dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df2:	b003      	add	sp, #12
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000088 	.word	0x20000088
 8004dfc:	ffff0208 	.word	0xffff0208

08004e00 <memset>:
 8004e00:	4402      	add	r2, r0
 8004e02:	4603      	mov	r3, r0
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d100      	bne.n	8004e0a <memset+0xa>
 8004e08:	4770      	bx	lr
 8004e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0e:	e7f9      	b.n	8004e04 <memset+0x4>

08004e10 <strcat>:
 8004e10:	b510      	push	{r4, lr}
 8004e12:	4602      	mov	r2, r0
 8004e14:	7814      	ldrb	r4, [r2, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	3201      	adds	r2, #1
 8004e1a:	2c00      	cmp	r4, #0
 8004e1c:	d1fa      	bne.n	8004e14 <strcat+0x4>
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e28:	2a00      	cmp	r2, #0
 8004e2a:	d1f9      	bne.n	8004e20 <strcat+0x10>
 8004e2c:	bd10      	pop	{r4, pc}
	...

08004e30 <_sbrk_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d06      	ldr	r5, [pc, #24]	@ (8004e4c <_sbrk_r+0x1c>)
 8004e34:	2300      	movs	r3, #0
 8004e36:	4604      	mov	r4, r0
 8004e38:	4608      	mov	r0, r1
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	f7fc fe7c 	bl	8001b38 <_sbrk>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_sbrk_r+0x1a>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_sbrk_r+0x1a>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000654 	.word	0x20000654

08004e50 <__errno>:
 8004e50:	4b01      	ldr	r3, [pc, #4]	@ (8004e58 <__errno+0x8>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000088 	.word	0x20000088

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e94 <__libc_init_array+0x38>)
 8004e60:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	2600      	movs	r6, #0
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e9c <__libc_init_array+0x40>)
 8004e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e70:	f000 fb80 	bl	8005574 <_init>
 8004e74:	1b64      	subs	r4, r4, r5
 8004e76:	10a4      	asrs	r4, r4, #2
 8004e78:	2600      	movs	r6, #0
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	080056ac 	.word	0x080056ac
 8004e98:	080056ac 	.word	0x080056ac
 8004e9c:	080056ac 	.word	0x080056ac
 8004ea0:	080056b0 	.word	0x080056b0

08004ea4 <__retarget_lock_acquire_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_release_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <strcpy>:
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eae:	f803 2b01 	strb.w	r2, [r3], #1
 8004eb2:	2a00      	cmp	r2, #0
 8004eb4:	d1f9      	bne.n	8004eaa <strcpy+0x2>
 8004eb6:	4770      	bx	lr

08004eb8 <memcpy>:
 8004eb8:	440a      	add	r2, r1
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec0:	d100      	bne.n	8004ec4 <memcpy+0xc>
 8004ec2:	4770      	bx	lr
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ece:	4291      	cmp	r1, r2
 8004ed0:	d1f9      	bne.n	8004ec6 <memcpy+0xe>
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <_free_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d041      	beq.n	8004f60 <_free_r+0x8c>
 8004edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee0:	1f0c      	subs	r4, r1, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bfb8      	it	lt
 8004ee6:	18e4      	addlt	r4, r4, r3
 8004ee8:	f7ff ff2e 	bl	8004d48 <__malloc_lock>
 8004eec:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <_free_r+0x90>)
 8004eee:	6813      	ldr	r3, [r2, #0]
 8004ef0:	b933      	cbnz	r3, 8004f00 <_free_r+0x2c>
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	6014      	str	r4, [r2, #0]
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004efc:	f7ff bf2a 	b.w	8004d54 <__malloc_unlock>
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	d908      	bls.n	8004f16 <_free_r+0x42>
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	1821      	adds	r1, r4, r0
 8004f08:	428b      	cmp	r3, r1
 8004f0a:	bf01      	itttt	eq
 8004f0c:	6819      	ldreq	r1, [r3, #0]
 8004f0e:	685b      	ldreq	r3, [r3, #4]
 8004f10:	1809      	addeq	r1, r1, r0
 8004f12:	6021      	streq	r1, [r4, #0]
 8004f14:	e7ed      	b.n	8004ef2 <_free_r+0x1e>
 8004f16:	461a      	mov	r2, r3
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	b10b      	cbz	r3, 8004f20 <_free_r+0x4c>
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	d9fa      	bls.n	8004f16 <_free_r+0x42>
 8004f20:	6811      	ldr	r1, [r2, #0]
 8004f22:	1850      	adds	r0, r2, r1
 8004f24:	42a0      	cmp	r0, r4
 8004f26:	d10b      	bne.n	8004f40 <_free_r+0x6c>
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	4401      	add	r1, r0
 8004f2c:	1850      	adds	r0, r2, r1
 8004f2e:	4283      	cmp	r3, r0
 8004f30:	6011      	str	r1, [r2, #0]
 8004f32:	d1e0      	bne.n	8004ef6 <_free_r+0x22>
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	6053      	str	r3, [r2, #4]
 8004f3a:	4408      	add	r0, r1
 8004f3c:	6010      	str	r0, [r2, #0]
 8004f3e:	e7da      	b.n	8004ef6 <_free_r+0x22>
 8004f40:	d902      	bls.n	8004f48 <_free_r+0x74>
 8004f42:	230c      	movs	r3, #12
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	e7d6      	b.n	8004ef6 <_free_r+0x22>
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	1821      	adds	r1, r4, r0
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	bf04      	itt	eq
 8004f50:	6819      	ldreq	r1, [r3, #0]
 8004f52:	685b      	ldreq	r3, [r3, #4]
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	bf04      	itt	eq
 8004f58:	1809      	addeq	r1, r1, r0
 8004f5a:	6021      	streq	r1, [r4, #0]
 8004f5c:	6054      	str	r4, [r2, #4]
 8004f5e:	e7ca      	b.n	8004ef6 <_free_r+0x22>
 8004f60:	bd38      	pop	{r3, r4, r5, pc}
 8004f62:	bf00      	nop
 8004f64:	20000514 	.word	0x20000514

08004f68 <_malloc_usable_size_r>:
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f18      	subs	r0, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbc      	itt	lt
 8004f72:	580b      	ldrlt	r3, [r1, r0]
 8004f74:	18c0      	addlt	r0, r0, r3
 8004f76:	4770      	bx	lr

08004f78 <__ssputs_r>:
 8004f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	688e      	ldr	r6, [r1, #8]
 8004f7e:	461f      	mov	r7, r3
 8004f80:	42be      	cmp	r6, r7
 8004f82:	680b      	ldr	r3, [r1, #0]
 8004f84:	4682      	mov	sl, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	4690      	mov	r8, r2
 8004f8a:	d82d      	bhi.n	8004fe8 <__ssputs_r+0x70>
 8004f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f94:	d026      	beq.n	8004fe4 <__ssputs_r+0x6c>
 8004f96:	6965      	ldr	r5, [r4, #20]
 8004f98:	6909      	ldr	r1, [r1, #16]
 8004f9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f9e:	eba3 0901 	sub.w	r9, r3, r1
 8004fa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fa6:	1c7b      	adds	r3, r7, #1
 8004fa8:	444b      	add	r3, r9
 8004faa:	106d      	asrs	r5, r5, #1
 8004fac:	429d      	cmp	r5, r3
 8004fae:	bf38      	it	cc
 8004fb0:	461d      	movcc	r5, r3
 8004fb2:	0553      	lsls	r3, r2, #21
 8004fb4:	d527      	bpl.n	8005006 <__ssputs_r+0x8e>
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f7ff fe46 	bl	8004c48 <_malloc_r>
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	b360      	cbz	r0, 800501a <__ssputs_r+0xa2>
 8004fc0:	6921      	ldr	r1, [r4, #16]
 8004fc2:	464a      	mov	r2, r9
 8004fc4:	f7ff ff78 	bl	8004eb8 <memcpy>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	6126      	str	r6, [r4, #16]
 8004fd6:	6165      	str	r5, [r4, #20]
 8004fd8:	444e      	add	r6, r9
 8004fda:	eba5 0509 	sub.w	r5, r5, r9
 8004fde:	6026      	str	r6, [r4, #0]
 8004fe0:	60a5      	str	r5, [r4, #8]
 8004fe2:	463e      	mov	r6, r7
 8004fe4:	42be      	cmp	r6, r7
 8004fe6:	d900      	bls.n	8004fea <__ssputs_r+0x72>
 8004fe8:	463e      	mov	r6, r7
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	4632      	mov	r2, r6
 8004fee:	4641      	mov	r1, r8
 8004ff0:	f000 faa6 	bl	8005540 <memmove>
 8004ff4:	68a3      	ldr	r3, [r4, #8]
 8004ff6:	1b9b      	subs	r3, r3, r6
 8004ff8:	60a3      	str	r3, [r4, #8]
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	4433      	add	r3, r6
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	2000      	movs	r0, #0
 8005002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005006:	462a      	mov	r2, r5
 8005008:	f7ff feaa 	bl	8004d60 <_realloc_r>
 800500c:	4606      	mov	r6, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d1e0      	bne.n	8004fd4 <__ssputs_r+0x5c>
 8005012:	6921      	ldr	r1, [r4, #16]
 8005014:	4650      	mov	r0, sl
 8005016:	f7ff ff5d 	bl	8004ed4 <_free_r>
 800501a:	230c      	movs	r3, #12
 800501c:	f8ca 3000 	str.w	r3, [sl]
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005026:	81a3      	strh	r3, [r4, #12]
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	e7e9      	b.n	8005002 <__ssputs_r+0x8a>
	...

08005030 <_svfiprintf_r>:
 8005030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005034:	4698      	mov	r8, r3
 8005036:	898b      	ldrh	r3, [r1, #12]
 8005038:	061b      	lsls	r3, r3, #24
 800503a:	b09d      	sub	sp, #116	@ 0x74
 800503c:	4607      	mov	r7, r0
 800503e:	460d      	mov	r5, r1
 8005040:	4614      	mov	r4, r2
 8005042:	d510      	bpl.n	8005066 <_svfiprintf_r+0x36>
 8005044:	690b      	ldr	r3, [r1, #16]
 8005046:	b973      	cbnz	r3, 8005066 <_svfiprintf_r+0x36>
 8005048:	2140      	movs	r1, #64	@ 0x40
 800504a:	f7ff fdfd 	bl	8004c48 <_malloc_r>
 800504e:	6028      	str	r0, [r5, #0]
 8005050:	6128      	str	r0, [r5, #16]
 8005052:	b930      	cbnz	r0, 8005062 <_svfiprintf_r+0x32>
 8005054:	230c      	movs	r3, #12
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	b01d      	add	sp, #116	@ 0x74
 800505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005062:	2340      	movs	r3, #64	@ 0x40
 8005064:	616b      	str	r3, [r5, #20]
 8005066:	2300      	movs	r3, #0
 8005068:	9309      	str	r3, [sp, #36]	@ 0x24
 800506a:	2320      	movs	r3, #32
 800506c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005070:	f8cd 800c 	str.w	r8, [sp, #12]
 8005074:	2330      	movs	r3, #48	@ 0x30
 8005076:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005214 <_svfiprintf_r+0x1e4>
 800507a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800507e:	f04f 0901 	mov.w	r9, #1
 8005082:	4623      	mov	r3, r4
 8005084:	469a      	mov	sl, r3
 8005086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800508a:	b10a      	cbz	r2, 8005090 <_svfiprintf_r+0x60>
 800508c:	2a25      	cmp	r2, #37	@ 0x25
 800508e:	d1f9      	bne.n	8005084 <_svfiprintf_r+0x54>
 8005090:	ebba 0b04 	subs.w	fp, sl, r4
 8005094:	d00b      	beq.n	80050ae <_svfiprintf_r+0x7e>
 8005096:	465b      	mov	r3, fp
 8005098:	4622      	mov	r2, r4
 800509a:	4629      	mov	r1, r5
 800509c:	4638      	mov	r0, r7
 800509e:	f7ff ff6b 	bl	8004f78 <__ssputs_r>
 80050a2:	3001      	adds	r0, #1
 80050a4:	f000 80a7 	beq.w	80051f6 <_svfiprintf_r+0x1c6>
 80050a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050aa:	445a      	add	r2, fp
 80050ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80050ae:	f89a 3000 	ldrb.w	r3, [sl]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 809f 	beq.w	80051f6 <_svfiprintf_r+0x1c6>
 80050b8:	2300      	movs	r3, #0
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c2:	f10a 0a01 	add.w	sl, sl, #1
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	9307      	str	r3, [sp, #28]
 80050ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80050d0:	4654      	mov	r4, sl
 80050d2:	2205      	movs	r2, #5
 80050d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d8:	484e      	ldr	r0, [pc, #312]	@ (8005214 <_svfiprintf_r+0x1e4>)
 80050da:	f7fb f881 	bl	80001e0 <memchr>
 80050de:	9a04      	ldr	r2, [sp, #16]
 80050e0:	b9d8      	cbnz	r0, 800511a <_svfiprintf_r+0xea>
 80050e2:	06d0      	lsls	r0, r2, #27
 80050e4:	bf44      	itt	mi
 80050e6:	2320      	movmi	r3, #32
 80050e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ec:	0711      	lsls	r1, r2, #28
 80050ee:	bf44      	itt	mi
 80050f0:	232b      	movmi	r3, #43	@ 0x2b
 80050f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f6:	f89a 3000 	ldrb.w	r3, [sl]
 80050fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80050fc:	d015      	beq.n	800512a <_svfiprintf_r+0xfa>
 80050fe:	9a07      	ldr	r2, [sp, #28]
 8005100:	4654      	mov	r4, sl
 8005102:	2000      	movs	r0, #0
 8005104:	f04f 0c0a 	mov.w	ip, #10
 8005108:	4621      	mov	r1, r4
 800510a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800510e:	3b30      	subs	r3, #48	@ 0x30
 8005110:	2b09      	cmp	r3, #9
 8005112:	d94b      	bls.n	80051ac <_svfiprintf_r+0x17c>
 8005114:	b1b0      	cbz	r0, 8005144 <_svfiprintf_r+0x114>
 8005116:	9207      	str	r2, [sp, #28]
 8005118:	e014      	b.n	8005144 <_svfiprintf_r+0x114>
 800511a:	eba0 0308 	sub.w	r3, r0, r8
 800511e:	fa09 f303 	lsl.w	r3, r9, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	9304      	str	r3, [sp, #16]
 8005126:	46a2      	mov	sl, r4
 8005128:	e7d2      	b.n	80050d0 <_svfiprintf_r+0xa0>
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	1d19      	adds	r1, r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	9103      	str	r1, [sp, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfbb      	ittet	lt
 8005136:	425b      	neglt	r3, r3
 8005138:	f042 0202 	orrlt.w	r2, r2, #2
 800513c:	9307      	strge	r3, [sp, #28]
 800513e:	9307      	strlt	r3, [sp, #28]
 8005140:	bfb8      	it	lt
 8005142:	9204      	strlt	r2, [sp, #16]
 8005144:	7823      	ldrb	r3, [r4, #0]
 8005146:	2b2e      	cmp	r3, #46	@ 0x2e
 8005148:	d10a      	bne.n	8005160 <_svfiprintf_r+0x130>
 800514a:	7863      	ldrb	r3, [r4, #1]
 800514c:	2b2a      	cmp	r3, #42	@ 0x2a
 800514e:	d132      	bne.n	80051b6 <_svfiprintf_r+0x186>
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	9203      	str	r2, [sp, #12]
 8005158:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800515c:	3402      	adds	r4, #2
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005224 <_svfiprintf_r+0x1f4>
 8005164:	7821      	ldrb	r1, [r4, #0]
 8005166:	2203      	movs	r2, #3
 8005168:	4650      	mov	r0, sl
 800516a:	f7fb f839 	bl	80001e0 <memchr>
 800516e:	b138      	cbz	r0, 8005180 <_svfiprintf_r+0x150>
 8005170:	9b04      	ldr	r3, [sp, #16]
 8005172:	eba0 000a 	sub.w	r0, r0, sl
 8005176:	2240      	movs	r2, #64	@ 0x40
 8005178:	4082      	lsls	r2, r0
 800517a:	4313      	orrs	r3, r2
 800517c:	3401      	adds	r4, #1
 800517e:	9304      	str	r3, [sp, #16]
 8005180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005184:	4824      	ldr	r0, [pc, #144]	@ (8005218 <_svfiprintf_r+0x1e8>)
 8005186:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800518a:	2206      	movs	r2, #6
 800518c:	f7fb f828 	bl	80001e0 <memchr>
 8005190:	2800      	cmp	r0, #0
 8005192:	d036      	beq.n	8005202 <_svfiprintf_r+0x1d2>
 8005194:	4b21      	ldr	r3, [pc, #132]	@ (800521c <_svfiprintf_r+0x1ec>)
 8005196:	bb1b      	cbnz	r3, 80051e0 <_svfiprintf_r+0x1b0>
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	3307      	adds	r3, #7
 800519c:	f023 0307 	bic.w	r3, r3, #7
 80051a0:	3308      	adds	r3, #8
 80051a2:	9303      	str	r3, [sp, #12]
 80051a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a6:	4433      	add	r3, r6
 80051a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051aa:	e76a      	b.n	8005082 <_svfiprintf_r+0x52>
 80051ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80051b0:	460c      	mov	r4, r1
 80051b2:	2001      	movs	r0, #1
 80051b4:	e7a8      	b.n	8005108 <_svfiprintf_r+0xd8>
 80051b6:	2300      	movs	r3, #0
 80051b8:	3401      	adds	r4, #1
 80051ba:	9305      	str	r3, [sp, #20]
 80051bc:	4619      	mov	r1, r3
 80051be:	f04f 0c0a 	mov.w	ip, #10
 80051c2:	4620      	mov	r0, r4
 80051c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c8:	3a30      	subs	r2, #48	@ 0x30
 80051ca:	2a09      	cmp	r2, #9
 80051cc:	d903      	bls.n	80051d6 <_svfiprintf_r+0x1a6>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0c6      	beq.n	8005160 <_svfiprintf_r+0x130>
 80051d2:	9105      	str	r1, [sp, #20]
 80051d4:	e7c4      	b.n	8005160 <_svfiprintf_r+0x130>
 80051d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80051da:	4604      	mov	r4, r0
 80051dc:	2301      	movs	r3, #1
 80051de:	e7f0      	b.n	80051c2 <_svfiprintf_r+0x192>
 80051e0:	ab03      	add	r3, sp, #12
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	462a      	mov	r2, r5
 80051e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005220 <_svfiprintf_r+0x1f0>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	4638      	mov	r0, r7
 80051ec:	f3af 8000 	nop.w
 80051f0:	1c42      	adds	r2, r0, #1
 80051f2:	4606      	mov	r6, r0
 80051f4:	d1d6      	bne.n	80051a4 <_svfiprintf_r+0x174>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	065b      	lsls	r3, r3, #25
 80051fa:	f53f af2d 	bmi.w	8005058 <_svfiprintf_r+0x28>
 80051fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005200:	e72c      	b.n	800505c <_svfiprintf_r+0x2c>
 8005202:	ab03      	add	r3, sp, #12
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	462a      	mov	r2, r5
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <_svfiprintf_r+0x1f0>)
 800520a:	a904      	add	r1, sp, #16
 800520c:	4638      	mov	r0, r7
 800520e:	f000 f879 	bl	8005304 <_printf_i>
 8005212:	e7ed      	b.n	80051f0 <_svfiprintf_r+0x1c0>
 8005214:	08005670 	.word	0x08005670
 8005218:	0800567a 	.word	0x0800567a
 800521c:	00000000 	.word	0x00000000
 8005220:	08004f79 	.word	0x08004f79
 8005224:	08005676 	.word	0x08005676

08005228 <_printf_common>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	4616      	mov	r6, r2
 800522e:	4698      	mov	r8, r3
 8005230:	688a      	ldr	r2, [r1, #8]
 8005232:	690b      	ldr	r3, [r1, #16]
 8005234:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005238:	4293      	cmp	r3, r2
 800523a:	bfb8      	it	lt
 800523c:	4613      	movlt	r3, r2
 800523e:	6033      	str	r3, [r6, #0]
 8005240:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005244:	4607      	mov	r7, r0
 8005246:	460c      	mov	r4, r1
 8005248:	b10a      	cbz	r2, 800524e <_printf_common+0x26>
 800524a:	3301      	adds	r3, #1
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	0699      	lsls	r1, r3, #26
 8005252:	bf42      	ittt	mi
 8005254:	6833      	ldrmi	r3, [r6, #0]
 8005256:	3302      	addmi	r3, #2
 8005258:	6033      	strmi	r3, [r6, #0]
 800525a:	6825      	ldr	r5, [r4, #0]
 800525c:	f015 0506 	ands.w	r5, r5, #6
 8005260:	d106      	bne.n	8005270 <_printf_common+0x48>
 8005262:	f104 0a19 	add.w	sl, r4, #25
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	6832      	ldr	r2, [r6, #0]
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	42ab      	cmp	r3, r5
 800526e:	dc26      	bgt.n	80052be <_printf_common+0x96>
 8005270:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	3b00      	subs	r3, #0
 8005278:	bf18      	it	ne
 800527a:	2301      	movne	r3, #1
 800527c:	0692      	lsls	r2, r2, #26
 800527e:	d42b      	bmi.n	80052d8 <_printf_common+0xb0>
 8005280:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005284:	4641      	mov	r1, r8
 8005286:	4638      	mov	r0, r7
 8005288:	47c8      	blx	r9
 800528a:	3001      	adds	r0, #1
 800528c:	d01e      	beq.n	80052cc <_printf_common+0xa4>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	6922      	ldr	r2, [r4, #16]
 8005292:	f003 0306 	and.w	r3, r3, #6
 8005296:	2b04      	cmp	r3, #4
 8005298:	bf02      	ittt	eq
 800529a:	68e5      	ldreq	r5, [r4, #12]
 800529c:	6833      	ldreq	r3, [r6, #0]
 800529e:	1aed      	subeq	r5, r5, r3
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	bf0c      	ite	eq
 80052a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052a8:	2500      	movne	r5, #0
 80052aa:	4293      	cmp	r3, r2
 80052ac:	bfc4      	itt	gt
 80052ae:	1a9b      	subgt	r3, r3, r2
 80052b0:	18ed      	addgt	r5, r5, r3
 80052b2:	2600      	movs	r6, #0
 80052b4:	341a      	adds	r4, #26
 80052b6:	42b5      	cmp	r5, r6
 80052b8:	d11a      	bne.n	80052f0 <_printf_common+0xc8>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e008      	b.n	80052d0 <_printf_common+0xa8>
 80052be:	2301      	movs	r3, #1
 80052c0:	4652      	mov	r2, sl
 80052c2:	4641      	mov	r1, r8
 80052c4:	4638      	mov	r0, r7
 80052c6:	47c8      	blx	r9
 80052c8:	3001      	adds	r0, #1
 80052ca:	d103      	bne.n	80052d4 <_printf_common+0xac>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	3501      	adds	r5, #1
 80052d6:	e7c6      	b.n	8005266 <_printf_common+0x3e>
 80052d8:	18e1      	adds	r1, r4, r3
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	2030      	movs	r0, #48	@ 0x30
 80052de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052e2:	4422      	add	r2, r4
 80052e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052ec:	3302      	adds	r3, #2
 80052ee:	e7c7      	b.n	8005280 <_printf_common+0x58>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4622      	mov	r2, r4
 80052f4:	4641      	mov	r1, r8
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c8      	blx	r9
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0e6      	beq.n	80052cc <_printf_common+0xa4>
 80052fe:	3601      	adds	r6, #1
 8005300:	e7d9      	b.n	80052b6 <_printf_common+0x8e>
	...

08005304 <_printf_i>:
 8005304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	7e0f      	ldrb	r7, [r1, #24]
 800530a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800530c:	2f78      	cmp	r7, #120	@ 0x78
 800530e:	4691      	mov	r9, r2
 8005310:	4680      	mov	r8, r0
 8005312:	460c      	mov	r4, r1
 8005314:	469a      	mov	sl, r3
 8005316:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800531a:	d807      	bhi.n	800532c <_printf_i+0x28>
 800531c:	2f62      	cmp	r7, #98	@ 0x62
 800531e:	d80a      	bhi.n	8005336 <_printf_i+0x32>
 8005320:	2f00      	cmp	r7, #0
 8005322:	f000 80d1 	beq.w	80054c8 <_printf_i+0x1c4>
 8005326:	2f58      	cmp	r7, #88	@ 0x58
 8005328:	f000 80b8 	beq.w	800549c <_printf_i+0x198>
 800532c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005330:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005334:	e03a      	b.n	80053ac <_printf_i+0xa8>
 8005336:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800533a:	2b15      	cmp	r3, #21
 800533c:	d8f6      	bhi.n	800532c <_printf_i+0x28>
 800533e:	a101      	add	r1, pc, #4	@ (adr r1, 8005344 <_printf_i+0x40>)
 8005340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053b1 	.word	0x080053b1
 800534c:	0800532d 	.word	0x0800532d
 8005350:	0800532d 	.word	0x0800532d
 8005354:	0800532d 	.word	0x0800532d
 8005358:	0800532d 	.word	0x0800532d
 800535c:	080053b1 	.word	0x080053b1
 8005360:	0800532d 	.word	0x0800532d
 8005364:	0800532d 	.word	0x0800532d
 8005368:	0800532d 	.word	0x0800532d
 800536c:	0800532d 	.word	0x0800532d
 8005370:	080054af 	.word	0x080054af
 8005374:	080053db 	.word	0x080053db
 8005378:	08005469 	.word	0x08005469
 800537c:	0800532d 	.word	0x0800532d
 8005380:	0800532d 	.word	0x0800532d
 8005384:	080054d1 	.word	0x080054d1
 8005388:	0800532d 	.word	0x0800532d
 800538c:	080053db 	.word	0x080053db
 8005390:	0800532d 	.word	0x0800532d
 8005394:	0800532d 	.word	0x0800532d
 8005398:	08005471 	.word	0x08005471
 800539c:	6833      	ldr	r3, [r6, #0]
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6032      	str	r2, [r6, #0]
 80053a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053ac:	2301      	movs	r3, #1
 80053ae:	e09c      	b.n	80054ea <_printf_i+0x1e6>
 80053b0:	6833      	ldr	r3, [r6, #0]
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	1d19      	adds	r1, r3, #4
 80053b6:	6031      	str	r1, [r6, #0]
 80053b8:	0606      	lsls	r6, r0, #24
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0xbc>
 80053bc:	681d      	ldr	r5, [r3, #0]
 80053be:	e003      	b.n	80053c8 <_printf_i+0xc4>
 80053c0:	0645      	lsls	r5, r0, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0xb8>
 80053c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	da03      	bge.n	80053d4 <_printf_i+0xd0>
 80053cc:	232d      	movs	r3, #45	@ 0x2d
 80053ce:	426d      	negs	r5, r5
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d4:	4858      	ldr	r0, [pc, #352]	@ (8005538 <_printf_i+0x234>)
 80053d6:	230a      	movs	r3, #10
 80053d8:	e011      	b.n	80053fe <_printf_i+0xfa>
 80053da:	6821      	ldr	r1, [r4, #0]
 80053dc:	6833      	ldr	r3, [r6, #0]
 80053de:	0608      	lsls	r0, r1, #24
 80053e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80053e4:	d402      	bmi.n	80053ec <_printf_i+0xe8>
 80053e6:	0649      	lsls	r1, r1, #25
 80053e8:	bf48      	it	mi
 80053ea:	b2ad      	uxthmi	r5, r5
 80053ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80053ee:	4852      	ldr	r0, [pc, #328]	@ (8005538 <_printf_i+0x234>)
 80053f0:	6033      	str	r3, [r6, #0]
 80053f2:	bf14      	ite	ne
 80053f4:	230a      	movne	r3, #10
 80053f6:	2308      	moveq	r3, #8
 80053f8:	2100      	movs	r1, #0
 80053fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053fe:	6866      	ldr	r6, [r4, #4]
 8005400:	60a6      	str	r6, [r4, #8]
 8005402:	2e00      	cmp	r6, #0
 8005404:	db05      	blt.n	8005412 <_printf_i+0x10e>
 8005406:	6821      	ldr	r1, [r4, #0]
 8005408:	432e      	orrs	r6, r5
 800540a:	f021 0104 	bic.w	r1, r1, #4
 800540e:	6021      	str	r1, [r4, #0]
 8005410:	d04b      	beq.n	80054aa <_printf_i+0x1a6>
 8005412:	4616      	mov	r6, r2
 8005414:	fbb5 f1f3 	udiv	r1, r5, r3
 8005418:	fb03 5711 	mls	r7, r3, r1, r5
 800541c:	5dc7      	ldrb	r7, [r0, r7]
 800541e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005422:	462f      	mov	r7, r5
 8005424:	42bb      	cmp	r3, r7
 8005426:	460d      	mov	r5, r1
 8005428:	d9f4      	bls.n	8005414 <_printf_i+0x110>
 800542a:	2b08      	cmp	r3, #8
 800542c:	d10b      	bne.n	8005446 <_printf_i+0x142>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	07df      	lsls	r7, r3, #31
 8005432:	d508      	bpl.n	8005446 <_printf_i+0x142>
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	6861      	ldr	r1, [r4, #4]
 8005438:	4299      	cmp	r1, r3
 800543a:	bfde      	ittt	le
 800543c:	2330      	movle	r3, #48	@ 0x30
 800543e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005442:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005446:	1b92      	subs	r2, r2, r6
 8005448:	6122      	str	r2, [r4, #16]
 800544a:	f8cd a000 	str.w	sl, [sp]
 800544e:	464b      	mov	r3, r9
 8005450:	aa03      	add	r2, sp, #12
 8005452:	4621      	mov	r1, r4
 8005454:	4640      	mov	r0, r8
 8005456:	f7ff fee7 	bl	8005228 <_printf_common>
 800545a:	3001      	adds	r0, #1
 800545c:	d14a      	bne.n	80054f4 <_printf_i+0x1f0>
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	b004      	add	sp, #16
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	f043 0320 	orr.w	r3, r3, #32
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	4832      	ldr	r0, [pc, #200]	@ (800553c <_printf_i+0x238>)
 8005472:	2778      	movs	r7, #120	@ 0x78
 8005474:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	6831      	ldr	r1, [r6, #0]
 800547c:	061f      	lsls	r7, r3, #24
 800547e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005482:	d402      	bmi.n	800548a <_printf_i+0x186>
 8005484:	065f      	lsls	r7, r3, #25
 8005486:	bf48      	it	mi
 8005488:	b2ad      	uxthmi	r5, r5
 800548a:	6031      	str	r1, [r6, #0]
 800548c:	07d9      	lsls	r1, r3, #31
 800548e:	bf44      	itt	mi
 8005490:	f043 0320 	orrmi.w	r3, r3, #32
 8005494:	6023      	strmi	r3, [r4, #0]
 8005496:	b11d      	cbz	r5, 80054a0 <_printf_i+0x19c>
 8005498:	2310      	movs	r3, #16
 800549a:	e7ad      	b.n	80053f8 <_printf_i+0xf4>
 800549c:	4826      	ldr	r0, [pc, #152]	@ (8005538 <_printf_i+0x234>)
 800549e:	e7e9      	b.n	8005474 <_printf_i+0x170>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f023 0320 	bic.w	r3, r3, #32
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	e7f6      	b.n	8005498 <_printf_i+0x194>
 80054aa:	4616      	mov	r6, r2
 80054ac:	e7bd      	b.n	800542a <_printf_i+0x126>
 80054ae:	6833      	ldr	r3, [r6, #0]
 80054b0:	6825      	ldr	r5, [r4, #0]
 80054b2:	6961      	ldr	r1, [r4, #20]
 80054b4:	1d18      	adds	r0, r3, #4
 80054b6:	6030      	str	r0, [r6, #0]
 80054b8:	062e      	lsls	r6, r5, #24
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	d501      	bpl.n	80054c2 <_printf_i+0x1be>
 80054be:	6019      	str	r1, [r3, #0]
 80054c0:	e002      	b.n	80054c8 <_printf_i+0x1c4>
 80054c2:	0668      	lsls	r0, r5, #25
 80054c4:	d5fb      	bpl.n	80054be <_printf_i+0x1ba>
 80054c6:	8019      	strh	r1, [r3, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	4616      	mov	r6, r2
 80054ce:	e7bc      	b.n	800544a <_printf_i+0x146>
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	6032      	str	r2, [r6, #0]
 80054d6:	681e      	ldr	r6, [r3, #0]
 80054d8:	6862      	ldr	r2, [r4, #4]
 80054da:	2100      	movs	r1, #0
 80054dc:	4630      	mov	r0, r6
 80054de:	f7fa fe7f 	bl	80001e0 <memchr>
 80054e2:	b108      	cbz	r0, 80054e8 <_printf_i+0x1e4>
 80054e4:	1b80      	subs	r0, r0, r6
 80054e6:	6060      	str	r0, [r4, #4]
 80054e8:	6863      	ldr	r3, [r4, #4]
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	2300      	movs	r3, #0
 80054ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f2:	e7aa      	b.n	800544a <_printf_i+0x146>
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4649      	mov	r1, r9
 80054fa:	4640      	mov	r0, r8
 80054fc:	47d0      	blx	sl
 80054fe:	3001      	adds	r0, #1
 8005500:	d0ad      	beq.n	800545e <_printf_i+0x15a>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	079b      	lsls	r3, r3, #30
 8005506:	d413      	bmi.n	8005530 <_printf_i+0x22c>
 8005508:	68e0      	ldr	r0, [r4, #12]
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	4298      	cmp	r0, r3
 800550e:	bfb8      	it	lt
 8005510:	4618      	movlt	r0, r3
 8005512:	e7a6      	b.n	8005462 <_printf_i+0x15e>
 8005514:	2301      	movs	r3, #1
 8005516:	4632      	mov	r2, r6
 8005518:	4649      	mov	r1, r9
 800551a:	4640      	mov	r0, r8
 800551c:	47d0      	blx	sl
 800551e:	3001      	adds	r0, #1
 8005520:	d09d      	beq.n	800545e <_printf_i+0x15a>
 8005522:	3501      	adds	r5, #1
 8005524:	68e3      	ldr	r3, [r4, #12]
 8005526:	9903      	ldr	r1, [sp, #12]
 8005528:	1a5b      	subs	r3, r3, r1
 800552a:	42ab      	cmp	r3, r5
 800552c:	dcf2      	bgt.n	8005514 <_printf_i+0x210>
 800552e:	e7eb      	b.n	8005508 <_printf_i+0x204>
 8005530:	2500      	movs	r5, #0
 8005532:	f104 0619 	add.w	r6, r4, #25
 8005536:	e7f5      	b.n	8005524 <_printf_i+0x220>
 8005538:	08005681 	.word	0x08005681
 800553c:	08005692 	.word	0x08005692

08005540 <memmove>:
 8005540:	4288      	cmp	r0, r1
 8005542:	b510      	push	{r4, lr}
 8005544:	eb01 0402 	add.w	r4, r1, r2
 8005548:	d902      	bls.n	8005550 <memmove+0x10>
 800554a:	4284      	cmp	r4, r0
 800554c:	4623      	mov	r3, r4
 800554e:	d807      	bhi.n	8005560 <memmove+0x20>
 8005550:	1e43      	subs	r3, r0, #1
 8005552:	42a1      	cmp	r1, r4
 8005554:	d008      	beq.n	8005568 <memmove+0x28>
 8005556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0x12>
 8005560:	4402      	add	r2, r0
 8005562:	4601      	mov	r1, r0
 8005564:	428a      	cmp	r2, r1
 8005566:	d100      	bne.n	800556a <memmove+0x2a>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800556e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005572:	e7f7      	b.n	8005564 <memmove+0x24>

08005574 <_init>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr

08005580 <_fini>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr
