
finalMTRX2700.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005028  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052dc  080052dc  000070d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e4  080052e4  000070d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e4  080052e4  000062e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052e8  080052e8  000062e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  080052ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070d8  2**0
                  CONTENTS
 10 .bss          00000580  200000d8  200000d8  000070d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000658  20000658  000070d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f69  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec1  00000000  00000000  0001b071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  0001df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8e  00000000  00000000  0001f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002070b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e3f  00000000  00000000  000407a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb1ce  00000000  00000000  000595e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001147b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000553c  00000000  00000000  001147fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00119d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051a0 	.word	0x080051a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	080051a0 	.word	0x080051a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <finishedTransmissionCallback>:
#include "main.h"



// Create delay after finishing transmission
void finishedTransmissionCallback(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    TIM2->CCR1 = 0; // Red on 0
 8000284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000288:	2200      	movs	r2, #0
 800028a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR3 = 0; // Green on full
 800028c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000290:	2200      	movs	r2, #0
 8000292:	63da      	str	r2, [r3, #60]	@ 0x3c

    delayMiliSec(100); // 100 ms delay
 8000294:	2064      	movs	r0, #100	@ 0x64
 8000296:	f001 fa31 	bl	80016fc <delayMiliSec>

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <EXTI0Callback>:

uint8_t EXTI0Callback(uint8_t messageSent) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	if (GPIOA->IDR & 0x01) {
 80002aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d022      	beq.n	80002fe <EXTI0Callback+0x5e>

		// RISING edge - button pressed
		TIM3->CNT = 0; // Reset count
 80002b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000368 <EXTI0Callback+0xc8>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM3->CR1 |= TIM_CR1_CEN; // Start timer
 80002be:	4b2a      	ldr	r3, [pc, #168]	@ (8000368 <EXTI0Callback+0xc8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a29      	ldr	r2, [pc, #164]	@ (8000368 <EXTI0Callback+0xc8>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6013      	str	r3, [r2, #0]

        // Debouncing by disabling interrupts, running delay and re-enabling
        EXTI->IMR &= ~EXTI_IMR_MR0; // Disable EXTI0 interrupt
 80002ca:	4b28      	ldr	r3, [pc, #160]	@ (800036c <EXTI0Callback+0xcc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a27      	ldr	r2, [pc, #156]	@ (800036c <EXTI0Callback+0xcc>)
 80002d0:	f023 0301 	bic.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]

        // Debounce delay
        while (TIM3->CNT < 20) {}
 80002d6:	bf00      	nop
 80002d8:	4b23      	ldr	r3, [pc, #140]	@ (8000368 <EXTI0Callback+0xc8>)
 80002da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002dc:	2b13      	cmp	r3, #19
 80002de:	d9fb      	bls.n	80002d8 <EXTI0Callback+0x38>

        // Clear any spurious pending bit again
        EXTI->PR |= EXTI_PR_PR0;
 80002e0:	4b22      	ldr	r3, [pc, #136]	@ (800036c <EXTI0Callback+0xcc>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a21      	ldr	r2, [pc, #132]	@ (800036c <EXTI0Callback+0xcc>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]

        EXTI->IMR |= EXTI_IMR_MR0;  // Re-enable EXTI0 interrupt
 80002ec:	4b1f      	ldr	r3, [pc, #124]	@ (800036c <EXTI0Callback+0xcc>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1e      	ldr	r2, [pc, #120]	@ (800036c <EXTI0Callback+0xcc>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6013      	str	r3, [r2, #0]

        messageSent = 0; // Reset message as unsent
 80002f8:	2300      	movs	r3, #0
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	e02e      	b.n	800035c <EXTI0Callback+0xbc>

    } else {
        // FALLING edge - button released
        TIM3->CR1 &= ~TIM_CR1_CEN; // Stop timer
 80002fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <EXTI0Callback+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a19      	ldr	r2, [pc, #100]	@ (8000368 <EXTI0Callback+0xc8>)
 8000304:	f023 0301 	bic.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
        uint16_t duration = TIM3->CNT; // Record the counter value to determine if dot or dash
 800030a:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <EXTI0Callback+0xc8>)
 800030c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800030e:	81fb      	strh	r3, [r7, #14]

        if (duration < 250 && messageSent == 0) {
 8000310:	89fb      	ldrh	r3, [r7, #14]
 8000312:	2bf9      	cmp	r3, #249	@ 0xf9
 8000314:	d811      	bhi.n	800033a <EXTI0Callback+0x9a>
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d10e      	bne.n	800033a <EXTI0Callback+0x9a>
            // Dot
            assignMorse(0); // Assign a 0 to the struct for a dot
 800031c:	2000      	movs	r0, #0
 800031e:	f001 f913 	bl	8001548 <assignMorse>

            messageSent = 1; // Set value of message as sent
 8000322:	2301      	movs	r3, #1
 8000324:	71fb      	strb	r3, [r7, #7]

            TIM2->CCR1 = 10000; // Red on full
 8000326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800032a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800032e:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM2->CCR3 = 0; // Green on 0
 8000330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000334:	2200      	movs	r2, #0
 8000336:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000338:	e010      	b.n	800035c <EXTI0Callback+0xbc>

        } else if (messageSent == 0) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d10d      	bne.n	800035c <EXTI0Callback+0xbc>
            // Dash
            assignMorse(1); // Assign a 1 to the struct for a dash
 8000340:	2001      	movs	r0, #1
 8000342:	f001 f901 	bl	8001548 <assignMorse>

            messageSent = 1; // Set value of message as sent
 8000346:	2301      	movs	r3, #1
 8000348:	71fb      	strb	r3, [r7, #7]


            TIM2->CCR1 = 0; // Red on 0
 800034a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034e:	2200      	movs	r2, #0
 8000350:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM2->CCR3 = 10000; // Green on full
 8000352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800035a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
    }

	return messageSent; // Return for use in interrupt file
 800035c:	79fb      	ldrb	r3, [r7, #7]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40000400 	.word	0x40000400
 800036c:	40010400 	.word	0x40010400

08000370 <TIM3Callback>:


uint8_t TIM3Callback(uint8_t messageSent) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
	TIM3->CR1 &= ~TIM_CR1_CEN;  // Clear the CEN bit to stop the timer (prevent regular interval interrupts)
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <TIM3Callback+0x3c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0b      	ldr	r2, [pc, #44]	@ (80003ac <TIM3Callback+0x3c>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]

	assignMorse(1); // Assign a 1 to the struct for a dash
 8000386:	2001      	movs	r0, #1
 8000388:	f001 f8de 	bl	8001548 <assignMorse>

	messageSent = 1; // Set value of message as sent
 800038c:	2301      	movs	r3, #1
 800038e:	71fb      	strb	r3, [r7, #7]

	TIM2->CCR1 = 0; // Red on 0
 8000390:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000394:	2200      	movs	r2, #0
 8000396:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR3 = 10000; // Green on full
 8000398:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039c:	f242 7210 	movw	r2, #10000	@ 0x2710
 80003a0:	63da      	str	r2, [r3, #60]	@ 0x3c

	return messageSent; // Return for use in interrupt file
 80003a2:	79fb      	ldrb	r3, [r7, #7]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40000400 	.word	0x40000400

080003b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	db0b      	blt.n	80003da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	f003 021f 	and.w	r2, r3, #31
 80003c8:	4907      	ldr	r1, [pc, #28]	@ (80003e8 <__NVIC_EnableIRQ+0x38>)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	095b      	lsrs	r3, r3, #5
 80003d0:	2001      	movs	r0, #1
 80003d2:	fa00 f202 	lsl.w	r2, r0, r2
 80003d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000e100 	.word	0xe000e100

080003ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db0a      	blt.n	8000416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	b2da      	uxtb	r2, r3
 8000404:	490c      	ldr	r1, [pc, #48]	@ (8000438 <__NVIC_SetPriority+0x4c>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	0112      	lsls	r2, r2, #4
 800040c:	b2d2      	uxtb	r2, r2
 800040e:	440b      	add	r3, r1
 8000410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000414:	e00a      	b.n	800042c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4908      	ldr	r1, [pc, #32]	@ (800043c <__NVIC_SetPriority+0x50>)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	f003 030f 	and.w	r3, r3, #15
 8000422:	3b04      	subs	r3, #4
 8000424:	0112      	lsls	r2, r2, #4
 8000426:	b2d2      	uxtb	r2, r2
 8000428:	440b      	add	r3, r1
 800042a:	761a      	strb	r2, [r3, #24]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	e000e100 	.word	0xe000e100
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f001 fa08 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f83c 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 f9ac 	bl	80007a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000450:	f000 f89a 	bl	8000588 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000454:	f000 f8d8 	bl	8000608 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000458:	f000 f984 	bl	8000764 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800045c:	f000 f912 	bl	8000684 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Call user-defined initialisation functions
  PERIPHERAL_CLOCKS_Init(); // Start all peripheral clocks
 8000460:	f000 fa20 	bl	80008a4 <PERIPHERAL_CLOCKS_Init>
  EXTI0_Init(); // Enable interrupts for EXTIO line
 8000464:	f000 fa2e 	bl	80008c4 <EXTI0_Init>
  TIM3_Init(); // Enable timer interrupts
 8000468:	f000 fa6c 	bl	8000944 <TIM3_Init>
  TIM4_Init(); // Enable timer interrupts
 800046c:	f000 fa94 	bl	8000998 <TIM4_Init>
  LED_Init(); // Enable LEDs
 8000470:	f000 fab2 	bl	80009d8 <LED_Init>

  initialiseMorse(); // Initialise the struct to store morse code values
 8000474:	f000 fe7e 	bl	8001174 <initialiseMorse>
  initialiseLevelCompleteFlag(); // Initialise the challenge as incomplete
 8000478:	f001 f85a 	bl	8001530 <initialiseLevelCompleteFlag>

  SerialInitialise(BAUD_115200, &USART1_PORT, &finishedTransmissionCallback); // Initialise UART
 800047c:	4a0e      	ldr	r2, [pc, #56]	@ (80004b8 <main+0x78>)
 800047e:	490f      	ldr	r1, [pc, #60]	@ (80004bc <main+0x7c>)
 8000480:	2004      	movs	r0, #4
 8000482:	f000 fb73 	bl	8000b6c <SerialInitialise>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000486:	2100      	movs	r1, #0
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <main+0x80>)
 800048a:	f003 fb3d 	bl	8003b08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800048e:	2104      	movs	r1, #4
 8000490:	480b      	ldr	r0, [pc, #44]	@ (80004c0 <main+0x80>)
 8000492:	f003 fb39 	bl	8003b08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000496:	2108      	movs	r1, #8
 8000498:	4809      	ldr	r0, [pc, #36]	@ (80004c0 <main+0x80>)
 800049a:	f003 fb35 	bl	8003b08 <HAL_TIM_PWM_Start>

  TIM2->CCR2 = 1000; // Set initial servo position
 800049e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004a6:	639a      	str	r2, [r3, #56]	@ 0x38


  while (1)
  {

	  if (getLevelCompleteFlag() == 1) {
 80004a8:	f001 f962 	bl	8001770 <getLevelCompleteFlag>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d1fa      	bne.n	80004a8 <main+0x68>
		  levelCompleteProcedure();
 80004b2:	f001 f975 	bl	80017a0 <levelCompleteProcedure>
	  if (getLevelCompleteFlag() == 1) {
 80004b6:	e7f7      	b.n	80004a8 <main+0x68>
 80004b8:	08000281 	.word	0x08000281
 80004bc:	20000000 	.word	0x20000000
 80004c0:	200001ac 	.word	0x200001ac

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b09e      	sub	sp, #120	@ 0x78
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004ce:	2228      	movs	r2, #40	@ 0x28
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f004 fab2 	bl	8004a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e8:	463b      	mov	r3, r7
 80004ea:	223c      	movs	r2, #60	@ 0x3c
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 faa4 	bl	8004a3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004f4:	2303      	movs	r3, #3
 80004f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80004fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000502:	2301      	movs	r3, #1
 8000504:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2310      	movs	r3, #16
 8000508:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050a:	2302      	movs	r3, #2
 800050c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000512:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000514:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000518:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fe72 	bl	8002208 <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800052a:	f000 fa67 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	230f      	movs	r3, #15
 8000530:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000532:	2302      	movs	r3, #2
 8000534:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800053e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000544:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fe6a 	bl	8003224 <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000556:	f000 fa51 	bl	80009fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <SystemClock_Config+0xc0>)
 800055c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000562:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000566:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4618      	mov	r0, r3
 800056c:	f003 f81c 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000576:	f000 fa41 	bl	80009fc <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3778      	adds	r7, #120	@ 0x78
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	00020020 	.word	0x00020020

08000588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_I2C1_Init+0x74>)
 800058e:	4a1c      	ldr	r2, [pc, #112]	@ (8000600 <MX_I2C1_Init+0x78>)
 8000590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000592:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <MX_I2C1_Init+0x74>)
 8000594:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <MX_I2C1_Init+0x7c>)
 8000596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c2:	480e      	ldr	r0, [pc, #56]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005c4:	f001 fc26 	bl	8001e14 <HAL_I2C_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ce:	f000 fa15 	bl	80009fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4809      	ldr	r0, [pc, #36]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005d6:	f001 fcb8 	bl	8001f4a <HAL_I2CEx_ConfigAnalogFilter>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e0:	f000 fa0c 	bl	80009fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005e8:	f001 fcfa 	bl	8001fe0 <HAL_I2CEx_ConfigDigitalFilter>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f2:	f000 fa03 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000f4 	.word	0x200000f4
 8000600:	40005400 	.word	0x40005400
 8000604:	00201d2b 	.word	0x00201d2b

08000608 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_SPI1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <MX_SPI1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_SPI1_Init+0x74>)
 8000614:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_SPI1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000620:	4b16      	ldr	r3, [pc, #88]	@ (800067c <MX_SPI1_Init+0x74>)
 8000622:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000626:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_SPI1_Init+0x74>)
 800062a:	2202      	movs	r2, #2
 800062c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_SPI1_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_SPI1_Init+0x74>)
 8000636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800063a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_SPI1_Init+0x74>)
 800063e:	2208      	movs	r2, #8
 8000640:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_SPI1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_SPI1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_SPI1_Init+0x74>)
 8000656:	2207      	movs	r2, #7
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_SPI1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_SPI1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_SPI1_Init+0x74>)
 8000668:	f003 f94c 	bl	8003904 <HAL_SPI_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f9c3 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000148 	.word	0x20000148
 8000680:	40013000 	.word	0x40013000

08000684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]
 80006a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006b2:	222f      	movs	r2, #47	@ 0x2f
 80006b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006be:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80006c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006d0:	4823      	ldr	r0, [pc, #140]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006d2:	f003 f9c2 	bl	8003a5a <HAL_TIM_PWM_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 f98e 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	481c      	ldr	r0, [pc, #112]	@ (8000760 <MX_TIM2_Init+0xdc>)
 80006f0:	f003 ffb6 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80006fa:	f000 f97f 	bl	80009fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006fe:	2360      	movs	r3, #96	@ 0x60
 8000700:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	4812      	ldr	r0, [pc, #72]	@ (8000760 <MX_TIM2_Init+0xdc>)
 8000716:	f003 faf7 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000720:	f000 f96c 	bl	80009fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2204      	movs	r2, #4
 8000728:	4619      	mov	r1, r3
 800072a:	480d      	ldr	r0, [pc, #52]	@ (8000760 <MX_TIM2_Init+0xdc>)
 800072c:	f003 faec 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000736:	f000 f961 	bl	80009fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2208      	movs	r2, #8
 800073e:	4619      	mov	r1, r3
 8000740:	4807      	ldr	r0, [pc, #28]	@ (8000760 <MX_TIM2_Init+0xdc>)
 8000742:	f003 fae1 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800074c:	f000 f956 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <MX_TIM2_Init+0xdc>)
 8000752:	f000 fb9d 	bl	8000e90 <HAL_TIM_MspPostInit>

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	@ 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200001ac 	.word	0x200001ac

08000764 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_USB_PCD_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_USB_PCD_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USB_PCD_Init+0x3c>)
 8000770:	2208      	movs	r2, #8
 8000772:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_USB_PCD_Init+0x3c>)
 8000776:	2202      	movs	r2, #2
 8000778:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USB_PCD_Init+0x3c>)
 800077c:	2202      	movs	r2, #2
 800077e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_USB_PCD_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USB_PCD_Init+0x3c>)
 8000788:	2200      	movs	r2, #0
 800078a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_USB_PCD_Init+0x3c>)
 800078e:	f001 fc73 	bl	8002078 <HAL_PCD_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 f930 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200001f8 	.word	0x200001f8
 80007a4:	40005c00 	.word	0x40005c00

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007be:	4b37      	ldr	r3, [pc, #220]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a36      	ldr	r2, [pc, #216]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b34      	ldr	r3, [pc, #208]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b31      	ldr	r3, [pc, #196]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a30      	ldr	r2, [pc, #192]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a2a      	ldr	r2, [pc, #168]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <MX_GPIO_Init+0xf4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a24      	ldr	r2, [pc, #144]	@ (800089c <MX_GPIO_Init+0xf4>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b22      	ldr	r3, [pc, #136]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a1e      	ldr	r2, [pc, #120]	@ (800089c <MX_GPIO_Init+0xf4>)
 8000824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000828:	6153      	str	r3, [r2, #20]
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_GPIO_Init+0xf4>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000836:	2200      	movs	r2, #0
 8000838:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800083c:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <MX_GPIO_Init+0xf8>)
 800083e:	f001 fad1 	bl	8001de4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000842:	2337      	movs	r3, #55	@ 0x37
 8000844:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000846:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <MX_GPIO_Init+0xf8>)
 8000858:	f001 f94a 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800085c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000860:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <MX_GPIO_Init+0xf8>)
 8000876:	f001 f93b 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000890:	f001 f92e 	bl	8001af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	@ 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	48001000 	.word	0x48001000

080008a4 <PERIPHERAL_CLOCKS_Init>:

/* USER CODE BEGIN 4 */

void PERIPHERAL_CLOCKS_Init(void) {
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	// Enable all clocks for required GPIOs
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN | RCC_AHBENR_GPIOEEN;
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <PERIPHERAL_CLOCKS_Init+0x1c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <PERIPHERAL_CLOCKS_Init+0x1c>)
 80008ae:	f443 1378 	orr.w	r3, r3, #4063232	@ 0x3e0000
 80008b2:	6153      	str	r3, [r2, #20]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <EXTI0_Init>:

void EXTI0_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
	__disable_irq(); // Disable interrupts during setup

	GPIOA->MODER &= ~0x3; // Set pin 0 mode to 00 (input)
 80008cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80008d6:	f023 0303 	bic.w	r3, r3, #3
 80008da:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // Enable SYSCFG clock
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <EXTI0_Init+0x74>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a15      	ldr	r2, [pc, #84]	@ (8000938 <EXTI0_Init+0x74>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6193      	str	r3, [r2, #24]
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0; // Clear EXTI0 mapping
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <EXTI0_Init+0x78>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4a13      	ldr	r2, [pc, #76]	@ (800093c <EXTI0_Init+0x78>)
 80008ee:	f023 030f 	bic.w	r3, r3, #15
 80008f2:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; // Map EXTI0 to PA0
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <EXTI0_Init+0x78>)
 80008f6:	4a11      	ldr	r2, [pc, #68]	@ (800093c <EXTI0_Init+0x78>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= EXTI_IMR_MR0; // Unmask EXTI0
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <EXTI0_Init+0x7c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <EXTI0_Init+0x7c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= EXTI_RTSR_TR0; // Trigger on rising edge (start timer)
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <EXTI0_Init+0x7c>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <EXTI0_Init+0x7c>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= EXTI_FTSR_TR0; // Trigger on falling edge (stop timer)
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <EXTI0_Init+0x7c>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <EXTI0_Init+0x7c>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	60d3      	str	r3, [r2, #12]


	NVIC_EnableIRQ(EXTI0_IRQn);    // For EXTI lines 0 and 1
 8000920:	2006      	movs	r0, #6
 8000922:	f7ff fd45 	bl	80003b0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI0_IRQn, 2);  // Optional: Set lower priority
 8000926:	2102      	movs	r1, #2
 8000928:	2006      	movs	r0, #6
 800092a:	f7ff fd5f 	bl	80003ec <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800092e:	b662      	cpsie	i
}
 8000930:	bf00      	nop

	__enable_irq(); // Re-enable interrupts post-setup
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000
 8000940:	40010400 	.word	0x40010400

08000944 <TIM3_Init>:

void TIM3_Init(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
	__disable_irq(); // Disable interrupts during setup

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // Enable timer 3
 800094c:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <TIM3_Init+0x4c>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <TIM3_Init+0x4c>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	61d3      	str	r3, [r2, #28]

	// Configure timer registers
	TIM3->PSC = 47999; // Prescaler of 1 ms for 48 MHz clock
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <TIM3_Init+0x50>)
 800095a:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 499; // Auto-reload after 500 ms for morse code application
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <TIM3_Init+0x50>)
 8000962:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->EGR = TIM_EGR_UG; // Generate an update event (apply PSC + ARR)
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <TIM3_Init+0x50>)
 800096a:	2201      	movs	r2, #1
 800096c:	615a      	str	r2, [r3, #20]

    TIM3->DIER |= TIM_DIER_UIE; // Enable update interrupts
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <TIM3_Init+0x50>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <TIM3_Init+0x50>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM3_IRQn, 1); // Set interrupt priority to 0
 800097a:	2101      	movs	r1, #1
 800097c:	201d      	movs	r0, #29
 800097e:	f7ff fd35 	bl	80003ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);     // Enable Timer 3 interrupt
 8000982:	201d      	movs	r0, #29
 8000984:	f7ff fd14 	bl	80003b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000988:	b662      	cpsie	i
}
 800098a:	bf00      	nop

	__enable_irq(); // Re-enable interrupts post-setup
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	40000400 	.word	0x40000400

08000998 <TIM4_Init>:

void TIM4_Init(void) {
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
    // Enable TIM4 peripheral clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <TIM4_Init+0x38>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <TIM4_Init+0x38>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	61d3      	str	r3, [r2, #28]

    // Configure prescaler so 1 tick = 1 ms (assuming 48 MHz system clock)
    TIM4->PSC = 47999;   // (48,000,000 / (47999 + 1)) = 1000 Hz = 1 ms per tick
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <TIM4_Init+0x3c>)
 80009aa:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set auto-reload to maximum (for longer delays)
    TIM4->ARR = 0xFFFFFFFF;
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <TIM4_Init+0x3c>)
 80009b2:	f04f 32ff 	mov.w	r2, #4294967295
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->EGR = TIM_EGR_UG; // Generate an update event (apply PSC + ARR)
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <TIM4_Init+0x3c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	615a      	str	r2, [r3, #20]

    // Just in case: make sure counter is off
    TIM4->CR1 = 0;
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <TIM4_Init+0x3c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40000800 	.word	0x40000800

080009d8 <LED_Init>:

void LED_Init(void) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0

	// Initialise pointer to higher half-word of MODE register in GPIOE
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <LED_Init+0x20>)
 80009e0:	607b      	str	r3, [r7, #4]

    *led_output_registers = 0x5555; // Output mode 0b01 for each port
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80009e8:	801a      	strh	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	48001002 	.word	0x48001002

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <arrAlloc>:
#include "main.h"

// Dynamically allocate memory for an array
void* arrAlloc(uint8_t size, size_t elemSize) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
    void* arr = calloc(size, elemSize);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fedb 	bl	80047d4 <calloc>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	60fb      	str	r3, [r7, #12]
    if (arr == NULL) {
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <arrAlloc+0x26>
        exit(1);  // Allocation failed
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f003 feef 	bl	800480c <exit>
    }
    return arr;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <matrixAlloc>:

// Allocate a 2D matrix (matrixSize rows, each with arrSize elements)
void** matrixAlloc(uint8_t matrixSize, uint8_t arrSize, size_t elemSize) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	603a      	str	r2, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	460b      	mov	r3, r1
 8000a46:	71bb      	strb	r3, [r7, #6]
    void** arr = calloc(matrixSize, sizeof(void*));
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fec1 	bl	80047d4 <calloc>
 8000a52:	4603      	mov	r3, r0
 8000a54:	60bb      	str	r3, [r7, #8]
    if (arr == NULL) {
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <matrixAlloc+0x2a>
        exit(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f003 fed5 	bl	800480c <exit>
    }

    for (uint8_t i = 0; i < matrixSize; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e00d      	b.n	8000a84 <matrixAlloc+0x4c>
        arr[i] = arrAlloc(arrSize, elemSize);
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	18d4      	adds	r4, r2, r3
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	6839      	ldr	r1, [r7, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ffc7 	bl	8000a08 <arrAlloc>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d3ed      	bcc.n	8000a68 <matrixAlloc+0x30>
    }
    return arr;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}

08000a96 <freeMatrix>:
    }
    return newArr;
}

// Free all rows, then the outer matrix
void freeMatrix(void** matrix, uint8_t matrixSize) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70fb      	strb	r3, [r7, #3]
    if (!matrix) return;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d015      	beq.n	8000ad4 <freeMatrix+0x3e>
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e00a      	b.n	8000ac4 <freeMatrix+0x2e>
        free(matrix[i]);
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 feb9 	bl	8004830 <free>
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	7bfa      	ldrb	r2, [r7, #15]
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d3f0      	bcc.n	8000aae <freeMatrix+0x18>
    }
    free(matrix);  // Also free the outer array
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f003 feaf 	bl	8004830 <free>
 8000ad2:	e000      	b.n	8000ad6 <freeMatrix+0x40>
    if (!matrix) return;
 8000ad4:	bf00      	nop
}
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <__NVIC_EnableIRQ>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	@ (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	@ (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(void)) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop

	__disable_irq(); // Disable interrupts for setup

	serial_port->completion_function = completion_function;
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b82:	4b3f      	ldr	r3, [pc, #252]	@ (8000c80 <SerialInitialise+0x114>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a3e      	ldr	r2, [pc, #248]	@ (8000c80 <SerialInitialise+0x114>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c80 <SerialInitialise+0x114>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a3b      	ldr	r2, [pc, #236]	@ (8000c80 <SerialInitialise+0x114>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	691a      	ldr	r2, [r3, #16]
 8000b9e:	4b38      	ldr	r3, [pc, #224]	@ (8000c80 <SerialInitialise+0x114>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4937      	ldr	r1, [pc, #220]	@ (8000c80 <SerialInitialise+0x114>)
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	6952      	ldr	r2, [r2, #20]
 8000bb0:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	6992      	ldr	r2, [r2, #24]
 8000bba:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	69d9      	ldr	r1, [r3, #28]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	6a1a      	ldr	r2, [r3, #32]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	6a19      	ldr	r1, [r3, #32]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <SerialInitialise+0x114>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4925      	ldr	r1, [pc, #148]	@ (8000c80 <SerialInitialise+0x114>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <SerialInitialise+0x114>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4922      	ldr	r1, [pc, #136]	@ (8000c80 <SerialInitialise+0x114>)
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	330c      	adds	r3, #12
 8000c02:	617b      	str	r3, [r7, #20]

	switch(baudRate){
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d825      	bhi.n	8000c56 <SerialInitialise+0xea>
 8000c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c10 <SerialInitialise+0xa4>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c25 	.word	0x08000c25
 8000c14:	08000c2f 	.word	0x08000c2f
 8000c18:	08000c39 	.word	0x08000c39
 8000c1c:	08000c43 	.word	0x08000c43
 8000c20:	08000c4d 	.word	0x08000c4d
		case BAUD_9600:
			*baud_rate_config = 0x1388; // 9600 at 48MHz
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c2a:	801a      	strh	r2, [r3, #0]
			break;
 8000c2c:	e013      	b.n	8000c56 <SerialInitialise+0xea>
		case BAUD_19200:
			*baud_rate_config = 0x09C4; // 19200 at 48MHz
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000c34:	801a      	strh	r2, [r3, #0]
			break;
 8000c36:	e00e      	b.n	8000c56 <SerialInitialise+0xea>
		case BAUD_38400:
			*baud_rate_config = 0x04E2; // 38400 at 48MHz
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000c3e:	801a      	strh	r2, [r3, #0]
			break;
 8000c40:	e009      	b.n	8000c56 <SerialInitialise+0xea>
		case BAUD_57600:
			*baud_rate_config = 0x0341; // 57600 at 48MHz
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f240 3241 	movw	r2, #833	@ 0x341
 8000c48:	801a      	strh	r2, [r3, #0]
			break;
 8000c4a:	e004      	b.n	8000c56 <SerialInitialise+0xea>
		case BAUD_115200:
			*baud_rate_config = 0x01A1; // 115200 at 48MHz
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000c52:	801a      	strh	r2, [r3, #0]
			break;
 8000c54:	bf00      	nop
	}


	// enable serial port for tx and rx and rx interrupts
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 022d 	orr.w	r2, r2, #45	@ 0x2d
 8000c64:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(USART1_IRQn);        // Enable USART1 IRQ
 8000c66:	2025      	movs	r0, #37	@ 0x25
 8000c68:	f7ff ff38 	bl	8000adc <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 2);   // Set priority to 2
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	2025      	movs	r0, #37	@ 0x25
 8000c70:	f7ff ff52 	bl	8000b18 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c74:	b662      	cpsie	i
}
 8000c76:	bf00      	nop


	__enable_irq(); // Enable interrupts post setup
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000

08000c84 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000c90:	bf00      	nop
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f8      	beq.n	8000c92 <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	851a      	strh	r2, [r3, #40]	@ 0x28

	serial_port->completion_function();
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cae:	4798      	blx	r3
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SerialInputChar>:


uint8_t SerialInputChar(SerialPort* serial_port) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

	// Check for overrun and frame errors and clear
	while((serial_port->UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0){
 8000cc0:	e003      	b.n	8000cca <SerialInputChar+0x12>
		serial_port->UART->ICR = USART_ICR_ORECF | USART_ICR_FECF; // Clear error flags
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	220a      	movs	r2, #10
 8000cc8:	621a      	str	r2, [r3, #32]
	while((serial_port->UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0){
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	f003 030a 	and.w	r3, r3, #10
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f4      	bne.n	8000cc2 <SerialInputChar+0xa>
	}

	while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {
 8000cd8:	bf00      	nop
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f8      	beq.n	8000cda <SerialInputChar+0x22>
	}

	return serial_port->UART->RDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d36:	2007      	movs	r0, #7
 8000d38:	f000 fea6 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_I2C_MspInit+0x7c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d127      	bne.n	8000dba <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d82:	23c0      	movs	r3, #192	@ 0xc0
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d92:	2304      	movs	r3, #4
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <HAL_I2C_MspInit+0x84>)
 8000d9e:	f000 fea7 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000da8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_I2C_MspInit+0x80>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	@ 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <HAL_SPI_MspInit+0x7c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d128      	bne.n	8000e44 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <HAL_SPI_MspInit+0x80>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <HAL_SPI_MspInit+0x80>)
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_SPI_MspInit+0x80>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_SPI_MspInit+0x80>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <HAL_SPI_MspInit+0x80>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_SPI_MspInit+0x80>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e22:	23e0      	movs	r3, #224	@ 0xe0
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e32:	2305      	movs	r3, #5
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f000 fe56 	bl	8001af0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	@ 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e64:	d10b      	bne.n	8000e7e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_TIM_PWM_MspInit+0x38>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_TIM_PWM_MspInit+0x38>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_TIM_PWM_MspInit+0x38>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eb0:	d11d      	bne.n	8000eee <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_TIM_MspPostInit+0x68>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8000eca:	f248 0306 	movw	r3, #32774	@ 0x8006
 8000ece:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f000 fe01 	bl	8001af0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a18      	ldr	r2, [pc, #96]	@ (8000f7c <HAL_PCD_MspInit+0x80>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d129      	bne.n	8000f72 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <HAL_PCD_MspInit+0x84>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <HAL_PCD_MspInit+0x84>)
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_PCD_MspInit+0x84>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000f36:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000f48:	230e      	movs	r3, #14
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f56:	f000 fdcb 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_PCD_MspInit+0x84>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_PCD_MspInit+0x84>)
 8000f60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_PCD_MspInit+0x84>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	@ 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40005c00 	.word	0x40005c00
 8000f80:	40021000 	.word	0x40021000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 fc83 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */

uint8_t messageSent = 1;

void EXTI0_IRQHandler(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) {
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <EXTI0_IRQHandler+0x34>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00e      	beq.n	8001012 <EXTI0_IRQHandler+0x2e>
        EXTI->PR |= EXTI_PR_PR0; // Clear interrupt flag
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <EXTI0_IRQHandler+0x34>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <EXTI0_IRQHandler+0x34>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6153      	str	r3, [r2, #20]

        messageSent = EXTI0Callback(messageSent);
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <EXTI0_IRQHandler+0x38>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f94b 	bl	80002a0 <EXTI0Callback>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b03      	ldr	r3, [pc, #12]	@ (800101c <EXTI0_IRQHandler+0x38>)
 8001010:	701a      	strb	r2, [r3, #0]
    }
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010400 	.word	0x40010400
 800101c:	20000028 	.word	0x20000028

08001020 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF && messageSent == 0) {
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <TIM3_IRQHandler+0x4c>)
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <TIM3_IRQHandler+0x38>
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <TIM3_IRQHandler+0x50>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10f      	bne.n	8001058 <TIM3_IRQHandler+0x38>
        TIM3->SR &= ~TIM_SR_UIF;  // Clear the interrupt flag
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <TIM3_IRQHandler+0x4c>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <TIM3_IRQHandler+0x4c>)
 800103e:	f023 0301 	bic.w	r3, r3, #1
 8001042:	6113      	str	r3, [r2, #16]

        messageSent = TIM3Callback(messageSent);
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <TIM3_IRQHandler+0x50>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f991 	bl	8000370 <TIM3Callback>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <TIM3_IRQHandler+0x50>)
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e006      	b.n	8001066 <TIM3_IRQHandler+0x46>
    } else {
        TIM3->SR &= ~TIM_SR_UIF;  // Clear the interrupt flag
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <TIM3_IRQHandler+0x4c>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	4a03      	ldr	r2, [pc, #12]	@ (800106c <TIM3_IRQHandler+0x4c>)
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6113      	str	r3, [r2, #16]
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40000400 	.word	0x40000400
 8001070:	20000028 	.word	0x20000028

08001074 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	if (USART1->ISR & USART_ISR_RXNE) {
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <USART1_IRQHandler+0x30>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <USART1_IRQHandler+0x26>
		// Check if RXNE flag is set the receive data
		uint8_t status = SerialInputChar(&USART1_PORT);
 8001086:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <USART1_IRQHandler+0x34>)
 8001088:	f7ff fe16 	bl	8000cb8 <SerialInputChar>
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]

		// Check status and set flag
		if(status == 1) {
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <USART1_IRQHandler+0x26>
			setLevelCompleteFlag();
 8001096:	f000 fb77 	bl	8001788 <setLevelCompleteFlag>
		}
	}
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40013800 	.word	0x40013800
 80010a8:	20000000 	.word	0x20000000

080010ac <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010b6:	f003 fce9 	bl	8004a8c <__errno>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2216      	movs	r2, #22
 80010be:	601a      	str	r2, [r3, #0]
  return -1;
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_exit>:

void _exit (int status)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ffe7 	bl	80010ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80010de:	bf00      	nop
 80010e0:	e7fd      	b.n	80010de <_exit+0x12>
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f003 fcba 	bl	8004a8c <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000a000 	.word	0x2000a000
 8001144:	00000400 	.word	0x00000400
 8001148:	200004cc 	.word	0x200004cc
 800114c:	20000658 	.word	0x20000658

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <initialiseMorse>:
Strings strings;           // Create struct to store all strings

uint8_t levelCompleteFlag; // Flag signals if challenge complete


void initialiseMorse(void) {
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0

	// First declare level parameters
	morseLevels.numLevels = 3;
 800117a:	4b94      	ldr	r3, [pc, #592]	@ (80013cc <initialiseMorse+0x258>)
 800117c:	2203      	movs	r2, #3
 800117e:	721a      	strb	r2, [r3, #8]
	morseLevels.maxLevelSize = 8;
 8001180:	4b92      	ldr	r3, [pc, #584]	@ (80013cc <initialiseMorse+0x258>)
 8001182:	2208      	movs	r2, #8
 8001184:	725a      	strb	r2, [r3, #9]
	morseLevels.maxMorseLetterLength = 4;
 8001186:	4b91      	ldr	r3, [pc, #580]	@ (80013cc <initialiseMorse+0x258>)
 8001188:	2204      	movs	r2, #4
 800118a:	729a      	strb	r2, [r3, #10]

	// Next allocate space for the level data and their sizes
	morseLevels.levels = (MorseBin**)matrixAlloc(morseLevels.numLevels, morseLevels.maxLevelSize, sizeof(MorseBin));
 800118c:	4b8f      	ldr	r3, [pc, #572]	@ (80013cc <initialiseMorse+0x258>)
 800118e:	7a1b      	ldrb	r3, [r3, #8]
 8001190:	4a8e      	ldr	r2, [pc, #568]	@ (80013cc <initialiseMorse+0x258>)
 8001192:	7a51      	ldrb	r1, [r2, #9]
 8001194:	2203      	movs	r2, #3
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fc4e 	bl	8000a38 <matrixAlloc>
 800119c:	4603      	mov	r3, r0
 800119e:	4a8b      	ldr	r2, [pc, #556]	@ (80013cc <initialiseMorse+0x258>)
 80011a0:	6013      	str	r3, [r2, #0]
	morseLevels.size = (uint8_t*)arrAlloc(morseLevels.numLevels, sizeof(uint8_t));
 80011a2:	4b8a      	ldr	r3, [pc, #552]	@ (80013cc <initialiseMorse+0x258>)
 80011a4:	7a1b      	ldrb	r3, [r3, #8]
 80011a6:	2101      	movs	r1, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fc2d 	bl	8000a08 <arrAlloc>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a86      	ldr	r2, [pc, #536]	@ (80013cc <initialiseMorse+0x258>)
 80011b2:	6053      	str	r3, [r2, #4]

	// Level 1 "SOS"
	morseLevels.levels[0][0] = morseDict[18];
 80011b4:	4b85      	ldr	r3, [pc, #532]	@ (80013cc <initialiseMorse+0x258>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b85      	ldr	r3, [pc, #532]	@ (80013d0 <initialiseMorse+0x25c>)
 80011bc:	3336      	adds	r3, #54	@ 0x36
 80011be:	8819      	ldrh	r1, [r3, #0]
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	8011      	strh	r1, [r2, #0]
 80011c4:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[0][1] = morseDict[14];
 80011c6:	4b81      	ldr	r3, [pc, #516]	@ (80013cc <initialiseMorse+0x258>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1cda      	adds	r2, r3, #3
 80011ce:	4b80      	ldr	r3, [pc, #512]	@ (80013d0 <initialiseMorse+0x25c>)
 80011d0:	332a      	adds	r3, #42	@ 0x2a
 80011d2:	8819      	ldrh	r1, [r3, #0]
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	8011      	strh	r1, [r2, #0]
 80011d8:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[0][2] = morseDict[18];
 80011da:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <initialiseMorse+0x258>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	1d9a      	adds	r2, r3, #6
 80011e2:	4b7b      	ldr	r3, [pc, #492]	@ (80013d0 <initialiseMorse+0x25c>)
 80011e4:	3336      	adds	r3, #54	@ 0x36
 80011e6:	8819      	ldrh	r1, [r3, #0]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	8011      	strh	r1, [r2, #0]
 80011ec:	7093      	strb	r3, [r2, #2]
	morseLevels.size[0] = 3;
 80011ee:	4b77      	ldr	r3, [pc, #476]	@ (80013cc <initialiseMorse+0x258>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	701a      	strb	r2, [r3, #0]

	// Level 2 "HELP"
	morseLevels.levels[1][0] = morseDict[7];
 80011f6:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <initialiseMorse+0x258>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3304      	adds	r3, #4
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b74      	ldr	r3, [pc, #464]	@ (80013d0 <initialiseMorse+0x25c>)
 8001200:	3315      	adds	r3, #21
 8001202:	8819      	ldrh	r1, [r3, #0]
 8001204:	789b      	ldrb	r3, [r3, #2]
 8001206:	8011      	strh	r1, [r2, #0]
 8001208:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[1][1] = morseDict[4];
 800120a:	4b70      	ldr	r3, [pc, #448]	@ (80013cc <initialiseMorse+0x258>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1cda      	adds	r2, r3, #3
 8001214:	4b6e      	ldr	r3, [pc, #440]	@ (80013d0 <initialiseMorse+0x25c>)
 8001216:	330c      	adds	r3, #12
 8001218:	8819      	ldrh	r1, [r3, #0]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	8011      	strh	r1, [r2, #0]
 800121e:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[1][2] = morseDict[11];
 8001220:	4b6a      	ldr	r3, [pc, #424]	@ (80013cc <initialiseMorse+0x258>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	1d9a      	adds	r2, r3, #6
 800122a:	4b69      	ldr	r3, [pc, #420]	@ (80013d0 <initialiseMorse+0x25c>)
 800122c:	3321      	adds	r3, #33	@ 0x21
 800122e:	8819      	ldrh	r1, [r3, #0]
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	8011      	strh	r1, [r2, #0]
 8001234:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[1][3] = morseDict[15];
 8001236:	4b65      	ldr	r3, [pc, #404]	@ (80013cc <initialiseMorse+0x258>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f103 0209 	add.w	r2, r3, #9
 8001242:	4b63      	ldr	r3, [pc, #396]	@ (80013d0 <initialiseMorse+0x25c>)
 8001244:	332d      	adds	r3, #45	@ 0x2d
 8001246:	8819      	ldrh	r1, [r3, #0]
 8001248:	789b      	ldrb	r3, [r3, #2]
 800124a:	8011      	strh	r1, [r2, #0]
 800124c:	7093      	strb	r3, [r2, #2]
	morseLevels.size[1] = 4;
 800124e:	4b5f      	ldr	r3, [pc, #380]	@ (80013cc <initialiseMorse+0x258>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	2204      	movs	r2, #4
 8001256:	701a      	strb	r2, [r3, #0]

	// Level 3 "SAVE KHIT"
	morseLevels.levels[2][0] = morseDict[18];
 8001258:	4b5c      	ldr	r3, [pc, #368]	@ (80013cc <initialiseMorse+0x258>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3308      	adds	r3, #8
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <initialiseMorse+0x25c>)
 8001262:	3336      	adds	r3, #54	@ 0x36
 8001264:	8819      	ldrh	r1, [r3, #0]
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	8011      	strh	r1, [r2, #0]
 800126a:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][1] = morseDict[0];
 800126c:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <initialiseMorse+0x258>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3308      	adds	r3, #8
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3303      	adds	r3, #3
 8001276:	4a56      	ldr	r2, [pc, #344]	@ (80013d0 <initialiseMorse+0x25c>)
 8001278:	8811      	ldrh	r1, [r2, #0]
 800127a:	7892      	ldrb	r2, [r2, #2]
 800127c:	8019      	strh	r1, [r3, #0]
 800127e:	709a      	strb	r2, [r3, #2]
	morseLevels.levels[2][2] = morseDict[21];
 8001280:	4b52      	ldr	r3, [pc, #328]	@ (80013cc <initialiseMorse+0x258>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3308      	adds	r3, #8
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1d9a      	adds	r2, r3, #6
 800128a:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <initialiseMorse+0x25c>)
 800128c:	333f      	adds	r3, #63	@ 0x3f
 800128e:	8819      	ldrh	r1, [r3, #0]
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	8011      	strh	r1, [r2, #0]
 8001294:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][3] = morseDict[4];
 8001296:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <initialiseMorse+0x258>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3308      	adds	r3, #8
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f103 0209 	add.w	r2, r3, #9
 80012a2:	4b4b      	ldr	r3, [pc, #300]	@ (80013d0 <initialiseMorse+0x25c>)
 80012a4:	330c      	adds	r3, #12
 80012a6:	8819      	ldrh	r1, [r3, #0]
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	8011      	strh	r1, [r2, #0]
 80012ac:	7093      	strb	r3, [r2, #2]

	morseLevels.levels[2][4] = morseDict[10];
 80012ae:	4b47      	ldr	r3, [pc, #284]	@ (80013cc <initialiseMorse+0x258>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3308      	adds	r3, #8
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f103 020c 	add.w	r2, r3, #12
 80012ba:	4b45      	ldr	r3, [pc, #276]	@ (80013d0 <initialiseMorse+0x25c>)
 80012bc:	331e      	adds	r3, #30
 80012be:	8819      	ldrh	r1, [r3, #0]
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	8011      	strh	r1, [r2, #0]
 80012c4:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][5] = morseDict[7];
 80012c6:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <initialiseMorse+0x258>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3308      	adds	r3, #8
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f103 020f 	add.w	r2, r3, #15
 80012d2:	4b3f      	ldr	r3, [pc, #252]	@ (80013d0 <initialiseMorse+0x25c>)
 80012d4:	3315      	adds	r3, #21
 80012d6:	8819      	ldrh	r1, [r3, #0]
 80012d8:	789b      	ldrb	r3, [r3, #2]
 80012da:	8011      	strh	r1, [r2, #0]
 80012dc:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][6] = morseDict[8];
 80012de:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <initialiseMorse+0x258>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3308      	adds	r3, #8
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f103 0212 	add.w	r2, r3, #18
 80012ea:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <initialiseMorse+0x25c>)
 80012ec:	3318      	adds	r3, #24
 80012ee:	8819      	ldrh	r1, [r3, #0]
 80012f0:	789b      	ldrb	r3, [r3, #2]
 80012f2:	8011      	strh	r1, [r2, #0]
 80012f4:	7093      	strb	r3, [r2, #2]
	morseLevels.levels[2][7] = morseDict[19];
 80012f6:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <initialiseMorse+0x258>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3308      	adds	r3, #8
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f103 0215 	add.w	r2, r3, #21
 8001302:	4b33      	ldr	r3, [pc, #204]	@ (80013d0 <initialiseMorse+0x25c>)
 8001304:	3339      	adds	r3, #57	@ 0x39
 8001306:	8819      	ldrh	r1, [r3, #0]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	8011      	strh	r1, [r2, #0]
 800130c:	7093      	strb	r3, [r2, #2]
	morseLevels.size[2] = 8;
 800130e:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <initialiseMorse+0x258>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	3302      	adds	r3, #2
 8001314:	2208      	movs	r2, #8
 8001316:	701a      	strb	r2, [r3, #0]

	morseLog.index = (uint8_t*)arrAlloc(morseLevels.numLevels, sizeof(uint8_t));
 8001318:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <initialiseMorse+0x258>)
 800131a:	7a1b      	ldrb	r3, [r3, #8]
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb72 	bl	8000a08 <arrAlloc>
 8001324:	4603      	mov	r3, r0
 8001326:	4a2b      	ldr	r2, [pc, #172]	@ (80013d4 <initialiseMorse+0x260>)
 8001328:	6013      	str	r3, [r2, #0]
	morseLog.letter = (uint8_t*)arrAlloc(morseLevels.maxMorseLetterLength, sizeof(uint8_t));
 800132a:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <initialiseMorse+0x258>)
 800132c:	7a9b      	ldrb	r3, [r3, #10]
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fb69 	bl	8000a08 <arrAlloc>
 8001336:	4603      	mov	r3, r0
 8001338:	4a26      	ldr	r2, [pc, #152]	@ (80013d4 <initialiseMorse+0x260>)
 800133a:	6093      	str	r3, [r2, #8]
	morseLog.currentLevel = 0;
 800133c:	4b25      	ldr	r3, [pc, #148]	@ (80013d4 <initialiseMorse+0x260>)
 800133e:	2200      	movs	r2, #0
 8001340:	711a      	strb	r2, [r3, #4]
	morseLog.letterIndex = 0;
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <initialiseMorse+0x260>)
 8001344:	2200      	movs	r2, #0
 8001346:	731a      	strb	r2, [r3, #12]


	// Create strings for user interface

	// Create level display header
	strings.levelDisplay = (uint8_t**)arrAlloc((morseLevels.numLevels + 1), sizeof(uint8_t*));
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <initialiseMorse+0x258>)
 800134a:	7a1b      	ldrb	r3, [r3, #8]
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2104      	movs	r1, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fb58 	bl	8000a08 <arrAlloc>
 8001358:	4603      	mov	r3, r0
 800135a:	4a1f      	ldr	r2, [pc, #124]	@ (80013d8 <initialiseMorse+0x264>)
 800135c:	6013      	str	r3, [r2, #0]
	strings.levelDisplay[0] = (uint8_t*)arrAlloc(28, sizeof(uint8_t));
 800135e:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <initialiseMorse+0x264>)
 8001360:	681c      	ldr	r4, [r3, #0]
 8001362:	2101      	movs	r1, #1
 8001364:	201c      	movs	r0, #28
 8001366:	f7ff fb4f 	bl	8000a08 <arrAlloc>
 800136a:	4603      	mov	r3, r0
 800136c:	6023      	str	r3, [r4, #0]

	sprintf((char*)strings.levelDisplay[0], "\r\nLevels to be cleared:\r\n\r\n");
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <initialiseMorse+0x264>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4919      	ldr	r1, [pc, #100]	@ (80013dc <initialiseMorse+0x268>)
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fb3e 	bl	80049f8 <siprintf>

	// Fill in each level line
	for (uint8_t i = 0; i < morseLevels.numLevels; i++) {
 800137c:	2300      	movs	r3, #0
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	e06d      	b.n	800145e <initialiseMorse+0x2ea>
		strings.levelDisplay[i + 1] = (uint8_t*)arrAlloc(12 + (2 * morseLevels.size[i]), sizeof(uint8_t));
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <initialiseMorse+0x258>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3306      	adds	r3, #6
 800138e:	b2db      	uxtb	r3, r3
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <initialiseMorse+0x264>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	3301      	adds	r3, #1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	18d4      	adds	r4, r2, r3
 80013a0:	2101      	movs	r1, #1
 80013a2:	f7ff fb31 	bl	8000a08 <arrAlloc>
 80013a6:	4603      	mov	r3, r0
 80013a8:	6023      	str	r3, [r4, #0]

	    sprintf((char*)strings.levelDisplay[i + 1], "Level %d: ", i + 1); // Start with the level name
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <initialiseMorse+0x264>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3301      	adds	r3, #1
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	3301      	adds	r3, #1
 80013bc:	461a      	mov	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <initialiseMorse+0x26c>)
 80013c0:	f003 fb1a 	bl	80049f8 <siprintf>

	    // Append each letter to the existing line
	    for (uint8_t j = 0; j < morseLevels.size[i]; j++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	71bb      	strb	r3, [r7, #6]
 80013c8:	e02d      	b.n	8001426 <initialiseMorse+0x2b2>
 80013ca:	bf00      	nop
 80013cc:	200004d0 	.word	0x200004d0
 80013d0:	20000030 	.word	0x20000030
 80013d4:	200004dc 	.word	0x200004dc
 80013d8:	200004ec 	.word	0x200004ec
 80013dc:	080051b8 	.word	0x080051b8
 80013e0:	080051d4 	.word	0x080051d4
	        char letterStr[4];  // Enough space for letter + space + null
	        sprintf((char*)letterStr, "%c ", morseLevels.levels[i][j].letter);
 80013e4:	4b49      	ldr	r3, [pc, #292]	@ (800150c <initialiseMorse+0x398>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	79ba      	ldrb	r2, [r7, #6]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	463b      	mov	r3, r7
 8001400:	4943      	ldr	r1, [pc, #268]	@ (8001510 <initialiseMorse+0x39c>)
 8001402:	4618      	mov	r0, r3
 8001404:	f003 faf8 	bl	80049f8 <siprintf>
	        strcat((char*)strings.levelDisplay[i + 1], letterStr);  // Append to current line
 8001408:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <initialiseMorse+0x3a0>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3301      	adds	r3, #1
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	463a      	mov	r2, r7
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fb16 	bl	8004a4c <strcat>
	    for (uint8_t j = 0; j < morseLevels.size[i]; j++) {
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	3301      	adds	r3, #1
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	4b39      	ldr	r3, [pc, #228]	@ (800150c <initialiseMorse+0x398>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	79ba      	ldrb	r2, [r7, #6]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3d6      	bcc.n	80013e4 <initialiseMorse+0x270>
	    }

	    strcat((char*)strings.levelDisplay[i + 1], "\r\n");  // End the line
 8001436:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <initialiseMorse+0x3a0>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3301      	adds	r3, #1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	681c      	ldr	r4, [r3, #0]
 8001444:	4620      	mov	r0, r4
 8001446:	f7fe fec3 	bl	80001d0 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	4423      	add	r3, r4
 800144e:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <initialiseMorse+0x3a4>)
 8001450:	8811      	ldrh	r1, [r2, #0]
 8001452:	7892      	ldrb	r2, [r2, #2]
 8001454:	8019      	strh	r1, [r3, #0]
 8001456:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < morseLevels.numLevels; i++) {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	3301      	adds	r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <initialiseMorse+0x398>)
 8001460:	7a1b      	ldrb	r3, [r3, #8]
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	429a      	cmp	r2, r3
 8001466:	d38c      	bcc.n	8001382 <initialiseMorse+0x20e>
	}

	// Create other messages
	strings.fail = (uint8_t*)arrAlloc(39, sizeof(uint8_t)); // Allocate memory for fail message
 8001468:	2101      	movs	r1, #1
 800146a:	2027      	movs	r0, #39	@ 0x27
 800146c:	f7ff facc 	bl	8000a08 <arrAlloc>
 8001470:	4603      	mov	r3, r0
 8001472:	4a28      	ldr	r2, [pc, #160]	@ (8001514 <initialiseMorse+0x3a0>)
 8001474:	6093      	str	r3, [r2, #8]
	sprintf((char*)strings.fail, "\r\nLevel failed, please try again!\r\n"); // Fail message
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <initialiseMorse+0x3a0>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4928      	ldr	r1, [pc, #160]	@ (800151c <initialiseMorse+0x3a8>)
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fabb 	bl	80049f8 <siprintf>

	strings.completeLevel = (uint8_t*)arrAlloc(21, sizeof(uint8_t)); // Allocate memory for level complete message
 8001482:	2101      	movs	r1, #1
 8001484:	2015      	movs	r0, #21
 8001486:	f7ff fabf 	bl	8000a08 <arrAlloc>
 800148a:	4603      	mov	r3, r0
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <initialiseMorse+0x3a0>)
 800148e:	6113      	str	r3, [r2, #16]
	sprintf((char*)strings.completeLevel, "\r\nLevel complete!\r\n"); // Level complete message
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <initialiseMorse+0x3a0>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	4922      	ldr	r1, [pc, #136]	@ (8001520 <initialiseMorse+0x3ac>)
 8001496:	4618      	mov	r0, r3
 8001498:	f003 faae 	bl	80049f8 <siprintf>

	strings.completeGame = (uint8_t*)arrAlloc(20, sizeof(uint8_t)); // Allocate memory for game complete message
 800149c:	2101      	movs	r1, #1
 800149e:	2014      	movs	r0, #20
 80014a0:	f7ff fab2 	bl	8000a08 <arrAlloc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <initialiseMorse+0x3a0>)
 80014a8:	6153      	str	r3, [r2, #20]
	sprintf((char*)strings.completeGame, "\r\nGame complete!\r\n"); // Game complete message
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <initialiseMorse+0x3a0>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	491d      	ldr	r1, [pc, #116]	@ (8001524 <initialiseMorse+0x3b0>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 faa1 	bl	80049f8 <siprintf>

	// Setup arrays for the morse input messages
	strings.morseInput = (uint8_t**)arrAlloc(2, sizeof(uint8_t*));
 80014b6:	2104      	movs	r1, #4
 80014b8:	2002      	movs	r0, #2
 80014ba:	f7ff faa5 	bl	8000a08 <arrAlloc>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <initialiseMorse+0x3a0>)
 80014c2:	6053      	str	r3, [r2, #4]
	strings.morseInput[0] = (uint8_t*)arrAlloc(17, sizeof(uint8_t));
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <initialiseMorse+0x3a0>)
 80014c6:	685c      	ldr	r4, [r3, #4]
 80014c8:	2101      	movs	r1, #1
 80014ca:	2011      	movs	r0, #17
 80014cc:	f7ff fa9c 	bl	8000a08 <arrAlloc>
 80014d0:	4603      	mov	r3, r0
 80014d2:	6023      	str	r3, [r4, #0]
	strings.morseInput[1] = (uint8_t*)arrAlloc(18, sizeof(uint8_t));
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <initialiseMorse+0x3a0>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	1d1c      	adds	r4, r3, #4
 80014da:	2101      	movs	r1, #1
 80014dc:	2012      	movs	r0, #18
 80014de:	f7ff fa93 	bl	8000a08 <arrAlloc>
 80014e2:	4603      	mov	r3, r0
 80014e4:	6023      	str	r3, [r4, #0]

	sprintf((char*)strings.morseInput[0], "\r\nEntered: dot\r\n"); // Dot input message
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <initialiseMorse+0x3a0>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	490e      	ldr	r1, [pc, #56]	@ (8001528 <initialiseMorse+0x3b4>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fa82 	bl	80049f8 <siprintf>
	sprintf((char*)strings.morseInput[1], "\r\nEntered: dash\r\n"); // Dash input message
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <initialiseMorse+0x3a0>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	490b      	ldr	r1, [pc, #44]	@ (800152c <initialiseMorse+0x3b8>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fa7a 	bl	80049f8 <siprintf>


}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	200004d0 	.word	0x200004d0
 8001510:	080051e0 	.word	0x080051e0
 8001514:	200004ec 	.word	0x200004ec
 8001518:	080051e4 	.word	0x080051e4
 800151c:	080051e8 	.word	0x080051e8
 8001520:	0800520c 	.word	0x0800520c
 8001524:	08005220 	.word	0x08005220
 8001528:	08005234 	.word	0x08005234
 800152c:	08005248 	.word	0x08005248

08001530 <initialiseLevelCompleteFlag>:


void initialiseLevelCompleteFlag (void) {
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
	levelCompleteFlag = 0;
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <initialiseLevelCompleteFlag+0x14>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20000504 	.word	0x20000504

08001548 <assignMorse>:


void assignMorse(uint8_t dotDash) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]

	// User-provided input values
	uint8_t level = morseLog.currentLevel; // set index for current level
 8001552:	4b65      	ldr	r3, [pc, #404]	@ (80016e8 <assignMorse+0x1a0>)
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	737b      	strb	r3, [r7, #13]
	uint8_t index = morseLog.index[level]; // Set index for length of level code
 8001558:	4b63      	ldr	r3, [pc, #396]	@ (80016e8 <assignMorse+0x1a0>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	733b      	strb	r3, [r7, #12]
	uint8_t withinLetterIndex = morseLog.letterIndex; // Set index for current position in letter
 8001564:	4b60      	ldr	r3, [pc, #384]	@ (80016e8 <assignMorse+0x1a0>)
 8001566:	7b1b      	ldrb	r3, [r3, #12]
 8001568:	72fb      	strb	r3, [r7, #11]

	// Comparison values as set in level initialisation
	uint8_t letterCode = morseLevels.levels[level][index].code; // Morse coded letter value
 800156a:	4b60      	ldr	r3, [pc, #384]	@ (80016ec <assignMorse+0x1a4>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	7b7b      	ldrb	r3, [r7, #13]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	7b3a      	ldrb	r2, [r7, #12]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	440b      	add	r3, r1
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	72bb      	strb	r3, [r7, #10]
	uint8_t letterLength = morseLevels.levels[level][index].length; // Length of morse coded value
 8001584:	4b59      	ldr	r3, [pc, #356]	@ (80016ec <assignMorse+0x1a4>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	7b7b      	ldrb	r3, [r7, #13]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	7b3a      	ldrb	r2, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	440b      	add	r3, r1
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	727b      	strb	r3, [r7, #9]
	uint8_t letter = morseLevels.levels[level][index].letter; // ASCII value of letter
 800159e:	4b53      	ldr	r3, [pc, #332]	@ (80016ec <assignMorse+0x1a4>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	7b3a      	ldrb	r2, [r7, #12]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	723b      	strb	r3, [r7, #8]

	// Declare letter message
	strings.letter = (uint8_t*)arrAlloc(26, sizeof(uint8_t)); // Allocate memory for letter completed message
 80015b8:	2101      	movs	r1, #1
 80015ba:	201a      	movs	r0, #26
 80015bc:	f7ff fa24 	bl	8000a08 <arrAlloc>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a4b      	ldr	r2, [pc, #300]	@ (80016f0 <assignMorse+0x1a8>)
 80015c4:	60d3      	str	r3, [r2, #12]
	sprintf((char*)strings.letter, "\r\nLetter completed: %c\r\n", letter); // Letter completed message
 80015c6:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <assignMorse+0x1a8>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	7a3a      	ldrb	r2, [r7, #8]
 80015cc:	4949      	ldr	r1, [pc, #292]	@ (80016f4 <assignMorse+0x1ac>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fa12 	bl	80049f8 <siprintf>

	morseLog.letter[withinLetterIndex] = dotDash; // 0 for dot, 1 for dash
 80015d4:	4b44      	ldr	r3, [pc, #272]	@ (80016e8 <assignMorse+0x1a0>)
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	4413      	add	r3, r2
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	701a      	strb	r2, [r3, #0]

	// Check if the correct input provided
	if (dotDash != ((letterCode >> ((letterLength - 1) - withinLetterIndex)) & 1)) {
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	7ab9      	ldrb	r1, [r7, #10]
 80015e4:	7a7b      	ldrb	r3, [r7, #9]
 80015e6:	1e58      	subs	r0, r3, #1
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	1ac3      	subs	r3, r0, r3
 80015ec:	fa41 f303 	asr.w	r3, r1, r3
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d00d      	beq.n	8001614 <assignMorse+0xcc>
		SerialOutputChar('F', &USART1_PORT); // Output the fail code on the USART line
 80015f8:	493f      	ldr	r1, [pc, #252]	@ (80016f8 <assignMorse+0x1b0>)
 80015fa:	2046      	movs	r0, #70	@ 0x46
 80015fc:	f7ff fb42 	bl	8000c84 <SerialOutputChar>
		morseLog.index[level] = 0;
 8001600:	4b39      	ldr	r3, [pc, #228]	@ (80016e8 <assignMorse+0x1a0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	7b7b      	ldrb	r3, [r7, #13]
 8001606:	4413      	add	r3, r2
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
		morseLog.letterIndex = 0;
 800160c:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <assignMorse+0x1a0>)
 800160e:	2200      	movs	r2, #0
 8001610:	731a      	strb	r2, [r3, #12]
		return;
 8001612:	e066      	b.n	80016e2 <assignMorse+0x19a>
	}

	// Create morse letter out of currently stored morse code
	uint8_t fullLetter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i <= withinLetterIndex; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	73bb      	strb	r3, [r7, #14]
 800161c:	e013      	b.n	8001646 <assignMorse+0xfe>
	    fullLetter <<= 1; // Shift bits left as index increases
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
	    fullLetter |= (morseLog.letter[i] & 1); // Set each bit to 1 or 0 depending on dot/dash
 8001624:	4b30      	ldr	r3, [pc, #192]	@ (80016e8 <assignMorse+0x1a0>)
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b25b      	sxtb	r3, r3
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	b25a      	sxtb	r2, r3
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4313      	orrs	r3, r2
 800163c:	b25b      	sxtb	r3, r3
 800163e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i <= withinLetterIndex; i++) {
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	3301      	adds	r3, #1
 8001644:	73bb      	strb	r3, [r7, #14]
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7afb      	ldrb	r3, [r7, #11]
 800164a:	429a      	cmp	r2, r3
 800164c:	d9e7      	bls.n	800161e <assignMorse+0xd6>
	}


	SerialOutputChar(dotDash, &USART1_PORT); // Output the code on the USART line
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4929      	ldr	r1, [pc, #164]	@ (80016f8 <assignMorse+0x1b0>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb16 	bl	8000c84 <SerialOutputChar>

	// Check if full letter matches the provided value
	if ((fullLetter == letterCode) && (withinLetterIndex == (letterLength - 1))) {
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	7abb      	ldrb	r3, [r7, #10]
 800165c:	429a      	cmp	r2, r3
 800165e:	d138      	bne.n	80016d2 <assignMorse+0x18a>
 8001660:	7afa      	ldrb	r2, [r7, #11]
 8001662:	7a7b      	ldrb	r3, [r7, #9]
 8001664:	3b01      	subs	r3, #1
 8001666:	429a      	cmp	r2, r3
 8001668:	d133      	bne.n	80016d2 <assignMorse+0x18a>

		SerialOutputChar(letter, &USART1_PORT); // Output code for letter
 800166a:	7a3b      	ldrb	r3, [r7, #8]
 800166c:	4922      	ldr	r1, [pc, #136]	@ (80016f8 <assignMorse+0x1b0>)
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb08 	bl	8000c84 <SerialOutputChar>

		morseLog.letterIndex = 0; // Index back to the start of a new letter
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <assignMorse+0x1a0>)
 8001676:	2200      	movs	r2, #0
 8001678:	731a      	strb	r2, [r3, #12]
		morseLog.index[level]++; // Increase the index variable for a new letter
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <assignMorse+0x1a0>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	7b7b      	ldrb	r3, [r7, #13]
 8001680:	4413      	add	r3, r2
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	3201      	adds	r2, #1
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]


		// Check if letter is the last in the level
		if (index == (morseLevels.size[level] - 1)) {
 800168a:	7b3a      	ldrb	r2, [r7, #12]
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <assignMorse+0x1a4>)
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	440b      	add	r3, r1
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3b01      	subs	r3, #1
 8001698:	429a      	cmp	r2, r3
 800169a:	d10f      	bne.n	80016bc <assignMorse+0x174>
			SerialOutputChar('Y', &USART1_PORT); // Output the fail code on the USART line
 800169c:	4916      	ldr	r1, [pc, #88]	@ (80016f8 <assignMorse+0x1b0>)
 800169e:	2059      	movs	r0, #89	@ 0x59
 80016a0:	f7ff faf0 	bl	8000c84 <SerialOutputChar>
			morseLog.currentLevel++; // Increase the level number
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <assignMorse+0x1a0>)
 80016a6:	791b      	ldrb	r3, [r3, #4]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <assignMorse+0x1a0>)
 80016ae:	711a      	strb	r2, [r3, #4]
			morseLog.index[level] = 0; // Reset the letter index
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <assignMorse+0x1a0>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	4413      	add	r3, r2
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
		}

		// Check if all levels are complete
		if (level == (morseLevels.numLevels - 1)) {
 80016bc:	7b7a      	ldrb	r2, [r7, #13]
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <assignMorse+0x1a4>)
 80016c0:	7a1b      	ldrb	r3, [r3, #8]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d10b      	bne.n	80016e0 <assignMorse+0x198>
			SerialOutputChar('W', &USART1_PORT); // Output the fail code on the USART line
 80016c8:	490b      	ldr	r1, [pc, #44]	@ (80016f8 <assignMorse+0x1b0>)
 80016ca:	2057      	movs	r0, #87	@ 0x57
 80016cc:	f7ff fada 	bl	8000c84 <SerialOutputChar>
		}

		return;
 80016d0:	e006      	b.n	80016e0 <assignMorse+0x198>
	}



	morseLog.letterIndex++; // Increase index for dot/dash within the letter
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <assignMorse+0x1a0>)
 80016d4:	7b1b      	ldrb	r3, [r3, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <assignMorse+0x1a0>)
 80016dc:	731a      	strb	r2, [r3, #12]
 80016de:	e000      	b.n	80016e2 <assignMorse+0x19a>
		return;
 80016e0:	bf00      	nop
}
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200004dc 	.word	0x200004dc
 80016ec:	200004d0 	.word	0x200004d0
 80016f0:	200004ec 	.word	0x200004ec
 80016f4:	0800525c 	.word	0x0800525c
 80016f8:	20000000 	.word	0x20000000

080016fc <delayMiliSec>:

void delayMiliSec(uint16_t ms) {
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
	volatile uint32_t* timerCnt = &(TIM4->CNT);
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <delayMiliSec+0x44>)
 8001708:	60fb      	str	r3, [r7, #12]


	TIM4->CNT = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <delayMiliSec+0x48>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM4->CR1 |= TIM_CR1_CEN; // Start timer
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <delayMiliSec+0x48>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <delayMiliSec+0x48>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6013      	str	r3, [r2, #0]

    while (*timerCnt < ms) {
 800171c:	bf00      	nop
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	429a      	cmp	r2, r3
 8001726:	d3fa      	bcc.n	800171e <delayMiliSec+0x22>
        // Wait (busy loop)
    }

    TIM4->CR1 &= ~TIM_CR1_CEN; // Stop timer
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <delayMiliSec+0x48>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <delayMiliSec+0x48>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40000824 	.word	0x40000824
 8001744:	40000800 	.word	0x40000800

08001748 <setLedState>:

	return *led_register;
}

// Function to set the LED state
void setLedState(uint8_t state) {
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
    uint8_t ledState = state;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	73fb      	strb	r3, [r7, #15]

    // Update LED display
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <setLedState+0x24>)
 8001758:	60bb      	str	r3, [r7, #8]
    *led_register = ledState;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	48001015 	.word	0x48001015

08001770 <getLevelCompleteFlag>:

uint8_t getLevelCompleteFlag(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return levelCompleteFlag;
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <getLevelCompleteFlag+0x14>)
 8001776:	781b      	ldrb	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000504 	.word	0x20000504

08001788 <setLevelCompleteFlag>:

void setLevelCompleteFlag(void) {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	levelCompleteFlag = 1;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <setLevelCompleteFlag+0x14>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20000504 	.word	0x20000504

080017a0 <levelCompleteProcedure>:

void levelCompleteProcedure(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	TIM2->CCR2 = 2000; // Set final servo position (let ball slide through)
 80017a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017a8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017ac:	639a      	str	r2, [r3, #56]	@ 0x38

	// Free all dynamically allocated memory
	freeMatrix((void**)morseLevels.levels, morseLevels.numLevels);
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <levelCompleteProcedure+0x5c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <levelCompleteProcedure+0x5c>)
 80017b4:	7a12      	ldrb	r2, [r2, #8]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff f96c 	bl	8000a96 <freeMatrix>
	free(morseLevels.size);
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <levelCompleteProcedure+0x5c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 f834 	bl	8004830 <free>
	free(morseLog.index);
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <levelCompleteProcedure+0x60>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 f82f 	bl	8004830 <free>
	free(morseLog.letter);
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <levelCompleteProcedure+0x60>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 f82a 	bl	8004830 <free>
	while(1) {
		setLedState(0b01010101);
 80017dc:	2055      	movs	r0, #85	@ 0x55
 80017de:	f7ff ffb3 	bl	8001748 <setLedState>
		delayMiliSec(1000); // 1000 ms delay
 80017e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017e6:	f7ff ff89 	bl	80016fc <delayMiliSec>
		setLedState(0b10101010);
 80017ea:	20aa      	movs	r0, #170	@ 0xaa
 80017ec:	f7ff ffac 	bl	8001748 <setLedState>
		delayMiliSec(1000); // 1000 ms delay
 80017f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017f4:	f7ff ff82 	bl	80016fc <delayMiliSec>
		setLedState(0b01010101);
 80017f8:	bf00      	nop
 80017fa:	e7ef      	b.n	80017dc <levelCompleteProcedure+0x3c>
 80017fc:	200004d0 	.word	0x200004d0
 8001800:	200004dc 	.word	0x200004dc

08001804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800183c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001808:	f7ff fca2 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <LoopForever+0x6>)
  ldr r1, =_edata
 800180e:	490d      	ldr	r1, [pc, #52]	@ (8001844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LoopForever+0xe>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001824:	4c0a      	ldr	r4, [pc, #40]	@ (8001850 <LoopForever+0x16>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001832:	f003 f931 	bl	8004a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001836:	f7fe fe03 	bl	8000440 <main>

0800183a <LoopForever>:

LoopForever:
    b LoopForever
 800183a:	e7fe      	b.n	800183a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800183c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001848:	080052ec 	.word	0x080052ec
  ldr r2, =_sbss
 800184c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001850:	20000658 	.word	0x20000658

08001854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC1_2_IRQHandler>
	...

08001858 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_Init+0x28>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_Init+0x28>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f90d 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f808 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fa44 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40022000 	.word	0x40022000

08001884 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f917 	bl	8001ad6 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 f8ed 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	@ (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000002c 	.word	0x2000002c
 80018dc:	20000084 	.word	0x20000084
 80018e0:	20000080 	.word	0x20000080

080018e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000084 	.word	0x20000084
 8001908:	20000508 	.word	0x20000508

0800190c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000508 	.word	0x20000508

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff47 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff5c 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffb0 	bl	8001a44 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e154      	b.n	8001daa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8146 	beq.w	8001da4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d005      	beq.n	8001b30 <HAL_GPIO_Init+0x40>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d130      	bne.n	8001b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b66:	2201      	movs	r2, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 0201 	and.w	r2, r3, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d017      	beq.n	8001bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d123      	bne.n	8001c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0203 	and.w	r2, r3, #3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80a0 	beq.w	8001da4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c64:	4b58      	ldr	r3, [pc, #352]	@ (8001dc8 <HAL_GPIO_Init+0x2d8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a57      	ldr	r2, [pc, #348]	@ (8001dc8 <HAL_GPIO_Init+0x2d8>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b55      	ldr	r3, [pc, #340]	@ (8001dc8 <HAL_GPIO_Init+0x2d8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c7c:	4a53      	ldr	r2, [pc, #332]	@ (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ca6:	d019      	beq.n	8001cdc <HAL_GPIO_Init+0x1ec>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a49      	ldr	r2, [pc, #292]	@ (8001dd0 <HAL_GPIO_Init+0x2e0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1e8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a48      	ldr	r2, [pc, #288]	@ (8001dd4 <HAL_GPIO_Init+0x2e4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a47      	ldr	r2, [pc, #284]	@ (8001dd8 <HAL_GPIO_Init+0x2e8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a46      	ldr	r2, [pc, #280]	@ (8001ddc <HAL_GPIO_Init+0x2ec>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1dc>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e008      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001ccc:	2305      	movs	r3, #5
 8001cce:	e006      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e004      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cee:	4937      	ldr	r1, [pc, #220]	@ (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfc:	4b38      	ldr	r3, [pc, #224]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d20:	4a2f      	ldr	r2, [pc, #188]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d4a:	4a25      	ldr	r2, [pc, #148]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d74:	4a1a      	ldr	r2, [pc, #104]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f aea3 	bne.w	8001b00 <HAL_GPIO_Init+0x10>
  }
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	48000400 	.word	0x48000400
 8001dd4:	48000800 	.word	0x48000800
 8001dd8:	48000c00 	.word	0x48000c00
 8001ddc:	48001000 	.word	0x48001000
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e08d      	b.n	8001f42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe ff84 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2224      	movs	r2, #36	@ 0x24
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	e006      	b.n	8001e9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d108      	bne.n	8001eb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	e007      	b.n	8001ec6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ed8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69d9      	ldr	r1, [r3, #28]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d138      	bne.n	8001fd2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e032      	b.n	8001fd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2224      	movs	r2, #36	@ 0x24
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d139      	bne.n	800206a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002000:	2302      	movs	r3, #2
 8002002:	e033      	b.n	800206c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	@ 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002032:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
  }
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0b9      	b.n	80021fe <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe ff2c 	bl	8000efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2203      	movs	r2, #3
 80020a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fb55 	bl	8004760 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	e03e      	b.n	800213a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	3311      	adds	r3, #17
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	3310      	adds	r3, #16
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	3313      	adds	r3, #19
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3320      	adds	r3, #32
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3324      	adds	r3, #36	@ 0x24
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	3301      	adds	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	791b      	ldrb	r3, [r3, #4]
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	429a      	cmp	r2, r3
 8002142:	d3bb      	bcc.n	80020bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e044      	b.n	80021d4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	3301      	adds	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	791b      	ldrb	r3, [r3, #4]
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3b5      	bcc.n	800214a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ea:	f002 fad4 	bl	8004796 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800220e:	af00      	add	r7, sp, #0
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002218:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f000 bff4 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 816d 	beq.w	800251e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002244:	4bb4      	ldr	r3, [pc, #720]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002250:	4bb1      	ldr	r3, [pc, #708]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d157      	bne.n	800230c <HAL_RCC_OscConfig+0x104>
 800225c:	4bae      	ldr	r3, [pc, #696]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002268:	d150      	bne.n	800230c <HAL_RCC_OscConfig+0x104>
 800226a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800226e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b3f      	cmp	r3, #63	@ 0x3f
 800228a:	d802      	bhi.n	8002292 <HAL_RCC_OscConfig+0x8a>
 800228c:	4ba2      	ldr	r3, [pc, #648]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0xb6>
 8002292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002296:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80022a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022aa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80022ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80022ba:	4b97      	ldr	r3, [pc, #604]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022c2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80022c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80022ca:	fa92 f2a2 	rbit	r2, r2
 80022ce:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80022d2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f042 0220 	orr.w	r2, r2, #32
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8114 	beq.w	800251c <HAL_RCC_OscConfig+0x314>
 80022f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 810b 	bne.w	800251c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f000 bf85 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231c:	d106      	bne.n	800232c <HAL_RCC_OscConfig+0x124>
 800231e:	4b7e      	ldr	r3, [pc, #504]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7d      	ldr	r2, [pc, #500]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e036      	b.n	800239a <HAL_RCC_OscConfig+0x192>
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x14e>
 800233c:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a75      	ldr	r2, [pc, #468]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b73      	ldr	r3, [pc, #460]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a72      	ldr	r2, [pc, #456]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	e021      	b.n	800239a <HAL_RCC_OscConfig+0x192>
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x17a>
 8002368:	4b6b      	ldr	r3, [pc, #428]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6a      	ldr	r2, [pc, #424]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800236e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b68      	ldr	r3, [pc, #416]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a67      	ldr	r2, [pc, #412]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0x192>
 8002382:	4b65      	ldr	r3, [pc, #404]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a64      	ldr	r2, [pc, #400]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b62      	ldr	r3, [pc, #392]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a61      	ldr	r2, [pc, #388]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002398:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239a:	4b5f      	ldr	r3, [pc, #380]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	f023 020f 	bic.w	r2, r3, #15
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	495a      	ldr	r1, [pc, #360]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d054      	beq.n	800246e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff faa2 	bl	800190c <HAL_GetTick>
 80023c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ce:	f7ff fa9d 	bl	800190c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d902      	bls.n	80023e4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	f000 bf19 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
 80023e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80023f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b3f      	cmp	r3, #63	@ 0x3f
 8002404:	d802      	bhi.n	800240c <HAL_RCC_OscConfig+0x204>
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	e015      	b.n	8002438 <HAL_RCC_OscConfig+0x230>
 800240c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002410:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002420:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002424:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002428:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002434:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800243c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002440:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002444:	fa92 f2a2 	rbit	r2, r2
 8002448:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800244c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f042 0220 	orr.w	r2, r2, #32
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f002 021f 	and.w	r2, r2, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0b0      	beq.n	80023ce <HAL_RCC_OscConfig+0x1c6>
 800246c:	e057      	b.n	800251e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff fa4d 	bl	800190c <HAL_GetTick>
 8002472:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff fa48 	bl	800190c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	@ 0x64
 8002486:	d902      	bls.n	800248e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	f000 bec4 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
 800248e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002492:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80024a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80024ae:	d802      	bhi.n	80024b6 <HAL_RCC_OscConfig+0x2ae>
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_OscConfig+0x2da>
 80024b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80024ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80024d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_RCC_OscConfig+0x310>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024e6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80024ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80024ee:	fa92 f2a2 	rbit	r2, r2
 80024f2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80024f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80024fa:	fab2 f282 	clz	r2, r2
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f042 0220 	orr.w	r2, r2, #32
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f002 021f 	and.w	r2, r2, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1b0      	bne.n	8002478 <HAL_RCC_OscConfig+0x270>
 8002516:	e002      	b.n	800251e <HAL_RCC_OscConfig+0x316>
 8002518:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 816c 	beq.w	800280c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002534:	4bcc      	ldr	r3, [pc, #816]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002540:	4bc9      	ldr	r3, [pc, #804]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d16d      	bne.n	8002628 <HAL_RCC_OscConfig+0x420>
 800254c:	4bc6      	ldr	r3, [pc, #792]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d167      	bne.n	8002628 <HAL_RCC_OscConfig+0x420>
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800256a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b3f      	cmp	r3, #63	@ 0x3f
 8002576:	d802      	bhi.n	800257e <HAL_RCC_OscConfig+0x376>
 8002578:	4bbb      	ldr	r3, [pc, #748]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	e013      	b.n	80025a6 <HAL_RCC_OscConfig+0x39e>
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002590:	2302      	movs	r3, #2
 8002592:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002596:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80025a2:	4bb1      	ldr	r3, [pc, #708]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	2202      	movs	r2, #2
 80025a8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80025ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80025b0:	fa92 f2a2 	rbit	r2, r2
 80025b4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80025b8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f002 021f 	and.w	r2, r2, #31
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_RCC_OscConfig+0x3e6>
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d002      	beq.n	80025ee <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f000 be14 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	21f8      	movs	r1, #248	@ 0xf8
 8002604:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800260c:	fa91 f1a1 	rbit	r1, r1
 8002610:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002614:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002618:	fab1 f181 	clz	r1, r1
 800261c:	b2c9      	uxtb	r1, r1
 800261e:	408b      	lsls	r3, r1
 8002620:	4991      	ldr	r1, [pc, #580]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e0f1      	b.n	800280c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8083 	beq.w	8002740 <HAL_RCC_OscConfig+0x538>
 800263a:	2301      	movs	r3, #1
 800263c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800264c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800265a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	461a      	mov	r2, r3
 8002662:	2301      	movs	r3, #1
 8002664:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff f951 	bl	800190c <HAL_GetTick>
 800266a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002670:	f7ff f94c 	bl	800190c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d902      	bls.n	8002686 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	f000 bdc8 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
 8002686:	2302      	movs	r3, #2
 8002688:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002698:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80026a4:	d802      	bhi.n	80026ac <HAL_RCC_OscConfig+0x4a4>
 80026a6:	4b70      	ldr	r3, [pc, #448]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e013      	b.n	80026d4 <HAL_RCC_OscConfig+0x4cc>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80026c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80026d0:	4b65      	ldr	r3, [pc, #404]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	2202      	movs	r2, #2
 80026d6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80026da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80026de:	fa92 f2a2 	rbit	r2, r2
 80026e2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80026e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0b4      	beq.n	8002670 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b58      	ldr	r3, [pc, #352]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	21f8      	movs	r1, #248	@ 0xf8
 800271c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002724:	fa91 f1a1 	rbit	r1, r1
 8002728:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800272c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002730:	fab1 f181 	clz	r1, r1
 8002734:	b2c9      	uxtb	r1, r1
 8002736:	408b      	lsls	r3, r1
 8002738:	494b      	ldr	r1, [pc, #300]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
 800273e:	e065      	b.n	800280c <HAL_RCC_OscConfig+0x604>
 8002740:	2301      	movs	r3, #1
 8002742:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002752:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002760:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f8ce 	bl	800190c <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff f8c9 	bl	800190c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	f000 bd45 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
 800278c:	2302      	movs	r3, #2
 800278e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800279e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80027aa:	d802      	bhi.n	80027b2 <HAL_RCC_OscConfig+0x5aa>
 80027ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	e013      	b.n	80027da <HAL_RCC_OscConfig+0x5d2>
 80027b2:	2302      	movs	r3, #2
 80027b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80027c4:	2302      	movs	r3, #2
 80027c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80027ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_RCC_OscConfig+0x660>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	2202      	movs	r2, #2
 80027dc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80027e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80027ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1b4      	bne.n	8002776 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8115 	beq.w	8002a4c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07e      	beq.n	8002930 <HAL_RCC_OscConfig+0x728>
 8002832:	2301      	movs	r3, #1
 8002834:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_RCC_OscConfig+0x664>)
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	461a      	mov	r2, r3
 8002858:	2301      	movs	r3, #1
 800285a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7ff f856 	bl	800190c <HAL_GetTick>
 8002860:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002864:	e00f      	b.n	8002886 <HAL_RCC_OscConfig+0x67e>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002870:	f7ff f84c 	bl	800190c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d902      	bls.n	8002886 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	f000 bcc8 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
 8002886:	2302      	movs	r3, #2
 8002888:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028a0:	2202      	movs	r2, #2
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e0:	4bb0      	ldr	r3, [pc, #704]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 80028e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028ec:	2102      	movs	r1, #2
 80028ee:	6019      	str	r1, [r3, #0]
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f1a3 	rbit	r1, r3
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002906:	6019      	str	r1, [r3, #0]
  return result;
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0a0      	beq.n	8002870 <HAL_RCC_OscConfig+0x668>
 800292e:	e08d      	b.n	8002a4c <HAL_RCC_OscConfig+0x844>
 8002930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002934:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fa93 f2a3 	rbit	r2, r3
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002952:	601a      	str	r2, [r3, #0]
  return result;
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800295c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4b90      	ldr	r3, [pc, #576]	@ (8002ba8 <HAL_RCC_OscConfig+0x9a0>)
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	461a      	mov	r2, r3
 800296e:	2300      	movs	r3, #0
 8002970:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe ffcb 	bl	800190c <HAL_GetTick>
 8002976:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe ffc6 	bl	800190c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d902      	bls.n	8002992 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	f000 bc42 	b.w	8003216 <HAL_RCC_OscConfig+0x100e>
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800299a:	2202      	movs	r2, #2
 800299c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029be:	2202      	movs	r2, #2
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029e2:	2202      	movs	r2, #2
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fe:	4b69      	ldr	r3, [pc, #420]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	6019      	str	r1, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f1a3 	rbit	r1, r3
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a24:	6019      	str	r1, [r3, #0]
  return result;
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d197      	bne.n	800297c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 819e 	beq.w	8002d9e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a68:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d116      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	61d3      	str	r3, [r2, #28]
 8002a80:	4b48      	ldr	r3, [pc, #288]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a9a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b42      	ldr	r3, [pc, #264]	@ (8002bac <HAL_RCC_OscConfig+0x9a4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b3f      	ldr	r3, [pc, #252]	@ (8002bac <HAL_RCC_OscConfig+0x9a4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8002bac <HAL_RCC_OscConfig+0x9a4>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe ff27 	bl	800190c <HAL_GetTick>
 8002abe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe ff22 	bl	800190c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	@ 0x64
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e39e      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b34      	ldr	r3, [pc, #208]	@ (8002bac <HAL_RCC_OscConfig+0x9a4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x8fa>
 8002af4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	e035      	b.n	8002b6e <HAL_RCC_OscConfig+0x966>
 8002b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x924>
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a23      	ldr	r2, [pc, #140]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a20      	ldr	r2, [pc, #128]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
 8002b2a:	e020      	b.n	8002b6e <HAL_RCC_OscConfig+0x966>
 8002b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x94e>
 8002b3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a18      	ldr	r2, [pc, #96]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x966>
 8002b56:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba4 <HAL_RCC_OscConfig+0x99c>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8087 	beq.w	8002c8e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7fe fec4 	bl	800190c <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e012      	b.n	8002bb0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe febf 	bl	800190c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d908      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e339      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	10908120 	.word	0x10908120
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bdc:	2202      	movs	r2, #2
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bf6:	601a      	str	r2, [r3, #0]
  return result;
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_OscConfig+0xa10>
 8002c12:	4b98      	ldr	r3, [pc, #608]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	e013      	b.n	8002c40 <HAL_RCC_OscConfig+0xa38>
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c20:	2202      	movs	r2, #2
 8002c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c36:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c44:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c48:	2102      	movs	r1, #2
 8002c4a:	6011      	str	r1, [r2, #0]
 8002c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c50:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	fa92 f1a2 	rbit	r1, r2
 8002c5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c5e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c62:	6011      	str	r1, [r2, #0]
  return result;
 8002c64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c68:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f002 021f 	and.w	r2, r2, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f43f af7f 	beq.w	8002b8a <HAL_RCC_OscConfig+0x982>
 8002c8c:	e07d      	b.n	8002d8a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fe3d 	bl	800190c <HAL_GetTick>
 8002c92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fe38 	bl	800190c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e2b2      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
 8002cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cb8:	2202      	movs	r2, #2
 8002cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	fa93 f2a3 	rbit	r2, r3
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cdc:	2202      	movs	r2, #2
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fa93 f2a3 	rbit	r2, r3
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cf6:	601a      	str	r2, [r3, #0]
  return result;
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0xb10>
 8002d12:	4b58      	ldr	r3, [pc, #352]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	e013      	b.n	8002d40 <HAL_RCC_OscConfig+0xb38>
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d20:	2202      	movs	r2, #2
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d36:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d44:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d48:	2102      	movs	r1, #2
 8002d4a:	6011      	str	r1, [r2, #0]
 8002d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d50:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	fa92 f1a2 	rbit	r1, r2
 8002d5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d5e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d62:	6011      	str	r1, [r2, #0]
  return result;
 8002d64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d68:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f002 021f 	and.w	r2, r2, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d186      	bne.n	8002c98 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b38      	ldr	r3, [pc, #224]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4a37      	ldr	r2, [pc, #220]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8232 	beq.w	8003214 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db0:	4b30      	ldr	r3, [pc, #192]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	f000 8201 	beq.w	80031c0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	f040 8157 	bne.w	800307e <HAL_RCC_OscConfig+0xe76>
 8002dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002dd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f2a3 	rbit	r2, r3
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002df4:	601a      	str	r2, [r3, #0]
  return result;
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dfe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e0a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	461a      	mov	r2, r3
 8002e12:	2300      	movs	r3, #0
 8002e14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fd79 	bl	800190c <HAL_GetTick>
 8002e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1e:	e009      	b.n	8002e34 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fd74 	bl	800190c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1f0      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e46:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	fa93 f2a3 	rbit	r2, r3
 8002e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e54:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e58:	601a      	str	r2, [r3, #0]
  return result;
 8002e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e6c:	d804      	bhi.n	8002e78 <HAL_RCC_OscConfig+0xc70>
 8002e6e:	4b01      	ldr	r3, [pc, #4]	@ (8002e74 <HAL_RCC_OscConfig+0xc6c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e029      	b.n	8002ec8 <HAL_RCC_OscConfig+0xcc0>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e98:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	4bc3      	ldr	r3, [pc, #780]	@ (80031d4 <HAL_RCC_OscConfig+0xfcc>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ecc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ed0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ed4:	6011      	str	r1, [r2, #0]
 8002ed6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eda:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fa92 f1a2 	rbit	r1, r2
 8002ee4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ee8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002eec:	6011      	str	r1, [r2, #0]
  return result;
 8002eee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ef2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d185      	bne.n	8002e20 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f14:	4baf      	ldr	r3, [pc, #700]	@ (80031d4 <HAL_RCC_OscConfig+0xfcc>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	49a7      	ldr	r1, [pc, #668]	@ (80031d4 <HAL_RCC_OscConfig+0xfcc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f40:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	fa93 f2a3 	rbit	r2, r3
 8002f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f60:	601a      	str	r2, [r3, #0]
  return result;
 8002f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f6a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f76:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2301      	movs	r3, #1
 8002f80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fcc3 	bl	800190c <HAL_GetTick>
 8002f86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8a:	e009      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe fcbe 	bl	800190c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e13a      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fc4:	601a      	str	r2, [r3, #0]
  return result;
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_RCC_OscConfig+0xdd8>
 8002fda:	4b7e      	ldr	r3, [pc, #504]	@ (80031d4 <HAL_RCC_OscConfig+0xfcc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e027      	b.n	8003030 <HAL_RCC_OscConfig+0xe28>
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fe8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800300e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003026:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	4b69      	ldr	r3, [pc, #420]	@ (80031d4 <HAL_RCC_OscConfig+0xfcc>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003034:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003038:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800303c:	6011      	str	r1, [r2, #0]
 800303e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003042:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	fa92 f1a2 	rbit	r1, r2
 800304c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003050:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003054:	6011      	str	r1, [r2, #0]
  return result;
 8003056:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800305a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f042 0220 	orr.w	r2, r2, #32
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f002 021f 	and.w	r2, r2, #31
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d087      	beq.n	8002f8c <HAL_RCC_OscConfig+0xd84>
 800307c:	e0ca      	b.n	8003214 <HAL_RCC_OscConfig+0x100c>
 800307e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003082:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003086:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003090:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030a2:	601a      	str	r2, [r3, #0]
  return result;
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	461a      	mov	r2, r3
 80030c0:	2300      	movs	r3, #0
 80030c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fc22 	bl	800190c <HAL_GetTick>
 80030c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030cc:	e009      	b.n	80030e2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fe fc1d 	bl	800190c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e099      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003102:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003106:	601a      	str	r2, [r3, #0]
  return result;
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003110:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b3f      	cmp	r3, #63	@ 0x3f
 800311a:	d802      	bhi.n	8003122 <HAL_RCC_OscConfig+0xf1a>
 800311c:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_RCC_OscConfig+0xfcc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e027      	b.n	8003172 <HAL_RCC_OscConfig+0xf6a>
 8003122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003126:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800312a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800312e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003134:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003142:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003150:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003168:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <HAL_RCC_OscConfig+0xfcc>)
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003176:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800317a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800317e:	6011      	str	r1, [r2, #0]
 8003180:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003184:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	fa92 f1a2 	rbit	r1, r2
 800318e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003192:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003196:	6011      	str	r1, [r2, #0]
  return result;
 8003198:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d187      	bne.n	80030ce <HAL_RCC_OscConfig+0xec6>
 80031be:	e029      	b.n	8003214 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d103      	bne.n	80031d8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e020      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
 80031d4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_OscConfig+0x1018>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031fc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003204:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b09e      	sub	sp, #120	@ 0x78
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e154      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b89      	ldr	r3, [pc, #548]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d910      	bls.n	800326c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b86      	ldr	r3, [pc, #536]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4984      	ldr	r1, [pc, #528]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b82      	ldr	r3, [pc, #520]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e13c      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b7b      	ldr	r3, [pc, #492]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4978      	ldr	r1, [pc, #480]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80cd 	beq.w	8003432 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d137      	bne.n	8003310 <HAL_RCC_ClockConfig+0xec>
 80032a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80032b8:	d802      	bhi.n	80032c0 <HAL_RCC_ClockConfig+0x9c>
 80032ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e00f      	b.n	80032e0 <HAL_RCC_ClockConfig+0xbc>
 80032c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80032ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80032d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032dc:	4b62      	ldr	r3, [pc, #392]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032e8:	fa92 f2a2 	rbit	r2, r2
 80032ec:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032f0:	fab2 f282 	clz	r2, r2
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	f042 0220 	orr.w	r2, r2, #32
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f002 021f 	and.w	r2, r2, #31
 8003300:	2101      	movs	r1, #1
 8003302:	fa01 f202 	lsl.w	r2, r1, r2
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d171      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0ea      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d137      	bne.n	8003388 <HAL_RCC_ClockConfig+0x164>
 8003318:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800331c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003330:	d802      	bhi.n	8003338 <HAL_RCC_ClockConfig+0x114>
 8003332:	4b4d      	ldr	r3, [pc, #308]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	e00f      	b.n	8003358 <HAL_RCC_ClockConfig+0x134>
 8003338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800333c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	647b      	str	r3, [r7, #68]	@ 0x44
 8003346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800334a:	643b      	str	r3, [r7, #64]	@ 0x40
 800334c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003354:	4b44      	ldr	r3, [pc, #272]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800335c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800335e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003360:	fa92 f2a2 	rbit	r2, r2
 8003364:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003368:	fab2 f282 	clz	r2, r2
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f042 0220 	orr.w	r2, r2, #32
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	f002 021f 	and.w	r2, r2, #31
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d135      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0ae      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2c2>
 8003388:	2302      	movs	r3, #2
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b3f      	cmp	r3, #63	@ 0x3f
 800339e:	d802      	bhi.n	80033a6 <HAL_RCC_ClockConfig+0x182>
 80033a0:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	e00d      	b.n	80033c2 <HAL_RCC_ClockConfig+0x19e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b2:	2302      	movs	r3, #2
 80033b4:	623b      	str	r3, [r7, #32]
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	2202      	movs	r2, #2
 80033c4:	61ba      	str	r2, [r7, #24]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	fa92 f2a2 	rbit	r2, r2
 80033cc:	617a      	str	r2, [r7, #20]
  return result;
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e07a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 0203 	bic.w	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	491a      	ldr	r1, [pc, #104]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003402:	f7fe fa83 	bl	800190c <HAL_GetTick>
 8003406:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003408:	e00a      	b.n	8003420 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340a:	f7fe fa7f 	bl	800190c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e062      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003420:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_RCC_ClockConfig+0x244>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 020c 	and.w	r2, r3, #12
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	429a      	cmp	r2, r3
 8003430:	d1eb      	bne.n	800340a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d215      	bcs.n	800346c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003440:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f023 0207 	bic.w	r2, r3, #7
 8003448:	4906      	ldr	r1, [pc, #24]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <HAL_RCC_ClockConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d006      	beq.n	800346c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e041      	b.n	80034e6 <HAL_RCC_ClockConfig+0x2c2>
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <HAL_RCC_ClockConfig+0x2cc>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	491a      	ldr	r1, [pc, #104]	@ (80034f0 <HAL_RCC_ClockConfig+0x2cc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b16      	ldr	r3, [pc, #88]	@ (80034f0 <HAL_RCC_ClockConfig+0x2cc>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4912      	ldr	r1, [pc, #72]	@ (80034f0 <HAL_RCC_ClockConfig+0x2cc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034aa:	f000 f829 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_RCC_ClockConfig+0x2cc>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b8:	22f0      	movs	r2, #240	@ 0xf0
 80034ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	fa92 f2a2 	rbit	r2, r2
 80034c2:	60fa      	str	r2, [r7, #12]
  return result;
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	40d3      	lsrs	r3, r2
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <HAL_RCC_ClockConfig+0x2d0>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	fa21 f303 	lsr.w	r3, r1, r3
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <HAL_RCC_ClockConfig+0x2d4>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034da:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <HAL_RCC_ClockConfig+0x2d8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe f9d0 	bl	8001884 <HAL_InitTick>
  
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3778      	adds	r7, #120	@ 0x78
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08005278 	.word	0x08005278
 80034f8:	2000002c 	.word	0x2000002c
 80034fc:	20000080 	.word	0x20000080

08003500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x94>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d002      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x30>
 800352a:	2b08      	cmp	r3, #8
 800352c:	d003      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x36>
 800352e:	e026      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003530:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 8003532:	613b      	str	r3, [r7, #16]
      break;
 8003534:	e026      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0c9b      	lsrs	r3, r3, #18
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	4a17      	ldr	r2, [pc, #92]	@ (800359c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x94>)
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800355c:	4a0e      	ldr	r2, [pc, #56]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	fbb2 f2f3 	udiv	r2, r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e004      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a0c      	ldr	r2, [pc, #48]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	613b      	str	r3, [r7, #16]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 8003580:	613b      	str	r3, [r7, #16]
      break;
 8003582:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003584:	693b      	ldr	r3, [r7, #16]
}
 8003586:	4618      	mov	r0, r3
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	007a1200 	.word	0x007a1200
 800359c:	08005288 	.word	0x08005288
 80035a0:	08005298 	.word	0x08005298
 80035a4:	003d0900 	.word	0x003d0900

080035a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b092      	sub	sp, #72	@ 0x48
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80d2 	beq.w	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a49      	ldr	r2, [pc, #292]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
 80035e4:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b44      	ldr	r3, [pc, #272]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a40      	ldr	r2, [pc, #256]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fe f97d 	bl	800190c <HAL_GetTick>
 8003612:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fe f979 	bl	800190c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	@ 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e167      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003634:	4b33      	ldr	r3, [pc, #204]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8082 	beq.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003650:	429a      	cmp	r2, r3
 8003652:	d07a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003654:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800365e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	4b25      	ldr	r3, [pc, #148]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	2301      	movs	r3, #1
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	461a      	mov	r2, r3
 80036a2:	2300      	movs	r3, #0
 80036a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036a6:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d049      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fe f929 	bl	800190c <HAL_GetTick>
 80036ba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe f925 	bl	800190c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e111      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80036d4:	2302      	movs	r3, #2
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e0:	2302      	movs	r3, #2
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
  return result;
 80036ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036fe:	4b01      	ldr	r3, [pc, #4]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	e00d      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
 800370c:	10908100 	.word	0x10908100
 8003710:	2302      	movs	r3, #2
 8003712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	4b78      	ldr	r3, [pc, #480]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	2202      	movs	r2, #2
 8003722:	613a      	str	r2, [r7, #16]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	fa92 f2a2 	rbit	r2, r2
 800372a:	60fa      	str	r2, [r7, #12]
  return result;
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	fab2 f282 	clz	r2, r2
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f002 021f 	and.w	r2, r2, #31
 800373e:	2101      	movs	r1, #1
 8003740:	fa01 f202 	lsl.w	r2, r1, r2
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0b9      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800374a:	4b6d      	ldr	r3, [pc, #436]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	496a      	ldr	r1, [pc, #424]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003758:	4313      	orrs	r3, r2
 800375a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800375c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003760:	2b01      	cmp	r3, #1
 8003762:	d105      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003764:	4b66      	ldr	r3, [pc, #408]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	4a65      	ldr	r2, [pc, #404]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800376a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800376e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377c:	4b60      	ldr	r3, [pc, #384]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	f023 0203 	bic.w	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	495d      	ldr	r1, [pc, #372]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800379a:	4b59      	ldr	r3, [pc, #356]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4956      	ldr	r1, [pc, #344]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037b8:	4b51      	ldr	r3, [pc, #324]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	494e      	ldr	r1, [pc, #312]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	f023 0210 	bic.w	r2, r3, #16
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4947      	ldr	r1, [pc, #284]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037f4:	4b42      	ldr	r3, [pc, #264]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	493f      	ldr	r1, [pc, #252]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003812:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f023 0220 	bic.w	r2, r3, #32
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4938      	ldr	r1, [pc, #224]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003830:	4b33      	ldr	r3, [pc, #204]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	4930      	ldr	r1, [pc, #192]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800383e:	4313      	orrs	r3, r2
 8003840:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800384e:	4b2c      	ldr	r3, [pc, #176]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4929      	ldr	r1, [pc, #164]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800385c:	4313      	orrs	r3, r2
 800385e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800386c:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	4921      	ldr	r1, [pc, #132]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800388a:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	491a      	ldr	r1, [pc, #104]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003898:	4313      	orrs	r3, r2
 800389a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038a8:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	4912      	ldr	r1, [pc, #72]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	490b      	ldr	r1, [pc, #44]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038e4:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f0:	4903      	ldr	r1, [pc, #12]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3748      	adds	r7, #72	@ 0x48
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40021000 	.word	0x40021000

08003904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e09d      	b.n	8003a52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003926:	d009      	beq.n	800393c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	e005      	b.n	800393c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fa3a 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003972:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800397c:	d902      	bls.n	8003984 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e002      	b.n	800398a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003988:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003992:	d007      	beq.n	80039a4 <HAL_SPI_Init+0xa0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	ea42 0103 	orr.w	r1, r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	f003 0204 	and.w	r2, r3, #4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e049      	b.n	8003b00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fd f9e7 	bl	8000e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f000 fa49 	bl	8003f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x24>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e03c      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x9e>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d109      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x3e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e02f      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x9e>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d109      	bne.n	8003b60 <HAL_TIM_PWM_Start+0x58>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e022      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x9e>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d109      	bne.n	8003b7a <HAL_TIM_PWM_Start+0x72>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	bf14      	ite	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	2300      	moveq	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	e015      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x9e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d109      	bne.n	8003b94 <HAL_TIM_PWM_Start+0x8c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e008      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x9e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e097      	b.n	8003cde <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Start+0xb6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bbc:	e023      	b.n	8003c06 <HAL_TIM_PWM_Start+0xfe>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0xc6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bcc:	e01b      	b.n	8003c06 <HAL_TIM_PWM_Start+0xfe>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start+0xd6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bdc:	e013      	b.n	8003c06 <HAL_TIM_PWM_Start+0xfe>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0xe6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bec:	e00b      	b.n	8003c06 <HAL_TIM_PWM_Start+0xfe>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_PWM_Start+0xf6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bfc:	e003      	b.n	8003c06 <HAL_TIM_PWM_Start+0xfe>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	6839      	ldr	r1, [r7, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fd00 	bl	8004614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a33      	ldr	r2, [pc, #204]	@ (8003ce8 <HAL_TIM_PWM_Start+0x1e0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_TIM_PWM_Start+0x13e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a32      	ldr	r2, [pc, #200]	@ (8003cec <HAL_TIM_PWM_Start+0x1e4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_TIM_PWM_Start+0x13e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a30      	ldr	r2, [pc, #192]	@ (8003cf0 <HAL_TIM_PWM_Start+0x1e8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_TIM_PWM_Start+0x13e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf4 <HAL_TIM_PWM_Start+0x1ec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_TIM_PWM_Start+0x13e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf8 <HAL_TIM_PWM_Start+0x1f0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x142>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_TIM_PWM_Start+0x144>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a20      	ldr	r2, [pc, #128]	@ (8003ce8 <HAL_TIM_PWM_Start+0x1e0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_TIM_PWM_Start+0x194>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c72:	d013      	beq.n	8003c9c <HAL_TIM_PWM_Start+0x194>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a20      	ldr	r2, [pc, #128]	@ (8003cfc <HAL_TIM_PWM_Start+0x1f4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_TIM_PWM_Start+0x194>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1f      	ldr	r2, [pc, #124]	@ (8003d00 <HAL_TIM_PWM_Start+0x1f8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_TIM_PWM_Start+0x194>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a17      	ldr	r2, [pc, #92]	@ (8003cec <HAL_TIM_PWM_Start+0x1e4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_PWM_Start+0x194>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a16      	ldr	r2, [pc, #88]	@ (8003cf0 <HAL_TIM_PWM_Start+0x1e8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d115      	bne.n	8003cc8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	4b18      	ldr	r3, [pc, #96]	@ (8003d04 <HAL_TIM_PWM_Start+0x1fc>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d015      	beq.n	8003cda <HAL_TIM_PWM_Start+0x1d2>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb4:	d011      	beq.n	8003cda <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc6:	e008      	b.n	8003cda <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e000      	b.n	8003cdc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40013400 	.word	0x40013400
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	00010007 	.word	0x00010007

08003d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e0ff      	b.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b14      	cmp	r3, #20
 8003d32:	f200 80f0 	bhi.w	8003f16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d36:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003f17 	.word	0x08003f17
 8003d44:	08003f17 	.word	0x08003f17
 8003d48:	08003f17 	.word	0x08003f17
 8003d4c:	08003dd1 	.word	0x08003dd1
 8003d50:	08003f17 	.word	0x08003f17
 8003d54:	08003f17 	.word	0x08003f17
 8003d58:	08003f17 	.word	0x08003f17
 8003d5c:	08003e13 	.word	0x08003e13
 8003d60:	08003f17 	.word	0x08003f17
 8003d64:	08003f17 	.word	0x08003f17
 8003d68:	08003f17 	.word	0x08003f17
 8003d6c:	08003e53 	.word	0x08003e53
 8003d70:	08003f17 	.word	0x08003f17
 8003d74:	08003f17 	.word	0x08003f17
 8003d78:	08003f17 	.word	0x08003f17
 8003d7c:	08003e95 	.word	0x08003e95
 8003d80:	08003f17 	.word	0x08003f17
 8003d84:	08003f17 	.word	0x08003f17
 8003d88:	08003f17 	.word	0x08003f17
 8003d8c:	08003ed5 	.word	0x08003ed5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f966 	bl	8004068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]
      break;
 8003dce:	e0a5      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f9d6 	bl	8004188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6999      	ldr	r1, [r3, #24]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	619a      	str	r2, [r3, #24]
      break;
 8003e10:	e084      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fa3f 	bl	800429c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0208 	orr.w	r2, r2, #8
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0204 	bic.w	r2, r2, #4
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	61da      	str	r2, [r3, #28]
      break;
 8003e50:	e064      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 faa7 	bl	80043ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	021a      	lsls	r2, r3, #8
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	61da      	str	r2, [r3, #28]
      break;
 8003e92:	e043      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 faf0 	bl	8004480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ed2:	e023      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fb34 	bl	8004548 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f14:	e002      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop

08003f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a42      	ldr	r2, [pc, #264]	@ (800404c <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00f      	beq.n	8003f68 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4e:	d00b      	beq.n	8003f68 <TIM_Base_SetConfig+0x38>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3f      	ldr	r2, [pc, #252]	@ (8004050 <TIM_Base_SetConfig+0x120>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d007      	beq.n	8003f68 <TIM_Base_SetConfig+0x38>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8004054 <TIM_Base_SetConfig+0x124>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_Base_SetConfig+0x38>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a3d      	ldr	r2, [pc, #244]	@ (8004058 <TIM_Base_SetConfig+0x128>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d108      	bne.n	8003f7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a33      	ldr	r2, [pc, #204]	@ (800404c <TIM_Base_SetConfig+0x11c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01b      	beq.n	8003fba <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f88:	d017      	beq.n	8003fba <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a30      	ldr	r2, [pc, #192]	@ (8004050 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2f      	ldr	r2, [pc, #188]	@ (8004054 <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00f      	beq.n	8003fba <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004058 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <TIM_Base_SetConfig+0x8a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <TIM_Base_SetConfig+0x8a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_Base_SetConfig+0x8a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004064 <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a16      	ldr	r2, [pc, #88]	@ (800404c <TIM_Base_SetConfig+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00f      	beq.n	8004018 <TIM_Base_SetConfig+0xe8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <TIM_Base_SetConfig+0x128>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_Base_SetConfig+0xe8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a16      	ldr	r2, [pc, #88]	@ (800405c <TIM_Base_SetConfig+0x12c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0xe8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <TIM_Base_SetConfig+0x130>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0xe8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a14      	ldr	r2, [pc, #80]	@ (8004064 <TIM_Base_SetConfig+0x134>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d103      	bne.n	8004020 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	611a      	str	r2, [r3, #16]
  }
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40013400 	.word	0x40013400
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f023 0201 	bic.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 0302 	bic.w	r3, r3, #2
 80040b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004174 <TIM_OC1_SetConfig+0x10c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00f      	beq.n	80040e8 <TIM_OC1_SetConfig+0x80>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004178 <TIM_OC1_SetConfig+0x110>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <TIM_OC1_SetConfig+0x80>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a2a      	ldr	r2, [pc, #168]	@ (800417c <TIM_OC1_SetConfig+0x114>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_OC1_SetConfig+0x80>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a29      	ldr	r2, [pc, #164]	@ (8004180 <TIM_OC1_SetConfig+0x118>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC1_SetConfig+0x80>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a28      	ldr	r2, [pc, #160]	@ (8004184 <TIM_OC1_SetConfig+0x11c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10c      	bne.n	8004102 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0308 	bic.w	r3, r3, #8
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0304 	bic.w	r3, r3, #4
 8004100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1b      	ldr	r2, [pc, #108]	@ (8004174 <TIM_OC1_SetConfig+0x10c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_OC1_SetConfig+0xc2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <TIM_OC1_SetConfig+0x110>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_OC1_SetConfig+0xc2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a19      	ldr	r2, [pc, #100]	@ (800417c <TIM_OC1_SetConfig+0x114>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_OC1_SetConfig+0xc2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a18      	ldr	r2, [pc, #96]	@ (8004180 <TIM_OC1_SetConfig+0x118>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_OC1_SetConfig+0xc2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a17      	ldr	r2, [pc, #92]	@ (8004184 <TIM_OC1_SetConfig+0x11c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d111      	bne.n	800414e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	621a      	str	r2, [r3, #32]
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f023 0210 	bic.w	r2, r3, #16
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0320 	bic.w	r3, r3, #32
 80041d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a28      	ldr	r2, [pc, #160]	@ (8004288 <TIM_OC2_SetConfig+0x100>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC2_SetConfig+0x6c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a27      	ldr	r2, [pc, #156]	@ (800428c <TIM_OC2_SetConfig+0x104>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10d      	bne.n	8004210 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800420e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a1d      	ldr	r2, [pc, #116]	@ (8004288 <TIM_OC2_SetConfig+0x100>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00f      	beq.n	8004238 <TIM_OC2_SetConfig+0xb0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a1c      	ldr	r2, [pc, #112]	@ (800428c <TIM_OC2_SetConfig+0x104>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00b      	beq.n	8004238 <TIM_OC2_SetConfig+0xb0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <TIM_OC2_SetConfig+0x108>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_OC2_SetConfig+0xb0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a1a      	ldr	r2, [pc, #104]	@ (8004294 <TIM_OC2_SetConfig+0x10c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_OC2_SetConfig+0xb0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <TIM_OC2_SetConfig+0x110>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d113      	bne.n	8004260 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800423e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004246:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a27      	ldr	r2, [pc, #156]	@ (8004398 <TIM_OC3_SetConfig+0xfc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_OC3_SetConfig+0x6a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a26      	ldr	r2, [pc, #152]	@ (800439c <TIM_OC3_SetConfig+0x100>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10d      	bne.n	8004322 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800430c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004320:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1c      	ldr	r2, [pc, #112]	@ (8004398 <TIM_OC3_SetConfig+0xfc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00f      	beq.n	800434a <TIM_OC3_SetConfig+0xae>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <TIM_OC3_SetConfig+0x100>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_OC3_SetConfig+0xae>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1a      	ldr	r2, [pc, #104]	@ (80043a0 <TIM_OC3_SetConfig+0x104>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_OC3_SetConfig+0xae>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <TIM_OC3_SetConfig+0x108>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_OC3_SetConfig+0xae>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <TIM_OC3_SetConfig+0x10c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d113      	bne.n	8004372 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40013400 	.word	0x40013400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a18      	ldr	r2, [pc, #96]	@ (800446c <TIM_OC4_SetConfig+0xc0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00f      	beq.n	8004430 <TIM_OC4_SetConfig+0x84>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <TIM_OC4_SetConfig+0xc4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00b      	beq.n	8004430 <TIM_OC4_SetConfig+0x84>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a16      	ldr	r2, [pc, #88]	@ (8004474 <TIM_OC4_SetConfig+0xc8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <TIM_OC4_SetConfig+0x84>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <TIM_OC4_SetConfig+0xcc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_OC4_SetConfig+0x84>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a14      	ldr	r2, [pc, #80]	@ (800447c <TIM_OC4_SetConfig+0xd0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d109      	bne.n	8004444 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40013400 	.word	0x40013400
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a17      	ldr	r2, [pc, #92]	@ (8004534 <TIM_OC5_SetConfig+0xb4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00f      	beq.n	80044fa <TIM_OC5_SetConfig+0x7a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a16      	ldr	r2, [pc, #88]	@ (8004538 <TIM_OC5_SetConfig+0xb8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <TIM_OC5_SetConfig+0x7a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a15      	ldr	r2, [pc, #84]	@ (800453c <TIM_OC5_SetConfig+0xbc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <TIM_OC5_SetConfig+0x7a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a14      	ldr	r2, [pc, #80]	@ (8004540 <TIM_OC5_SetConfig+0xc0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_OC5_SetConfig+0x7a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <TIM_OC5_SetConfig+0xc4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d109      	bne.n	800450e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	621a      	str	r2, [r3, #32]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800

08004548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800458e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	051b      	lsls	r3, r3, #20
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <TIM_OC6_SetConfig+0xb8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00f      	beq.n	80045c4 <TIM_OC6_SetConfig+0x7c>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <TIM_OC6_SetConfig+0xbc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_OC6_SetConfig+0x7c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a16      	ldr	r2, [pc, #88]	@ (8004608 <TIM_OC6_SetConfig+0xc0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_OC6_SetConfig+0x7c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a15      	ldr	r2, [pc, #84]	@ (800460c <TIM_OC6_SetConfig+0xc4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC6_SetConfig+0x7c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a14      	ldr	r2, [pc, #80]	@ (8004610 <TIM_OC6_SetConfig+0xc8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d109      	bne.n	80045d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	029b      	lsls	r3, r3, #10
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40013400 	.word	0x40013400
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2201      	movs	r2, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 031f 	and.w	r3, r3, #31
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004674:	2302      	movs	r3, #2
 8004676:	e063      	b.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2b      	ldr	r2, [pc, #172]	@ (800474c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d108      	bne.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1b      	ldr	r2, [pc, #108]	@ (800474c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ea:	d013      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a12      	ldr	r2, [pc, #72]	@ (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a13      	ldr	r2, [pc, #76]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10c      	bne.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800471a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40013400 	.word	0x40013400
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40014000 	.word	0x40014000

08004760 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004768:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800476c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	b29b      	uxth	r3, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	b29b      	uxth	r3, r3
 800477e:	4013      	ands	r3, r2
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <calloc>:
 80047d4:	4b02      	ldr	r3, [pc, #8]	@ (80047e0 <calloc+0xc>)
 80047d6:	460a      	mov	r2, r1
 80047d8:	4601      	mov	r1, r0
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	f000 b802 	b.w	80047e4 <_calloc_r>
 80047e0:	20000088 	.word	0x20000088

080047e4 <_calloc_r>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	fba1 5402 	umull	r5, r4, r1, r2
 80047ea:	b934      	cbnz	r4, 80047fa <_calloc_r+0x16>
 80047ec:	4629      	mov	r1, r5
 80047ee:	f000 f849 	bl	8004884 <_malloc_r>
 80047f2:	4606      	mov	r6, r0
 80047f4:	b928      	cbnz	r0, 8004802 <_calloc_r+0x1e>
 80047f6:	4630      	mov	r0, r6
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	220c      	movs	r2, #12
 80047fc:	6002      	str	r2, [r0, #0]
 80047fe:	2600      	movs	r6, #0
 8004800:	e7f9      	b.n	80047f6 <_calloc_r+0x12>
 8004802:	462a      	mov	r2, r5
 8004804:	4621      	mov	r1, r4
 8004806:	f000 f919 	bl	8004a3c <memset>
 800480a:	e7f4      	b.n	80047f6 <_calloc_r+0x12>

0800480c <exit>:
 800480c:	b508      	push	{r3, lr}
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <exit+0x1c>)
 8004810:	4604      	mov	r4, r0
 8004812:	b113      	cbz	r3, 800481a <exit+0xe>
 8004814:	2100      	movs	r1, #0
 8004816:	f3af 8000 	nop.w
 800481a:	4b04      	ldr	r3, [pc, #16]	@ (800482c <exit+0x20>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	b103      	cbz	r3, 8004822 <exit+0x16>
 8004820:	4798      	blx	r3
 8004822:	4620      	mov	r0, r4
 8004824:	f7fc fc52 	bl	80010cc <_exit>
 8004828:	00000000 	.word	0x00000000
 800482c:	2000064c 	.word	0x2000064c

08004830 <free>:
 8004830:	4b02      	ldr	r3, [pc, #8]	@ (800483c <free+0xc>)
 8004832:	4601      	mov	r1, r0
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	f000 b963 	b.w	8004b00 <_free_r>
 800483a:	bf00      	nop
 800483c:	20000088 	.word	0x20000088

08004840 <sbrk_aligned>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4e0f      	ldr	r6, [pc, #60]	@ (8004880 <sbrk_aligned+0x40>)
 8004844:	460c      	mov	r4, r1
 8004846:	6831      	ldr	r1, [r6, #0]
 8004848:	4605      	mov	r5, r0
 800484a:	b911      	cbnz	r1, 8004852 <sbrk_aligned+0x12>
 800484c:	f000 f90e 	bl	8004a6c <_sbrk_r>
 8004850:	6030      	str	r0, [r6, #0]
 8004852:	4621      	mov	r1, r4
 8004854:	4628      	mov	r0, r5
 8004856:	f000 f909 	bl	8004a6c <_sbrk_r>
 800485a:	1c43      	adds	r3, r0, #1
 800485c:	d103      	bne.n	8004866 <sbrk_aligned+0x26>
 800485e:	f04f 34ff 	mov.w	r4, #4294967295
 8004862:	4620      	mov	r0, r4
 8004864:	bd70      	pop	{r4, r5, r6, pc}
 8004866:	1cc4      	adds	r4, r0, #3
 8004868:	f024 0403 	bic.w	r4, r4, #3
 800486c:	42a0      	cmp	r0, r4
 800486e:	d0f8      	beq.n	8004862 <sbrk_aligned+0x22>
 8004870:	1a21      	subs	r1, r4, r0
 8004872:	4628      	mov	r0, r5
 8004874:	f000 f8fa 	bl	8004a6c <_sbrk_r>
 8004878:	3001      	adds	r0, #1
 800487a:	d1f2      	bne.n	8004862 <sbrk_aligned+0x22>
 800487c:	e7ef      	b.n	800485e <sbrk_aligned+0x1e>
 800487e:	bf00      	nop
 8004880:	2000050c 	.word	0x2000050c

08004884 <_malloc_r>:
 8004884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004888:	1ccd      	adds	r5, r1, #3
 800488a:	f025 0503 	bic.w	r5, r5, #3
 800488e:	3508      	adds	r5, #8
 8004890:	2d0c      	cmp	r5, #12
 8004892:	bf38      	it	cc
 8004894:	250c      	movcc	r5, #12
 8004896:	2d00      	cmp	r5, #0
 8004898:	4606      	mov	r6, r0
 800489a:	db01      	blt.n	80048a0 <_malloc_r+0x1c>
 800489c:	42a9      	cmp	r1, r5
 800489e:	d904      	bls.n	80048aa <_malloc_r+0x26>
 80048a0:	230c      	movs	r3, #12
 80048a2:	6033      	str	r3, [r6, #0]
 80048a4:	2000      	movs	r0, #0
 80048a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004980 <_malloc_r+0xfc>
 80048ae:	f000 f869 	bl	8004984 <__malloc_lock>
 80048b2:	f8d8 3000 	ldr.w	r3, [r8]
 80048b6:	461c      	mov	r4, r3
 80048b8:	bb44      	cbnz	r4, 800490c <_malloc_r+0x88>
 80048ba:	4629      	mov	r1, r5
 80048bc:	4630      	mov	r0, r6
 80048be:	f7ff ffbf 	bl	8004840 <sbrk_aligned>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	4604      	mov	r4, r0
 80048c6:	d158      	bne.n	800497a <_malloc_r+0xf6>
 80048c8:	f8d8 4000 	ldr.w	r4, [r8]
 80048cc:	4627      	mov	r7, r4
 80048ce:	2f00      	cmp	r7, #0
 80048d0:	d143      	bne.n	800495a <_malloc_r+0xd6>
 80048d2:	2c00      	cmp	r4, #0
 80048d4:	d04b      	beq.n	800496e <_malloc_r+0xea>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4639      	mov	r1, r7
 80048da:	4630      	mov	r0, r6
 80048dc:	eb04 0903 	add.w	r9, r4, r3
 80048e0:	f000 f8c4 	bl	8004a6c <_sbrk_r>
 80048e4:	4581      	cmp	r9, r0
 80048e6:	d142      	bne.n	800496e <_malloc_r+0xea>
 80048e8:	6821      	ldr	r1, [r4, #0]
 80048ea:	1a6d      	subs	r5, r5, r1
 80048ec:	4629      	mov	r1, r5
 80048ee:	4630      	mov	r0, r6
 80048f0:	f7ff ffa6 	bl	8004840 <sbrk_aligned>
 80048f4:	3001      	adds	r0, #1
 80048f6:	d03a      	beq.n	800496e <_malloc_r+0xea>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	442b      	add	r3, r5
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	bb62      	cbnz	r2, 8004960 <_malloc_r+0xdc>
 8004906:	f8c8 7000 	str.w	r7, [r8]
 800490a:	e00f      	b.n	800492c <_malloc_r+0xa8>
 800490c:	6822      	ldr	r2, [r4, #0]
 800490e:	1b52      	subs	r2, r2, r5
 8004910:	d420      	bmi.n	8004954 <_malloc_r+0xd0>
 8004912:	2a0b      	cmp	r2, #11
 8004914:	d917      	bls.n	8004946 <_malloc_r+0xc2>
 8004916:	1961      	adds	r1, r4, r5
 8004918:	42a3      	cmp	r3, r4
 800491a:	6025      	str	r5, [r4, #0]
 800491c:	bf18      	it	ne
 800491e:	6059      	strne	r1, [r3, #4]
 8004920:	6863      	ldr	r3, [r4, #4]
 8004922:	bf08      	it	eq
 8004924:	f8c8 1000 	streq.w	r1, [r8]
 8004928:	5162      	str	r2, [r4, r5]
 800492a:	604b      	str	r3, [r1, #4]
 800492c:	4630      	mov	r0, r6
 800492e:	f000 f82f 	bl	8004990 <__malloc_unlock>
 8004932:	f104 000b 	add.w	r0, r4, #11
 8004936:	1d23      	adds	r3, r4, #4
 8004938:	f020 0007 	bic.w	r0, r0, #7
 800493c:	1ac2      	subs	r2, r0, r3
 800493e:	bf1c      	itt	ne
 8004940:	1a1b      	subne	r3, r3, r0
 8004942:	50a3      	strne	r3, [r4, r2]
 8004944:	e7af      	b.n	80048a6 <_malloc_r+0x22>
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	42a3      	cmp	r3, r4
 800494a:	bf0c      	ite	eq
 800494c:	f8c8 2000 	streq.w	r2, [r8]
 8004950:	605a      	strne	r2, [r3, #4]
 8004952:	e7eb      	b.n	800492c <_malloc_r+0xa8>
 8004954:	4623      	mov	r3, r4
 8004956:	6864      	ldr	r4, [r4, #4]
 8004958:	e7ae      	b.n	80048b8 <_malloc_r+0x34>
 800495a:	463c      	mov	r4, r7
 800495c:	687f      	ldr	r7, [r7, #4]
 800495e:	e7b6      	b.n	80048ce <_malloc_r+0x4a>
 8004960:	461a      	mov	r2, r3
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	42a3      	cmp	r3, r4
 8004966:	d1fb      	bne.n	8004960 <_malloc_r+0xdc>
 8004968:	2300      	movs	r3, #0
 800496a:	6053      	str	r3, [r2, #4]
 800496c:	e7de      	b.n	800492c <_malloc_r+0xa8>
 800496e:	230c      	movs	r3, #12
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	4630      	mov	r0, r6
 8004974:	f000 f80c 	bl	8004990 <__malloc_unlock>
 8004978:	e794      	b.n	80048a4 <_malloc_r+0x20>
 800497a:	6005      	str	r5, [r0, #0]
 800497c:	e7d6      	b.n	800492c <_malloc_r+0xa8>
 800497e:	bf00      	nop
 8004980:	20000510 	.word	0x20000510

08004984 <__malloc_lock>:
 8004984:	4801      	ldr	r0, [pc, #4]	@ (800498c <__malloc_lock+0x8>)
 8004986:	f000 b8ab 	b.w	8004ae0 <__retarget_lock_acquire_recursive>
 800498a:	bf00      	nop
 800498c:	20000654 	.word	0x20000654

08004990 <__malloc_unlock>:
 8004990:	4801      	ldr	r0, [pc, #4]	@ (8004998 <__malloc_unlock+0x8>)
 8004992:	f000 b8a6 	b.w	8004ae2 <__retarget_lock_release_recursive>
 8004996:	bf00      	nop
 8004998:	20000654 	.word	0x20000654

0800499c <_realloc_r>:
 800499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a0:	4607      	mov	r7, r0
 80049a2:	4614      	mov	r4, r2
 80049a4:	460d      	mov	r5, r1
 80049a6:	b921      	cbnz	r1, 80049b2 <_realloc_r+0x16>
 80049a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ac:	4611      	mov	r1, r2
 80049ae:	f7ff bf69 	b.w	8004884 <_malloc_r>
 80049b2:	b92a      	cbnz	r2, 80049c0 <_realloc_r+0x24>
 80049b4:	f000 f8a4 	bl	8004b00 <_free_r>
 80049b8:	4625      	mov	r5, r4
 80049ba:	4628      	mov	r0, r5
 80049bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049c0:	f000 f8e8 	bl	8004b94 <_malloc_usable_size_r>
 80049c4:	4284      	cmp	r4, r0
 80049c6:	4606      	mov	r6, r0
 80049c8:	d802      	bhi.n	80049d0 <_realloc_r+0x34>
 80049ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049ce:	d8f4      	bhi.n	80049ba <_realloc_r+0x1e>
 80049d0:	4621      	mov	r1, r4
 80049d2:	4638      	mov	r0, r7
 80049d4:	f7ff ff56 	bl	8004884 <_malloc_r>
 80049d8:	4680      	mov	r8, r0
 80049da:	b908      	cbnz	r0, 80049e0 <_realloc_r+0x44>
 80049dc:	4645      	mov	r5, r8
 80049de:	e7ec      	b.n	80049ba <_realloc_r+0x1e>
 80049e0:	42b4      	cmp	r4, r6
 80049e2:	4622      	mov	r2, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	bf28      	it	cs
 80049e8:	4632      	movcs	r2, r6
 80049ea:	f000 f87b 	bl	8004ae4 <memcpy>
 80049ee:	4629      	mov	r1, r5
 80049f0:	4638      	mov	r0, r7
 80049f2:	f000 f885 	bl	8004b00 <_free_r>
 80049f6:	e7f1      	b.n	80049dc <_realloc_r+0x40>

080049f8 <siprintf>:
 80049f8:	b40e      	push	{r1, r2, r3}
 80049fa:	b510      	push	{r4, lr}
 80049fc:	b09d      	sub	sp, #116	@ 0x74
 80049fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004a00:	9002      	str	r0, [sp, #8]
 8004a02:	9006      	str	r0, [sp, #24]
 8004a04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a08:	480a      	ldr	r0, [pc, #40]	@ (8004a34 <siprintf+0x3c>)
 8004a0a:	9107      	str	r1, [sp, #28]
 8004a0c:	9104      	str	r1, [sp, #16]
 8004a0e:	490a      	ldr	r1, [pc, #40]	@ (8004a38 <siprintf+0x40>)
 8004a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a14:	9105      	str	r1, [sp, #20]
 8004a16:	2400      	movs	r4, #0
 8004a18:	a902      	add	r1, sp, #8
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004a20:	f000 f91c 	bl	8004c5c <_svfiprintf_r>
 8004a24:	9b02      	ldr	r3, [sp, #8]
 8004a26:	701c      	strb	r4, [r3, #0]
 8004a28:	b01d      	add	sp, #116	@ 0x74
 8004a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a2e:	b003      	add	sp, #12
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000088 	.word	0x20000088
 8004a38:	ffff0208 	.word	0xffff0208

08004a3c <memset>:
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d100      	bne.n	8004a46 <memset+0xa>
 8004a44:	4770      	bx	lr
 8004a46:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4a:	e7f9      	b.n	8004a40 <memset+0x4>

08004a4c <strcat>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	4602      	mov	r2, r0
 8004a50:	7814      	ldrb	r4, [r2, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	3201      	adds	r2, #1
 8004a56:	2c00      	cmp	r4, #0
 8004a58:	d1fa      	bne.n	8004a50 <strcat+0x4>
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	d1f9      	bne.n	8004a5c <strcat+0x10>
 8004a68:	bd10      	pop	{r4, pc}
	...

08004a6c <_sbrk_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d06      	ldr	r5, [pc, #24]	@ (8004a88 <_sbrk_r+0x1c>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	f7fc fb34 	bl	80010e4 <_sbrk>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_sbrk_r+0x1a>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_sbrk_r+0x1a>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	20000650 	.word	0x20000650

08004a8c <__errno>:
 8004a8c:	4b01      	ldr	r3, [pc, #4]	@ (8004a94 <__errno+0x8>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000088 	.word	0x20000088

08004a98 <__libc_init_array>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ad0 <__libc_init_array+0x38>)
 8004a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ad4 <__libc_init_array+0x3c>)
 8004a9e:	1b64      	subs	r4, r4, r5
 8004aa0:	10a4      	asrs	r4, r4, #2
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	42a6      	cmp	r6, r4
 8004aa6:	d109      	bne.n	8004abc <__libc_init_array+0x24>
 8004aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ad8 <__libc_init_array+0x40>)
 8004aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8004adc <__libc_init_array+0x44>)
 8004aac:	f000 fb78 	bl	80051a0 <_init>
 8004ab0:	1b64      	subs	r4, r4, r5
 8004ab2:	10a4      	asrs	r4, r4, #2
 8004ab4:	2600      	movs	r6, #0
 8004ab6:	42a6      	cmp	r6, r4
 8004ab8:	d105      	bne.n	8004ac6 <__libc_init_array+0x2e>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac0:	4798      	blx	r3
 8004ac2:	3601      	adds	r6, #1
 8004ac4:	e7ee      	b.n	8004aa4 <__libc_init_array+0xc>
 8004ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aca:	4798      	blx	r3
 8004acc:	3601      	adds	r6, #1
 8004ace:	e7f2      	b.n	8004ab6 <__libc_init_array+0x1e>
 8004ad0:	080052e4 	.word	0x080052e4
 8004ad4:	080052e4 	.word	0x080052e4
 8004ad8:	080052e4 	.word	0x080052e4
 8004adc:	080052e8 	.word	0x080052e8

08004ae0 <__retarget_lock_acquire_recursive>:
 8004ae0:	4770      	bx	lr

08004ae2 <__retarget_lock_release_recursive>:
 8004ae2:	4770      	bx	lr

08004ae4 <memcpy>:
 8004ae4:	440a      	add	r2, r1
 8004ae6:	4291      	cmp	r1, r2
 8004ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aec:	d100      	bne.n	8004af0 <memcpy+0xc>
 8004aee:	4770      	bx	lr
 8004af0:	b510      	push	{r4, lr}
 8004af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004afa:	4291      	cmp	r1, r2
 8004afc:	d1f9      	bne.n	8004af2 <memcpy+0xe>
 8004afe:	bd10      	pop	{r4, pc}

08004b00 <_free_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4605      	mov	r5, r0
 8004b04:	2900      	cmp	r1, #0
 8004b06:	d041      	beq.n	8004b8c <_free_r+0x8c>
 8004b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b0c:	1f0c      	subs	r4, r1, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfb8      	it	lt
 8004b12:	18e4      	addlt	r4, r4, r3
 8004b14:	f7ff ff36 	bl	8004984 <__malloc_lock>
 8004b18:	4a1d      	ldr	r2, [pc, #116]	@ (8004b90 <_free_r+0x90>)
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	b933      	cbnz	r3, 8004b2c <_free_r+0x2c>
 8004b1e:	6063      	str	r3, [r4, #4]
 8004b20:	6014      	str	r4, [r2, #0]
 8004b22:	4628      	mov	r0, r5
 8004b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b28:	f7ff bf32 	b.w	8004990 <__malloc_unlock>
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d908      	bls.n	8004b42 <_free_r+0x42>
 8004b30:	6820      	ldr	r0, [r4, #0]
 8004b32:	1821      	adds	r1, r4, r0
 8004b34:	428b      	cmp	r3, r1
 8004b36:	bf01      	itttt	eq
 8004b38:	6819      	ldreq	r1, [r3, #0]
 8004b3a:	685b      	ldreq	r3, [r3, #4]
 8004b3c:	1809      	addeq	r1, r1, r0
 8004b3e:	6021      	streq	r1, [r4, #0]
 8004b40:	e7ed      	b.n	8004b1e <_free_r+0x1e>
 8004b42:	461a      	mov	r2, r3
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b10b      	cbz	r3, 8004b4c <_free_r+0x4c>
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	d9fa      	bls.n	8004b42 <_free_r+0x42>
 8004b4c:	6811      	ldr	r1, [r2, #0]
 8004b4e:	1850      	adds	r0, r2, r1
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d10b      	bne.n	8004b6c <_free_r+0x6c>
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	4401      	add	r1, r0
 8004b58:	1850      	adds	r0, r2, r1
 8004b5a:	4283      	cmp	r3, r0
 8004b5c:	6011      	str	r1, [r2, #0]
 8004b5e:	d1e0      	bne.n	8004b22 <_free_r+0x22>
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	6053      	str	r3, [r2, #4]
 8004b66:	4408      	add	r0, r1
 8004b68:	6010      	str	r0, [r2, #0]
 8004b6a:	e7da      	b.n	8004b22 <_free_r+0x22>
 8004b6c:	d902      	bls.n	8004b74 <_free_r+0x74>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	e7d6      	b.n	8004b22 <_free_r+0x22>
 8004b74:	6820      	ldr	r0, [r4, #0]
 8004b76:	1821      	adds	r1, r4, r0
 8004b78:	428b      	cmp	r3, r1
 8004b7a:	bf04      	itt	eq
 8004b7c:	6819      	ldreq	r1, [r3, #0]
 8004b7e:	685b      	ldreq	r3, [r3, #4]
 8004b80:	6063      	str	r3, [r4, #4]
 8004b82:	bf04      	itt	eq
 8004b84:	1809      	addeq	r1, r1, r0
 8004b86:	6021      	streq	r1, [r4, #0]
 8004b88:	6054      	str	r4, [r2, #4]
 8004b8a:	e7ca      	b.n	8004b22 <_free_r+0x22>
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000510 	.word	0x20000510

08004b94 <_malloc_usable_size_r>:
 8004b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b98:	1f18      	subs	r0, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bfbc      	itt	lt
 8004b9e:	580b      	ldrlt	r3, [r1, r0]
 8004ba0:	18c0      	addlt	r0, r0, r3
 8004ba2:	4770      	bx	lr

08004ba4 <__ssputs_r>:
 8004ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	688e      	ldr	r6, [r1, #8]
 8004baa:	461f      	mov	r7, r3
 8004bac:	42be      	cmp	r6, r7
 8004bae:	680b      	ldr	r3, [r1, #0]
 8004bb0:	4682      	mov	sl, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	4690      	mov	r8, r2
 8004bb6:	d82d      	bhi.n	8004c14 <__ssputs_r+0x70>
 8004bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bc0:	d026      	beq.n	8004c10 <__ssputs_r+0x6c>
 8004bc2:	6965      	ldr	r5, [r4, #20]
 8004bc4:	6909      	ldr	r1, [r1, #16]
 8004bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bca:	eba3 0901 	sub.w	r9, r3, r1
 8004bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bd2:	1c7b      	adds	r3, r7, #1
 8004bd4:	444b      	add	r3, r9
 8004bd6:	106d      	asrs	r5, r5, #1
 8004bd8:	429d      	cmp	r5, r3
 8004bda:	bf38      	it	cc
 8004bdc:	461d      	movcc	r5, r3
 8004bde:	0553      	lsls	r3, r2, #21
 8004be0:	d527      	bpl.n	8004c32 <__ssputs_r+0x8e>
 8004be2:	4629      	mov	r1, r5
 8004be4:	f7ff fe4e 	bl	8004884 <_malloc_r>
 8004be8:	4606      	mov	r6, r0
 8004bea:	b360      	cbz	r0, 8004c46 <__ssputs_r+0xa2>
 8004bec:	6921      	ldr	r1, [r4, #16]
 8004bee:	464a      	mov	r2, r9
 8004bf0:	f7ff ff78 	bl	8004ae4 <memcpy>
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	6126      	str	r6, [r4, #16]
 8004c02:	6165      	str	r5, [r4, #20]
 8004c04:	444e      	add	r6, r9
 8004c06:	eba5 0509 	sub.w	r5, r5, r9
 8004c0a:	6026      	str	r6, [r4, #0]
 8004c0c:	60a5      	str	r5, [r4, #8]
 8004c0e:	463e      	mov	r6, r7
 8004c10:	42be      	cmp	r6, r7
 8004c12:	d900      	bls.n	8004c16 <__ssputs_r+0x72>
 8004c14:	463e      	mov	r6, r7
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	4632      	mov	r2, r6
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	f000 faa6 	bl	800516c <memmove>
 8004c20:	68a3      	ldr	r3, [r4, #8]
 8004c22:	1b9b      	subs	r3, r3, r6
 8004c24:	60a3      	str	r3, [r4, #8]
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	4433      	add	r3, r6
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c32:	462a      	mov	r2, r5
 8004c34:	f7ff feb2 	bl	800499c <_realloc_r>
 8004c38:	4606      	mov	r6, r0
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d1e0      	bne.n	8004c00 <__ssputs_r+0x5c>
 8004c3e:	6921      	ldr	r1, [r4, #16]
 8004c40:	4650      	mov	r0, sl
 8004c42:	f7ff ff5d 	bl	8004b00 <_free_r>
 8004c46:	230c      	movs	r3, #12
 8004c48:	f8ca 3000 	str.w	r3, [sl]
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	e7e9      	b.n	8004c2e <__ssputs_r+0x8a>
	...

08004c5c <_svfiprintf_r>:
 8004c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c60:	4698      	mov	r8, r3
 8004c62:	898b      	ldrh	r3, [r1, #12]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	b09d      	sub	sp, #116	@ 0x74
 8004c68:	4607      	mov	r7, r0
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	d510      	bpl.n	8004c92 <_svfiprintf_r+0x36>
 8004c70:	690b      	ldr	r3, [r1, #16]
 8004c72:	b973      	cbnz	r3, 8004c92 <_svfiprintf_r+0x36>
 8004c74:	2140      	movs	r1, #64	@ 0x40
 8004c76:	f7ff fe05 	bl	8004884 <_malloc_r>
 8004c7a:	6028      	str	r0, [r5, #0]
 8004c7c:	6128      	str	r0, [r5, #16]
 8004c7e:	b930      	cbnz	r0, 8004c8e <_svfiprintf_r+0x32>
 8004c80:	230c      	movs	r3, #12
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	b01d      	add	sp, #116	@ 0x74
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8e:	2340      	movs	r3, #64	@ 0x40
 8004c90:	616b      	str	r3, [r5, #20]
 8004c92:	2300      	movs	r3, #0
 8004c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c96:	2320      	movs	r3, #32
 8004c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ca0:	2330      	movs	r3, #48	@ 0x30
 8004ca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e40 <_svfiprintf_r+0x1e4>
 8004ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004caa:	f04f 0901 	mov.w	r9, #1
 8004cae:	4623      	mov	r3, r4
 8004cb0:	469a      	mov	sl, r3
 8004cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cb6:	b10a      	cbz	r2, 8004cbc <_svfiprintf_r+0x60>
 8004cb8:	2a25      	cmp	r2, #37	@ 0x25
 8004cba:	d1f9      	bne.n	8004cb0 <_svfiprintf_r+0x54>
 8004cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8004cc0:	d00b      	beq.n	8004cda <_svfiprintf_r+0x7e>
 8004cc2:	465b      	mov	r3, fp
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ff6b 	bl	8004ba4 <__ssputs_r>
 8004cce:	3001      	adds	r0, #1
 8004cd0:	f000 80a7 	beq.w	8004e22 <_svfiprintf_r+0x1c6>
 8004cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cd6:	445a      	add	r2, fp
 8004cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cda:	f89a 3000 	ldrb.w	r3, [sl]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 809f 	beq.w	8004e22 <_svfiprintf_r+0x1c6>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cee:	f10a 0a01 	add.w	sl, sl, #1
 8004cf2:	9304      	str	r3, [sp, #16]
 8004cf4:	9307      	str	r3, [sp, #28]
 8004cf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cfc:	4654      	mov	r4, sl
 8004cfe:	2205      	movs	r2, #5
 8004d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d04:	484e      	ldr	r0, [pc, #312]	@ (8004e40 <_svfiprintf_r+0x1e4>)
 8004d06:	f7fb fa6b 	bl	80001e0 <memchr>
 8004d0a:	9a04      	ldr	r2, [sp, #16]
 8004d0c:	b9d8      	cbnz	r0, 8004d46 <_svfiprintf_r+0xea>
 8004d0e:	06d0      	lsls	r0, r2, #27
 8004d10:	bf44      	itt	mi
 8004d12:	2320      	movmi	r3, #32
 8004d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d18:	0711      	lsls	r1, r2, #28
 8004d1a:	bf44      	itt	mi
 8004d1c:	232b      	movmi	r3, #43	@ 0x2b
 8004d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d22:	f89a 3000 	ldrb.w	r3, [sl]
 8004d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d28:	d015      	beq.n	8004d56 <_svfiprintf_r+0xfa>
 8004d2a:	9a07      	ldr	r2, [sp, #28]
 8004d2c:	4654      	mov	r4, sl
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f04f 0c0a 	mov.w	ip, #10
 8004d34:	4621      	mov	r1, r4
 8004d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d3a:	3b30      	subs	r3, #48	@ 0x30
 8004d3c:	2b09      	cmp	r3, #9
 8004d3e:	d94b      	bls.n	8004dd8 <_svfiprintf_r+0x17c>
 8004d40:	b1b0      	cbz	r0, 8004d70 <_svfiprintf_r+0x114>
 8004d42:	9207      	str	r2, [sp, #28]
 8004d44:	e014      	b.n	8004d70 <_svfiprintf_r+0x114>
 8004d46:	eba0 0308 	sub.w	r3, r0, r8
 8004d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	46a2      	mov	sl, r4
 8004d54:	e7d2      	b.n	8004cfc <_svfiprintf_r+0xa0>
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	1d19      	adds	r1, r3, #4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	9103      	str	r1, [sp, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bfbb      	ittet	lt
 8004d62:	425b      	neglt	r3, r3
 8004d64:	f042 0202 	orrlt.w	r2, r2, #2
 8004d68:	9307      	strge	r3, [sp, #28]
 8004d6a:	9307      	strlt	r3, [sp, #28]
 8004d6c:	bfb8      	it	lt
 8004d6e:	9204      	strlt	r2, [sp, #16]
 8004d70:	7823      	ldrb	r3, [r4, #0]
 8004d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d74:	d10a      	bne.n	8004d8c <_svfiprintf_r+0x130>
 8004d76:	7863      	ldrb	r3, [r4, #1]
 8004d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d7a:	d132      	bne.n	8004de2 <_svfiprintf_r+0x186>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	1d1a      	adds	r2, r3, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	9203      	str	r2, [sp, #12]
 8004d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d88:	3402      	adds	r4, #2
 8004d8a:	9305      	str	r3, [sp, #20]
 8004d8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e50 <_svfiprintf_r+0x1f4>
 8004d90:	7821      	ldrb	r1, [r4, #0]
 8004d92:	2203      	movs	r2, #3
 8004d94:	4650      	mov	r0, sl
 8004d96:	f7fb fa23 	bl	80001e0 <memchr>
 8004d9a:	b138      	cbz	r0, 8004dac <_svfiprintf_r+0x150>
 8004d9c:	9b04      	ldr	r3, [sp, #16]
 8004d9e:	eba0 000a 	sub.w	r0, r0, sl
 8004da2:	2240      	movs	r2, #64	@ 0x40
 8004da4:	4082      	lsls	r2, r0
 8004da6:	4313      	orrs	r3, r2
 8004da8:	3401      	adds	r4, #1
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db0:	4824      	ldr	r0, [pc, #144]	@ (8004e44 <_svfiprintf_r+0x1e8>)
 8004db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004db6:	2206      	movs	r2, #6
 8004db8:	f7fb fa12 	bl	80001e0 <memchr>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d036      	beq.n	8004e2e <_svfiprintf_r+0x1d2>
 8004dc0:	4b21      	ldr	r3, [pc, #132]	@ (8004e48 <_svfiprintf_r+0x1ec>)
 8004dc2:	bb1b      	cbnz	r3, 8004e0c <_svfiprintf_r+0x1b0>
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	3307      	adds	r3, #7
 8004dc8:	f023 0307 	bic.w	r3, r3, #7
 8004dcc:	3308      	adds	r3, #8
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd2:	4433      	add	r3, r6
 8004dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dd6:	e76a      	b.n	8004cae <_svfiprintf_r+0x52>
 8004dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ddc:	460c      	mov	r4, r1
 8004dde:	2001      	movs	r0, #1
 8004de0:	e7a8      	b.n	8004d34 <_svfiprintf_r+0xd8>
 8004de2:	2300      	movs	r3, #0
 8004de4:	3401      	adds	r4, #1
 8004de6:	9305      	str	r3, [sp, #20]
 8004de8:	4619      	mov	r1, r3
 8004dea:	f04f 0c0a 	mov.w	ip, #10
 8004dee:	4620      	mov	r0, r4
 8004df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df4:	3a30      	subs	r2, #48	@ 0x30
 8004df6:	2a09      	cmp	r2, #9
 8004df8:	d903      	bls.n	8004e02 <_svfiprintf_r+0x1a6>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0c6      	beq.n	8004d8c <_svfiprintf_r+0x130>
 8004dfe:	9105      	str	r1, [sp, #20]
 8004e00:	e7c4      	b.n	8004d8c <_svfiprintf_r+0x130>
 8004e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e06:	4604      	mov	r4, r0
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e7f0      	b.n	8004dee <_svfiprintf_r+0x192>
 8004e0c:	ab03      	add	r3, sp, #12
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	462a      	mov	r2, r5
 8004e12:	4b0e      	ldr	r3, [pc, #56]	@ (8004e4c <_svfiprintf_r+0x1f0>)
 8004e14:	a904      	add	r1, sp, #16
 8004e16:	4638      	mov	r0, r7
 8004e18:	f3af 8000 	nop.w
 8004e1c:	1c42      	adds	r2, r0, #1
 8004e1e:	4606      	mov	r6, r0
 8004e20:	d1d6      	bne.n	8004dd0 <_svfiprintf_r+0x174>
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	065b      	lsls	r3, r3, #25
 8004e26:	f53f af2d 	bmi.w	8004c84 <_svfiprintf_r+0x28>
 8004e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e2c:	e72c      	b.n	8004c88 <_svfiprintf_r+0x2c>
 8004e2e:	ab03      	add	r3, sp, #12
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	462a      	mov	r2, r5
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <_svfiprintf_r+0x1f0>)
 8004e36:	a904      	add	r1, sp, #16
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f000 f879 	bl	8004f30 <_printf_i>
 8004e3e:	e7ed      	b.n	8004e1c <_svfiprintf_r+0x1c0>
 8004e40:	080052a8 	.word	0x080052a8
 8004e44:	080052b2 	.word	0x080052b2
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	08004ba5 	.word	0x08004ba5
 8004e50:	080052ae 	.word	0x080052ae

08004e54 <_printf_common>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	4616      	mov	r6, r2
 8004e5a:	4698      	mov	r8, r3
 8004e5c:	688a      	ldr	r2, [r1, #8]
 8004e5e:	690b      	ldr	r3, [r1, #16]
 8004e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bfb8      	it	lt
 8004e68:	4613      	movlt	r3, r2
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e70:	4607      	mov	r7, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	b10a      	cbz	r2, 8004e7a <_printf_common+0x26>
 8004e76:	3301      	adds	r3, #1
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0699      	lsls	r1, r3, #26
 8004e7e:	bf42      	ittt	mi
 8004e80:	6833      	ldrmi	r3, [r6, #0]
 8004e82:	3302      	addmi	r3, #2
 8004e84:	6033      	strmi	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	f015 0506 	ands.w	r5, r5, #6
 8004e8c:	d106      	bne.n	8004e9c <_printf_common+0x48>
 8004e8e:	f104 0a19 	add.w	sl, r4, #25
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	dc26      	bgt.n	8004eea <_printf_common+0x96>
 8004e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ea0:	6822      	ldr	r2, [r4, #0]
 8004ea2:	3b00      	subs	r3, #0
 8004ea4:	bf18      	it	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	0692      	lsls	r2, r2, #26
 8004eaa:	d42b      	bmi.n	8004f04 <_printf_common+0xb0>
 8004eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c8      	blx	r9
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d01e      	beq.n	8004ef8 <_printf_common+0xa4>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf02      	ittt	eq
 8004ec6:	68e5      	ldreq	r5, [r4, #12]
 8004ec8:	6833      	ldreq	r3, [r6, #0]
 8004eca:	1aed      	subeq	r5, r5, r3
 8004ecc:	68a3      	ldr	r3, [r4, #8]
 8004ece:	bf0c      	ite	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	2500      	movne	r5, #0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bfc4      	itt	gt
 8004eda:	1a9b      	subgt	r3, r3, r2
 8004edc:	18ed      	addgt	r5, r5, r3
 8004ede:	2600      	movs	r6, #0
 8004ee0:	341a      	adds	r4, #26
 8004ee2:	42b5      	cmp	r5, r6
 8004ee4:	d11a      	bne.n	8004f1c <_printf_common+0xc8>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e008      	b.n	8004efc <_printf_common+0xa8>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4652      	mov	r2, sl
 8004eee:	4641      	mov	r1, r8
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	47c8      	blx	r9
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d103      	bne.n	8004f00 <_printf_common+0xac>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	3501      	adds	r5, #1
 8004f02:	e7c6      	b.n	8004e92 <_printf_common+0x3e>
 8004f04:	18e1      	adds	r1, r4, r3
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	2030      	movs	r0, #48	@ 0x30
 8004f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f0e:	4422      	add	r2, r4
 8004f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f18:	3302      	adds	r3, #2
 8004f1a:	e7c7      	b.n	8004eac <_printf_common+0x58>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4641      	mov	r1, r8
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c8      	blx	r9
 8004f26:	3001      	adds	r0, #1
 8004f28:	d0e6      	beq.n	8004ef8 <_printf_common+0xa4>
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7d9      	b.n	8004ee2 <_printf_common+0x8e>
	...

08004f30 <_printf_i>:
 8004f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	7e0f      	ldrb	r7, [r1, #24]
 8004f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f38:	2f78      	cmp	r7, #120	@ 0x78
 8004f3a:	4691      	mov	r9, r2
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	469a      	mov	sl, r3
 8004f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f46:	d807      	bhi.n	8004f58 <_printf_i+0x28>
 8004f48:	2f62      	cmp	r7, #98	@ 0x62
 8004f4a:	d80a      	bhi.n	8004f62 <_printf_i+0x32>
 8004f4c:	2f00      	cmp	r7, #0
 8004f4e:	f000 80d1 	beq.w	80050f4 <_printf_i+0x1c4>
 8004f52:	2f58      	cmp	r7, #88	@ 0x58
 8004f54:	f000 80b8 	beq.w	80050c8 <_printf_i+0x198>
 8004f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f60:	e03a      	b.n	8004fd8 <_printf_i+0xa8>
 8004f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f66:	2b15      	cmp	r3, #21
 8004f68:	d8f6      	bhi.n	8004f58 <_printf_i+0x28>
 8004f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f70 <_printf_i+0x40>)
 8004f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004f59 	.word	0x08004f59
 8004f7c:	08004f59 	.word	0x08004f59
 8004f80:	08004f59 	.word	0x08004f59
 8004f84:	08004f59 	.word	0x08004f59
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004f59 	.word	0x08004f59
 8004f90:	08004f59 	.word	0x08004f59
 8004f94:	08004f59 	.word	0x08004f59
 8004f98:	08004f59 	.word	0x08004f59
 8004f9c:	080050db 	.word	0x080050db
 8004fa0:	08005007 	.word	0x08005007
 8004fa4:	08005095 	.word	0x08005095
 8004fa8:	08004f59 	.word	0x08004f59
 8004fac:	08004f59 	.word	0x08004f59
 8004fb0:	080050fd 	.word	0x080050fd
 8004fb4:	08004f59 	.word	0x08004f59
 8004fb8:	08005007 	.word	0x08005007
 8004fbc:	08004f59 	.word	0x08004f59
 8004fc0:	08004f59 	.word	0x08004f59
 8004fc4:	0800509d 	.word	0x0800509d
 8004fc8:	6833      	ldr	r3, [r6, #0]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6032      	str	r2, [r6, #0]
 8004fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e09c      	b.n	8005116 <_printf_i+0x1e6>
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	1d19      	adds	r1, r3, #4
 8004fe2:	6031      	str	r1, [r6, #0]
 8004fe4:	0606      	lsls	r6, r0, #24
 8004fe6:	d501      	bpl.n	8004fec <_printf_i+0xbc>
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	e003      	b.n	8004ff4 <_printf_i+0xc4>
 8004fec:	0645      	lsls	r5, r0, #25
 8004fee:	d5fb      	bpl.n	8004fe8 <_printf_i+0xb8>
 8004ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	da03      	bge.n	8005000 <_printf_i+0xd0>
 8004ff8:	232d      	movs	r3, #45	@ 0x2d
 8004ffa:	426d      	negs	r5, r5
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005000:	4858      	ldr	r0, [pc, #352]	@ (8005164 <_printf_i+0x234>)
 8005002:	230a      	movs	r3, #10
 8005004:	e011      	b.n	800502a <_printf_i+0xfa>
 8005006:	6821      	ldr	r1, [r4, #0]
 8005008:	6833      	ldr	r3, [r6, #0]
 800500a:	0608      	lsls	r0, r1, #24
 800500c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005010:	d402      	bmi.n	8005018 <_printf_i+0xe8>
 8005012:	0649      	lsls	r1, r1, #25
 8005014:	bf48      	it	mi
 8005016:	b2ad      	uxthmi	r5, r5
 8005018:	2f6f      	cmp	r7, #111	@ 0x6f
 800501a:	4852      	ldr	r0, [pc, #328]	@ (8005164 <_printf_i+0x234>)
 800501c:	6033      	str	r3, [r6, #0]
 800501e:	bf14      	ite	ne
 8005020:	230a      	movne	r3, #10
 8005022:	2308      	moveq	r3, #8
 8005024:	2100      	movs	r1, #0
 8005026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800502a:	6866      	ldr	r6, [r4, #4]
 800502c:	60a6      	str	r6, [r4, #8]
 800502e:	2e00      	cmp	r6, #0
 8005030:	db05      	blt.n	800503e <_printf_i+0x10e>
 8005032:	6821      	ldr	r1, [r4, #0]
 8005034:	432e      	orrs	r6, r5
 8005036:	f021 0104 	bic.w	r1, r1, #4
 800503a:	6021      	str	r1, [r4, #0]
 800503c:	d04b      	beq.n	80050d6 <_printf_i+0x1a6>
 800503e:	4616      	mov	r6, r2
 8005040:	fbb5 f1f3 	udiv	r1, r5, r3
 8005044:	fb03 5711 	mls	r7, r3, r1, r5
 8005048:	5dc7      	ldrb	r7, [r0, r7]
 800504a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800504e:	462f      	mov	r7, r5
 8005050:	42bb      	cmp	r3, r7
 8005052:	460d      	mov	r5, r1
 8005054:	d9f4      	bls.n	8005040 <_printf_i+0x110>
 8005056:	2b08      	cmp	r3, #8
 8005058:	d10b      	bne.n	8005072 <_printf_i+0x142>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	07df      	lsls	r7, r3, #31
 800505e:	d508      	bpl.n	8005072 <_printf_i+0x142>
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	6861      	ldr	r1, [r4, #4]
 8005064:	4299      	cmp	r1, r3
 8005066:	bfde      	ittt	le
 8005068:	2330      	movle	r3, #48	@ 0x30
 800506a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800506e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005072:	1b92      	subs	r2, r2, r6
 8005074:	6122      	str	r2, [r4, #16]
 8005076:	f8cd a000 	str.w	sl, [sp]
 800507a:	464b      	mov	r3, r9
 800507c:	aa03      	add	r2, sp, #12
 800507e:	4621      	mov	r1, r4
 8005080:	4640      	mov	r0, r8
 8005082:	f7ff fee7 	bl	8004e54 <_printf_common>
 8005086:	3001      	adds	r0, #1
 8005088:	d14a      	bne.n	8005120 <_printf_i+0x1f0>
 800508a:	f04f 30ff 	mov.w	r0, #4294967295
 800508e:	b004      	add	sp, #16
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	f043 0320 	orr.w	r3, r3, #32
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	4832      	ldr	r0, [pc, #200]	@ (8005168 <_printf_i+0x238>)
 800509e:	2778      	movs	r7, #120	@ 0x78
 80050a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	6831      	ldr	r1, [r6, #0]
 80050a8:	061f      	lsls	r7, r3, #24
 80050aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80050ae:	d402      	bmi.n	80050b6 <_printf_i+0x186>
 80050b0:	065f      	lsls	r7, r3, #25
 80050b2:	bf48      	it	mi
 80050b4:	b2ad      	uxthmi	r5, r5
 80050b6:	6031      	str	r1, [r6, #0]
 80050b8:	07d9      	lsls	r1, r3, #31
 80050ba:	bf44      	itt	mi
 80050bc:	f043 0320 	orrmi.w	r3, r3, #32
 80050c0:	6023      	strmi	r3, [r4, #0]
 80050c2:	b11d      	cbz	r5, 80050cc <_printf_i+0x19c>
 80050c4:	2310      	movs	r3, #16
 80050c6:	e7ad      	b.n	8005024 <_printf_i+0xf4>
 80050c8:	4826      	ldr	r0, [pc, #152]	@ (8005164 <_printf_i+0x234>)
 80050ca:	e7e9      	b.n	80050a0 <_printf_i+0x170>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	f023 0320 	bic.w	r3, r3, #32
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	e7f6      	b.n	80050c4 <_printf_i+0x194>
 80050d6:	4616      	mov	r6, r2
 80050d8:	e7bd      	b.n	8005056 <_printf_i+0x126>
 80050da:	6833      	ldr	r3, [r6, #0]
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	6961      	ldr	r1, [r4, #20]
 80050e0:	1d18      	adds	r0, r3, #4
 80050e2:	6030      	str	r0, [r6, #0]
 80050e4:	062e      	lsls	r6, r5, #24
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	d501      	bpl.n	80050ee <_printf_i+0x1be>
 80050ea:	6019      	str	r1, [r3, #0]
 80050ec:	e002      	b.n	80050f4 <_printf_i+0x1c4>
 80050ee:	0668      	lsls	r0, r5, #25
 80050f0:	d5fb      	bpl.n	80050ea <_printf_i+0x1ba>
 80050f2:	8019      	strh	r1, [r3, #0]
 80050f4:	2300      	movs	r3, #0
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	4616      	mov	r6, r2
 80050fa:	e7bc      	b.n	8005076 <_printf_i+0x146>
 80050fc:	6833      	ldr	r3, [r6, #0]
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	6032      	str	r2, [r6, #0]
 8005102:	681e      	ldr	r6, [r3, #0]
 8005104:	6862      	ldr	r2, [r4, #4]
 8005106:	2100      	movs	r1, #0
 8005108:	4630      	mov	r0, r6
 800510a:	f7fb f869 	bl	80001e0 <memchr>
 800510e:	b108      	cbz	r0, 8005114 <_printf_i+0x1e4>
 8005110:	1b80      	subs	r0, r0, r6
 8005112:	6060      	str	r0, [r4, #4]
 8005114:	6863      	ldr	r3, [r4, #4]
 8005116:	6123      	str	r3, [r4, #16]
 8005118:	2300      	movs	r3, #0
 800511a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800511e:	e7aa      	b.n	8005076 <_printf_i+0x146>
 8005120:	6923      	ldr	r3, [r4, #16]
 8005122:	4632      	mov	r2, r6
 8005124:	4649      	mov	r1, r9
 8005126:	4640      	mov	r0, r8
 8005128:	47d0      	blx	sl
 800512a:	3001      	adds	r0, #1
 800512c:	d0ad      	beq.n	800508a <_printf_i+0x15a>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	079b      	lsls	r3, r3, #30
 8005132:	d413      	bmi.n	800515c <_printf_i+0x22c>
 8005134:	68e0      	ldr	r0, [r4, #12]
 8005136:	9b03      	ldr	r3, [sp, #12]
 8005138:	4298      	cmp	r0, r3
 800513a:	bfb8      	it	lt
 800513c:	4618      	movlt	r0, r3
 800513e:	e7a6      	b.n	800508e <_printf_i+0x15e>
 8005140:	2301      	movs	r3, #1
 8005142:	4632      	mov	r2, r6
 8005144:	4649      	mov	r1, r9
 8005146:	4640      	mov	r0, r8
 8005148:	47d0      	blx	sl
 800514a:	3001      	adds	r0, #1
 800514c:	d09d      	beq.n	800508a <_printf_i+0x15a>
 800514e:	3501      	adds	r5, #1
 8005150:	68e3      	ldr	r3, [r4, #12]
 8005152:	9903      	ldr	r1, [sp, #12]
 8005154:	1a5b      	subs	r3, r3, r1
 8005156:	42ab      	cmp	r3, r5
 8005158:	dcf2      	bgt.n	8005140 <_printf_i+0x210>
 800515a:	e7eb      	b.n	8005134 <_printf_i+0x204>
 800515c:	2500      	movs	r5, #0
 800515e:	f104 0619 	add.w	r6, r4, #25
 8005162:	e7f5      	b.n	8005150 <_printf_i+0x220>
 8005164:	080052b9 	.word	0x080052b9
 8005168:	080052ca 	.word	0x080052ca

0800516c <memmove>:
 800516c:	4288      	cmp	r0, r1
 800516e:	b510      	push	{r4, lr}
 8005170:	eb01 0402 	add.w	r4, r1, r2
 8005174:	d902      	bls.n	800517c <memmove+0x10>
 8005176:	4284      	cmp	r4, r0
 8005178:	4623      	mov	r3, r4
 800517a:	d807      	bhi.n	800518c <memmove+0x20>
 800517c:	1e43      	subs	r3, r0, #1
 800517e:	42a1      	cmp	r1, r4
 8005180:	d008      	beq.n	8005194 <memmove+0x28>
 8005182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800518a:	e7f8      	b.n	800517e <memmove+0x12>
 800518c:	4402      	add	r2, r0
 800518e:	4601      	mov	r1, r0
 8005190:	428a      	cmp	r2, r1
 8005192:	d100      	bne.n	8005196 <memmove+0x2a>
 8005194:	bd10      	pop	{r4, pc}
 8005196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800519a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800519e:	e7f7      	b.n	8005190 <memmove+0x24>

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
