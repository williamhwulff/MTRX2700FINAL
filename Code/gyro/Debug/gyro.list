
gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004290  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004418  08004418  00005418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004448  08004448  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004448  08004448  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004448  08004448  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004448  08004448  00005448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800444c  0800444c  0000544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004450  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc6c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fad  00000000  00000000  00011ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  00013c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094a  00000000  00000000  00014870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebae  00000000  00000000  000151ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001025c  00000000  00000000  00033d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baffe  00000000  00000000  00043fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fefc2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003188  00000000  00000000  000ff008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00102190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004400 	.word	0x08004400

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004400 	.word	0x08004400

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b3e      	ldr	r3, [pc, #248]	@ (80002d8 <MX_GPIO_Init+0x110>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a3d      	ldr	r2, [pc, #244]	@ (80002d8 <MX_GPIO_Init+0x110>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b3b      	ldr	r3, [pc, #236]	@ (80002d8 <MX_GPIO_Init+0x110>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b38      	ldr	r3, [pc, #224]	@ (80002d8 <MX_GPIO_Init+0x110>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a37      	ldr	r2, [pc, #220]	@ (80002d8 <MX_GPIO_Init+0x110>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b35      	ldr	r3, [pc, #212]	@ (80002d8 <MX_GPIO_Init+0x110>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b32      	ldr	r3, [pc, #200]	@ (80002d8 <MX_GPIO_Init+0x110>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a31      	ldr	r2, [pc, #196]	@ (80002d8 <MX_GPIO_Init+0x110>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b2f      	ldr	r3, [pc, #188]	@ (80002d8 <MX_GPIO_Init+0x110>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b2c      	ldr	r3, [pc, #176]	@ (80002d8 <MX_GPIO_Init+0x110>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a2b      	ldr	r2, [pc, #172]	@ (80002d8 <MX_GPIO_Init+0x110>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b29      	ldr	r3, [pc, #164]	@ (80002d8 <MX_GPIO_Init+0x110>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b26      	ldr	r3, [pc, #152]	@ (80002d8 <MX_GPIO_Init+0x110>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a25      	ldr	r2, [pc, #148]	@ (80002d8 <MX_GPIO_Init+0x110>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b23      	ldr	r3, [pc, #140]	@ (80002d8 <MX_GPIO_Init+0x110>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GYRO_CS_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800025c:	481f      	ldr	r0, [pc, #124]	@ (80002dc <MX_GPIO_Init+0x114>)
 800025e:	f000 ff39 	bl	80010d4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000262:	2337      	movs	r3, #55	@ 0x37
 8000264:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000266:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	4619      	mov	r1, r3
 8000276:	4819      	ldr	r0, [pc, #100]	@ (80002dc <MX_GPIO_Init+0x114>)
 8000278:	f000 fdb2 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800027c:	2308      	movs	r3, #8
 800027e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000280:	2301      	movs	r3, #1
 8000282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000284:	2300      	movs	r3, #0
 8000286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000288:	2301      	movs	r3, #1
 800028a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	4619      	mov	r1, r3
 8000292:	4812      	ldr	r0, [pc, #72]	@ (80002dc <MX_GPIO_Init+0x114>)
 8000294:	f000 fda4 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000298:	2301      	movs	r3, #1
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800029c:	2300      	movs	r3, #0
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	4619      	mov	r1, r3
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f000 fd97 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80002b2:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80002b6:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2300      	movs	r3, #0
 80002c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	4619      	mov	r1, r3
 80002ca:	4804      	ldr	r0, [pc, #16]	@ (80002dc <MX_GPIO_Init+0x114>)
 80002cc:	f000 fd88 	bl	8000de0 <HAL_GPIO_Init>

}
 80002d0:	bf00      	nop
 80002d2:	3728      	adds	r7, #40	@ 0x28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40021000 	.word	0x40021000
 80002dc:	48001000 	.word	0x48001000

080002e0 <L3GD20_Write>:
#include "stm32f3xx_hal_spi.h"

#define L3GD20_CS_LOW()   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET)
#define L3GD20_CS_HIGH()  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET)

void L3GD20_Write(uint8_t reg, uint8_t data) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	460a      	mov	r2, r1
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	4613      	mov	r3, r2
 80002ee:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = {reg & 0x7F, data};
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	733b      	strb	r3, [r7, #12]
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	737b      	strb	r3, [r7, #13]
    L3GD20_CS_LOW();
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	480a      	ldr	r0, [pc, #40]	@ (800032c <L3GD20_Write+0x4c>)
 8000304:	f000 fee6 	bl	80010d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tx, 2, HAL_MAX_DELAY);
 8000308:	f107 010c 	add.w	r1, r7, #12
 800030c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000310:	2202      	movs	r2, #2
 8000312:	4807      	ldr	r0, [pc, #28]	@ (8000330 <L3GD20_Write+0x50>)
 8000314:	f002 fb39 	bl	800298a <HAL_SPI_Transmit>
    L3GD20_CS_HIGH();
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4803      	ldr	r0, [pc, #12]	@ (800032c <L3GD20_Write+0x4c>)
 800031e:	f000 fed9 	bl	80010d4 <HAL_GPIO_WritePin>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	48001000 	.word	0x48001000
 8000330:	20000028 	.word	0x20000028

08000334 <L3GD20_Read>:

uint8_t L3GD20_Read(uint8_t reg) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = reg | 0x80;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000344:	b2db      	uxtb	r3, r3
 8000346:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	73bb      	strb	r3, [r7, #14]
    L3GD20_CS_LOW();
 800034c:	2200      	movs	r2, #0
 800034e:	2108      	movs	r1, #8
 8000350:	480e      	ldr	r0, [pc, #56]	@ (800038c <L3GD20_Read+0x58>)
 8000352:	f000 febf 	bl	80010d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8000356:	f107 010f 	add.w	r1, r7, #15
 800035a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800035e:	2201      	movs	r2, #1
 8000360:	480b      	ldr	r0, [pc, #44]	@ (8000390 <L3GD20_Read+0x5c>)
 8000362:	f002 fb12 	bl	800298a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8000366:	f107 010e 	add.w	r1, r7, #14
 800036a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800036e:	2201      	movs	r2, #1
 8000370:	4807      	ldr	r0, [pc, #28]	@ (8000390 <L3GD20_Read+0x5c>)
 8000372:	f002 fc7f 	bl	8002c74 <HAL_SPI_Receive>
    L3GD20_CS_HIGH();
 8000376:	2201      	movs	r2, #1
 8000378:	2108      	movs	r1, #8
 800037a:	4804      	ldr	r0, [pc, #16]	@ (800038c <L3GD20_Read+0x58>)
 800037c:	f000 feaa 	bl	80010d4 <HAL_GPIO_WritePin>
    return rx;
 8000380:	7bbb      	ldrb	r3, [r7, #14]
}
 8000382:	4618      	mov	r0, r3
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	48001000 	.word	0x48001000
 8000390:	20000028 	.word	0x20000028

08000394 <L3GD20_Init>:

void L3GD20_Init(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    L3GD20_Write(0x20, 0x0F);  // CTRL_REG1: normal mode, all axes on, 95Hz
 8000398:	210f      	movs	r1, #15
 800039a:	2020      	movs	r0, #32
 800039c:	f7ff ffa0 	bl	80002e0 <L3GD20_Write>
    L3GD20_Write(0x23, 0x10);  // CTRL_REG4: 500 dps full scale
 80003a0:	2110      	movs	r1, #16
 80003a2:	2023      	movs	r0, #35	@ 0x23
 80003a4:	f7ff ff9c 	bl	80002e0 <L3GD20_Write>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}

080003ac <L3GD20_ReadAxis>:

int16_t L3GD20_ReadAxis(uint8_t regL, uint8_t regH) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	460a      	mov	r2, r1
 80003b6:	71fb      	strb	r3, [r7, #7]
 80003b8:	4613      	mov	r3, r2
 80003ba:	71bb      	strb	r3, [r7, #6]
    uint8_t l = L3GD20_Read(regL);
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ffb8 	bl	8000334 <L3GD20_Read>
 80003c4:	4603      	mov	r3, r0
 80003c6:	73fb      	strb	r3, [r7, #15]
    uint8_t h = L3GD20_Read(regH);
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ffb2 	bl	8000334 <L3GD20_Read>
 80003d0:	4603      	mov	r3, r0
 80003d2:	73bb      	strb	r3, [r7, #14]
    return (int16_t)((h << 8) | l);
 80003d4:	7bbb      	ldrb	r3, [r7, #14]
 80003d6:	b21b      	sxth	r3, r3
 80003d8:	021b      	lsls	r3, r3, #8
 80003da:	b21a      	sxth	r2, r3
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b21b      	sxth	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08e      	sub	sp, #56	@ 0x38
 80003f0:	af00      	add	r7, sp, #0

	HAL_Init();
 80003f2:	f000 fb85 	bl	8000b00 <HAL_Init>
	    SystemClock_Config();
 80003f6:	f000 f93b 	bl	8000670 <SystemClock_Config>
	    MX_GPIO_Init();
 80003fa:	f7ff fee5 	bl	80001c8 <MX_GPIO_Init>
	    MX_SPI1_Init();
 80003fe:	f000 f9b3 	bl	8000768 <MX_SPI1_Init>
	    MX_TIM2_Init();
 8000402:	f000 fa97 	bl	8000934 <MX_TIM2_Init>

	    L3GD20_Init();
 8000406:	f7ff ffc5 	bl	8000394 <L3GD20_Init>

	    // Start PWM
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800040a:	2100      	movs	r1, #0
 800040c:	4892      	ldr	r0, [pc, #584]	@ (8000658 <main+0x26c>)
 800040e:	f003 f99f 	bl	8003750 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000412:	2104      	movs	r1, #4
 8000414:	4890      	ldr	r0, [pc, #576]	@ (8000658 <main+0x26c>)
 8000416:	f003 f99b 	bl	8003750 <HAL_TIM_PWM_Start>

	    // Bias calibration
	    float gyro_bias_x = 0, gyro_bias_y = 0;
 800041a:	f04f 0300 	mov.w	r3, #0
 800041e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	633b      	str	r3, [r7, #48]	@ 0x30
	    for (int i = 0; i < 100; i++) {
 8000426:	2300      	movs	r3, #0
 8000428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800042a:	e021      	b.n	8000470 <main+0x84>
	        gyro_bias_x += L3GD20_ReadAxis(0x28, 0x29);
 800042c:	2129      	movs	r1, #41	@ 0x29
 800042e:	2028      	movs	r0, #40	@ 0x28
 8000430:	f7ff ffbc 	bl	80003ac <L3GD20_ReadAxis>
 8000434:	ee07 0a90 	vmov	s15, r0
 8000438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800043c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000444:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	        gyro_bias_y += L3GD20_ReadAxis(0x2A, 0x2B);
 8000448:	212b      	movs	r1, #43	@ 0x2b
 800044a:	202a      	movs	r0, #42	@ 0x2a
 800044c:	f7ff ffae 	bl	80003ac <L3GD20_ReadAxis>
 8000450:	ee07 0a90 	vmov	s15, r0
 8000454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000458:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800045c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000460:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	        HAL_Delay(5);
 8000464:	2005      	movs	r0, #5
 8000466:	f000 fbb1 	bl	8000bcc <HAL_Delay>
	    for (int i = 0; i < 100; i++) {
 800046a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800046c:	3301      	adds	r3, #1
 800046e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000472:	2b63      	cmp	r3, #99	@ 0x63
 8000474:	ddda      	ble.n	800042c <main+0x40>
	    }
	    gyro_bias_x /= 100.0f;
 8000476:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800047a:	eddf 6a78 	vldr	s13, [pc, #480]	@ 800065c <main+0x270>
 800047e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000482:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	    gyro_bias_y /= 100.0f;
 8000486:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800048a:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800065c <main+0x270>
 800048e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000492:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	    float angle_x = 0.0f, angle_y = 0.0f;
 8000496:	f04f 0300 	mov.w	r3, #0
 800049a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800049c:	f04f 0300 	mov.w	r3, #0
 80004a0:	627b      	str	r3, [r7, #36]	@ 0x24
	    uint32_t last_time = HAL_GetTick();
 80004a2:	f000 fb87 	bl	8000bb4 <HAL_GetTick>
 80004a6:	6238      	str	r0, [r7, #32]
	    uint16_t vertical_PWM = 1500;
 80004a8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80004ac:	83fb      	strh	r3, [r7, #30]
	    uint16_t horizontal_PWM = 1500;
 80004ae:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80004b2:	83bb      	strh	r3, [r7, #28]

  while (1)
  {
	  int16_t roll_rate_raw = L3GD20_ReadAxis(0x28, 0x29);   // X axis
 80004b4:	2129      	movs	r1, #41	@ 0x29
 80004b6:	2028      	movs	r0, #40	@ 0x28
 80004b8:	f7ff ff78 	bl	80003ac <L3GD20_ReadAxis>
 80004bc:	4603      	mov	r3, r0
 80004be:	837b      	strh	r3, [r7, #26]
	  int16_t pitch_rate_raw = L3GD20_ReadAxis(0x2A, 0x2B);  // Y axis
 80004c0:	212b      	movs	r1, #43	@ 0x2b
 80004c2:	202a      	movs	r0, #42	@ 0x2a
 80004c4:	f7ff ff72 	bl	80003ac <L3GD20_ReadAxis>
 80004c8:	4603      	mov	r3, r0
 80004ca:	833b      	strh	r3, [r7, #24]

	  uint32_t now = HAL_GetTick();
 80004cc:	f000 fb72 	bl	8000bb4 <HAL_GetTick>
 80004d0:	6178      	str	r0, [r7, #20]
	  float delta_time = (now - last_time) / 1000.0f;
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	6a3b      	ldr	r3, [r7, #32]
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	ee07 3a90 	vmov	s15, r3
 80004dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004e0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8000660 <main+0x274>
 80004e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004e8:	edc7 7a04 	vstr	s15, [r7, #16]
	  last_time = now;
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	623b      	str	r3, [r7, #32]

	  float servo_gain = 0.25f; // Reduce sensitivity by half
 80004f0:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80004f4:	60fb      	str	r3, [r7, #12]
	  float x_rate_dps = ((float)roll_rate_raw - gyro_bias_x) * 0.00875f * servo_gain;
 80004f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80004fa:	ee07 3a90 	vmov	s15, r3
 80004fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000502:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800050a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000664 <main+0x278>
 800050e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000512:	ed97 7a03 	vldr	s14, [r7, #12]
 8000516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800051a:	edc7 7a02 	vstr	s15, [r7, #8]
	  float y_rate_dps = ((float)pitch_rate_raw - gyro_bias_y) * 0.00875f * servo_gain;
 800051e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000522:	ee07 3a90 	vmov	s15, r3
 8000526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800052a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800052e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000532:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8000664 <main+0x278>
 8000536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800053a:	ed97 7a03 	vldr	s14, [r7, #12]
 800053e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000542:	edc7 7a01 	vstr	s15, [r7, #4]

	  angle_x += x_rate_dps * delta_time;
 8000546:	ed97 7a02 	vldr	s14, [r7, #8]
 800054a:	edd7 7a04 	vldr	s15, [r7, #16]
 800054e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000552:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	  angle_y += y_rate_dps * delta_time;
 800055e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000562:	edd7 7a04 	vldr	s15, [r7, #16]
 8000566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800056a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800056e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000572:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	  if (angle_x > 10) angle_x = 10;
 8000576:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800057a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800057e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000586:	dd01      	ble.n	800058c <main+0x1a0>
 8000588:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <main+0x27c>)
 800058a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  if (angle_x < -10) angle_x = -10;
 800058c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000590:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8000594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	d501      	bpl.n	80005a2 <main+0x1b6>
 800059e:	4b33      	ldr	r3, [pc, #204]	@ (800066c <main+0x280>)
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  if (angle_y > 10) angle_y = 10;
 80005a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80005a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80005aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b2:	dd01      	ble.n	80005b8 <main+0x1cc>
 80005b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <main+0x27c>)
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (angle_y < -10) angle_y = -10;
 80005b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80005bc:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 80005c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c8:	d501      	bpl.n	80005ce <main+0x1e2>
 80005ca:	4b28      	ldr	r3, [pc, #160]	@ (800066c <main+0x280>)
 80005cc:	627b      	str	r3, [r7, #36]	@ 0x24

	  vertical_PWM = 1100 + (int)(angle_y * 20);
 80005ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80005d2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80005d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005de:	ee17 3a90 	vmov	r3, s15
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 80005e8:	83fb      	strh	r3, [r7, #30]
	  horizontal_PWM = 1000 + (int)(angle_x * 20);
 80005ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80005ee:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80005f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005fa:	ee17 3a90 	vmov	r3, s15
 80005fe:	b29b      	uxth	r3, r3
 8000600:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000604:	83bb      	strh	r3, [r7, #28]

	  // Vertical is closest to the ptu
	  // The
	  if (vertical_PWM > 1180) vertical_PWM = 1180;
 8000606:	8bfb      	ldrh	r3, [r7, #30]
 8000608:	f240 429c 	movw	r2, #1180	@ 0x49c
 800060c:	4293      	cmp	r3, r2
 800060e:	d902      	bls.n	8000616 <main+0x22a>
 8000610:	f240 439c 	movw	r3, #1180	@ 0x49c
 8000614:	83fb      	strh	r3, [r7, #30]
	  //turn arm down
	  if (vertical_PWM < 1020) vertical_PWM = 1020;
 8000616:	8bfb      	ldrh	r3, [r7, #30]
 8000618:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 800061c:	d202      	bcs.n	8000624 <main+0x238>
 800061e:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 8000622:	83fb      	strh	r3, [r7, #30]
	  // Horizontal the top servo
	  // Upper bound twists into box
	  if (horizontal_PWM > 1048) horizontal_PWM = 1080;
 8000624:	8bbb      	ldrh	r3, [r7, #28]
 8000626:	f5b3 6f83 	cmp.w	r3, #1048	@ 0x418
 800062a:	d902      	bls.n	8000632 <main+0x246>
 800062c:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000630:	83bb      	strh	r3, [r7, #28]
	  if (horizontal_PWM < 920) horizontal_PWM = 920;
 8000632:	8bbb      	ldrh	r3, [r7, #28]
 8000634:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8000638:	d202      	bcs.n	8000640 <main+0x254>
 800063a:	f44f 7366 	mov.w	r3, #920	@ 0x398
 800063e:	83bb      	strh	r3, [r7, #28]

	  TIM2->CCR1 = vertical_PWM;
 8000640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000644:	8bfb      	ldrh	r3, [r7, #30]
 8000646:	6353      	str	r3, [r2, #52]	@ 0x34
	  TIM2->CCR2 = horizontal_PWM;
 8000648:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800064c:	8bbb      	ldrh	r3, [r7, #28]
 800064e:	6393      	str	r3, [r2, #56]	@ 0x38

	  HAL_Delay(10);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 fabb 	bl	8000bcc <HAL_Delay>
  {
 8000656:	e72d      	b.n	80004b4 <main+0xc8>
 8000658:	2000008c 	.word	0x2000008c
 800065c:	42c80000 	.word	0x42c80000
 8000660:	447a0000 	.word	0x447a0000
 8000664:	3c0f5c29 	.word	0x3c0f5c29
 8000668:	41200000 	.word	0x41200000
 800066c:	c1200000 	.word	0xc1200000

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09e      	sub	sp, #120	@ 0x78
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800067a:	2228      	movs	r2, #40	@ 0x28
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fe92 	bl	80043a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	223c      	movs	r2, #60	@ 0x3c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fe84 	bl	80043a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006a0:	2303      	movs	r3, #3
 80006a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2310      	movs	r3, #16
 80006b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006be:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80006c4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd34 	bl	8001138 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006d6:	f000 f82f 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fd2c 	bl	8002154 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000702:	f000 f819 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <SystemClock_Config+0xc4>)
 8000708:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000716:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fedc 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000726:	f000 f807 	bl	8000738 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3778      	adds	r7, #120	@ 0x78
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	00020022 	.word	0x00020022

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <Error_Handler+0x2c>)
 8000748:	f000 fcc4 	bl	80010d4 <HAL_GPIO_WritePin>
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 800074c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <Error_Handler+0x2c>)
 8000752:	f000 fcd7 	bl	8001104 <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8000756:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800075a:	f000 fa37 	bl	8000bcc <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 800075e:	bf00      	nop
 8000760:	e7f4      	b.n	800074c <Error_Handler+0x14>
 8000762:	bf00      	nop
 8000764:	48001000 	.word	0x48001000

08000768 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_SPI1_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	@ (80007e0 <MX_SPI1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000782:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_SPI1_Init+0x74>)
 800078a:	2202      	movs	r2, #2
 800078c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SPI1_Init+0x74>)
 8000796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_SPI1_Init+0x74>)
 800079e:	2228      	movs	r2, #40	@ 0x28
 80007a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_SPI1_Init+0x74>)
 80007c8:	f002 f834 	bl	8002834 <HAL_SPI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f7ff ffb1 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028
 80007e0:	40013000 	.word	0x40013000

080007e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <HAL_SPI_MspInit+0x7c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d128      	bne.n	8000858 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000828:	6153      	str	r3, [r2, #20]
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_SPI_MspInit+0x80>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000836:	23e0      	movs	r3, #224	@ 0xe0
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000846:	2305      	movs	r3, #5
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f000 fac4 	bl	8000de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40013000 	.word	0x40013000
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_MspInit+0x44>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x44>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x44>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x44>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fa6a 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f941 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000960:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 8000962:	2247      	movs	r2, #71	@ 0x47
 8000964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800096c:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 800096e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000980:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 8000982:	f002 fe8d 	bl	80036a0 <HAL_TIM_PWM_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800098c:	f7ff fed4 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 80009a0:	f003 fc82 	bl	80042a8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009aa:	f7ff fec5 	bl	8000738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	2360      	movs	r3, #96	@ 0x60
 80009b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80009b2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80009b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	480e      	ldr	r0, [pc, #56]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 80009c8:	f002 ffc2 	bl	8003950 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80009d2:	f7ff feb1 	bl	8000738 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	2204      	movs	r2, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 80009e2:	f002 ffb5 	bl	8003950 <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80009ec:	f7ff fea4 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <MX_TIM2_Init+0xcc>)
 80009f2:	f000 f825 	bl	8000a40 <HAL_TIM_MspPostInit>

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000008c 	.word	0x2000008c

08000a04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a14:	d10b      	bne.n	8000a2e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_TIM_PWM_MspInit+0x38>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_TIM_PWM_MspInit+0x38>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_TIM_PWM_MspInit+0x38>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a60:	d11d      	bne.n	8000a9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_TIM_MspPostInit+0x68>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <HAL_TIM_MspPostInit+0x68>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	6153      	str	r3, [r2, #20]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_TIM_MspPostInit+0x68>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000a7a:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000a7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f000 f9a1 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab0:	f7ff ff2e 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	@ (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ada:	f003 fc6d 	bl	80043b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ade:	f7ff fc85 	bl	80003ec <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af0:	08004450 	.word	0x08004450
  ldr r2, =_sbss
 8000af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af8:	200000dc 	.word	0x200000dc

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f931 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fea4 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f93b 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b68:	f000 f911 	bl	8000d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200000d8 	.word	0x200000d8

08000bb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000d8 	.word	0x200000d8

08000bcc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	@ (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	@ 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	@ 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff47 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff5c 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff8e 	bl	8000ccc <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffb0 	bl	8000d34 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e154      	b.n	800109a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8146 	beq.w	8001094 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x40>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	f003 0201 	and.w	r2, r3, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	6939      	ldr	r1, [r7, #16]
 8000f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0203 	and.w	r2, r3, #3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80a0 	beq.w	8001094 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b58      	ldr	r3, [pc, #352]	@ (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a57      	ldr	r2, [pc, #348]	@ (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b55      	ldr	r3, [pc, #340]	@ (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a53      	ldr	r2, [pc, #332]	@ (80010bc <HAL_GPIO_Init+0x2dc>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f96:	d019      	beq.n	8000fcc <HAL_GPIO_Init+0x1ec>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a49      	ldr	r2, [pc, #292]	@ (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d013      	beq.n	8000fc8 <HAL_GPIO_Init+0x1e8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a48      	ldr	r2, [pc, #288]	@ (80010c4 <HAL_GPIO_Init+0x2e4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d00d      	beq.n	8000fc4 <HAL_GPIO_Init+0x1e4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a47      	ldr	r2, [pc, #284]	@ (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d007      	beq.n	8000fc0 <HAL_GPIO_Init+0x1e0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d101      	bne.n	8000fbc <HAL_GPIO_Init+0x1dc>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e008      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e004      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	f002 0203 	and.w	r2, r2, #3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fde:	4937      	ldr	r1, [pc, #220]	@ (80010bc <HAL_GPIO_Init+0x2dc>)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fec:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001010:	4a2f      	ldr	r2, [pc, #188]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001016:	4b2e      	ldr	r3, [pc, #184]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103a:	4a25      	ldr	r2, [pc, #148]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001040:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001064:	4a1a      	ldr	r2, [pc, #104]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800108e:	4a10      	ldr	r2, [pc, #64]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f47f aea3 	bne.w	8000df0 <HAL_GPIO_Init+0x10>
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000800 	.word	0x48000800
 80010c8:	48000c00 	.word	0x48000c00
 80010cc:	48001000 	.word	0x48001000
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43d9      	mvns	r1, r3
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	400b      	ands	r3, r1
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800113e:	af00      	add	r7, sp, #0
 8001140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001148:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800114a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	f000 bff4 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001162:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 816d 	beq.w	800144e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001174:	4bb4      	ldr	r3, [pc, #720]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b04      	cmp	r3, #4
 800117e:	d00c      	beq.n	800119a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001180:	4bb1      	ldr	r3, [pc, #708]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b08      	cmp	r3, #8
 800118a:	d157      	bne.n	800123c <HAL_RCC_OscConfig+0x104>
 800118c:	4bae      	ldr	r3, [pc, #696]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001198:	d150      	bne.n	800123c <HAL_RCC_OscConfig+0x104>
 800119a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800119e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80011ba:	d802      	bhi.n	80011c2 <HAL_RCC_OscConfig+0x8a>
 80011bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	e015      	b.n	80011ee <HAL_RCC_OscConfig+0xb6>
 80011c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011c6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80011d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011da:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80011de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80011ea:	4b97      	ldr	r3, [pc, #604]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011f2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80011f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80011fa:	fa92 f2a2 	rbit	r2, r2
 80011fe:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001202:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001206:	fab2 f282 	clz	r2, r2
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	f042 0220 	orr.w	r2, r2, #32
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	f002 021f 	and.w	r2, r2, #31
 8001216:	2101      	movs	r1, #1
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8114 	beq.w	800144c <HAL_RCC_OscConfig+0x314>
 8001224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 810b 	bne.w	800144c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f000 bf85 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001240:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800124c:	d106      	bne.n	800125c <HAL_RCC_OscConfig+0x124>
 800124e:	4b7e      	ldr	r3, [pc, #504]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7d      	ldr	r2, [pc, #500]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e036      	b.n	80012ca <HAL_RCC_OscConfig+0x192>
 800125c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001260:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x14e>
 800126c:	4b76      	ldr	r3, [pc, #472]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a75      	ldr	r2, [pc, #468]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b73      	ldr	r3, [pc, #460]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a72      	ldr	r2, [pc, #456]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e021      	b.n	80012ca <HAL_RCC_OscConfig+0x192>
 8001286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800128a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001296:	d10c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x17a>
 8001298:	4b6b      	ldr	r3, [pc, #428]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a6a      	ldr	r2, [pc, #424]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 800129e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b68      	ldr	r3, [pc, #416]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a67      	ldr	r2, [pc, #412]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e00b      	b.n	80012ca <HAL_RCC_OscConfig+0x192>
 80012b2:	4b65      	ldr	r3, [pc, #404]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a64      	ldr	r2, [pc, #400]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b62      	ldr	r3, [pc, #392]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a61      	ldr	r2, [pc, #388]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	f023 020f 	bic.w	r2, r3, #15
 80012d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	495a      	ldr	r1, [pc, #360]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d054      	beq.n	800139e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc5e 	bl	8000bb4 <HAL_GetTick>
 80012f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fe:	f7ff fc59 	bl	8000bb4 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	@ 0x64
 800130c:	d902      	bls.n	8001314 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	f000 bf19 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
 8001314:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001318:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001328:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b3f      	cmp	r3, #63	@ 0x3f
 8001334:	d802      	bhi.n	800133c <HAL_RCC_OscConfig+0x204>
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	e015      	b.n	8001368 <HAL_RCC_OscConfig+0x230>
 800133c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001340:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001350:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001354:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001358:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001364:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001368:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800136c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001370:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001374:	fa92 f2a2 	rbit	r2, r2
 8001378:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800137c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001380:	fab2 f282 	clz	r2, r2
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f042 0220 	orr.w	r2, r2, #32
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f002 021f 	and.w	r2, r2, #31
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0b0      	beq.n	80012fe <HAL_RCC_OscConfig+0x1c6>
 800139c:	e057      	b.n	800144e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fc09 	bl	8000bb4 <HAL_GetTick>
 80013a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e00a      	b.n	80013be <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc04 	bl	8000bb4 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	@ 0x64
 80013b6:	d902      	bls.n	80013be <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	f000 bec4 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
 80013be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013c2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80013d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80013de:	d802      	bhi.n	80013e6 <HAL_RCC_OscConfig+0x2ae>
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x2da>
 80013e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013ea:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80013fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013fe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001402:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_RCC_OscConfig+0x310>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001416:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800141a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800141e:	fa92 f2a2 	rbit	r2, r2
 8001422:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001426:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800142a:	fab2 f282 	clz	r2, r2
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	f042 0220 	orr.w	r2, r2, #32
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	f002 021f 	and.w	r2, r2, #31
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1b0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x270>
 8001446:	e002      	b.n	800144e <HAL_RCC_OscConfig+0x316>
 8001448:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 816c 	beq.w	800173c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001464:	4bcc      	ldr	r3, [pc, #816]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001470:	4bc9      	ldr	r3, [pc, #804]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d16d      	bne.n	8001558 <HAL_RCC_OscConfig+0x420>
 800147c:	4bc6      	ldr	r3, [pc, #792]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d167      	bne.n	8001558 <HAL_RCC_OscConfig+0x420>
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800149a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80014a6:	d802      	bhi.n	80014ae <HAL_RCC_OscConfig+0x376>
 80014a8:	4bbb      	ldr	r3, [pc, #748]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	e013      	b.n	80014d6 <HAL_RCC_OscConfig+0x39e>
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80014c0:	2302      	movs	r3, #2
 80014c2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80014c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80014d2:	4bb1      	ldr	r3, [pc, #708]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	2202      	movs	r2, #2
 80014d8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80014dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80014e0:	fa92 f2a2 	rbit	r2, r2
 80014e4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80014e8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80014ec:	fab2 f282 	clz	r2, r2
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	f042 0220 	orr.w	r2, r2, #32
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	f002 021f 	and.w	r2, r2, #31
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00a      	beq.n	800151e <HAL_RCC_OscConfig+0x3e6>
 8001508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d002      	beq.n	800151e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	f000 be14 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b9e      	ldr	r3, [pc, #632]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	21f8      	movs	r1, #248	@ 0xf8
 8001534:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800153c:	fa91 f1a1 	rbit	r1, r1
 8001540:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001544:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001548:	fab1 f181 	clz	r1, r1
 800154c:	b2c9      	uxtb	r1, r1
 800154e:	408b      	lsls	r3, r1
 8001550:	4991      	ldr	r1, [pc, #580]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	e0f1      	b.n	800173c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8083 	beq.w	8001670 <HAL_RCC_OscConfig+0x538>
 800156a:	2301      	movs	r3, #1
 800156c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800157c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800158a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	461a      	mov	r2, r3
 8001592:	2301      	movs	r3, #1
 8001594:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb0d 	bl	8000bb4 <HAL_GetTick>
 800159a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fb08 	bl	8000bb4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d902      	bls.n	80015b6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f000 bdc8 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80015c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80015d4:	d802      	bhi.n	80015dc <HAL_RCC_OscConfig+0x4a4>
 80015d6:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	e013      	b.n	8001604 <HAL_RCC_OscConfig+0x4cc>
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80015f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001600:	4b65      	ldr	r3, [pc, #404]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	2202      	movs	r2, #2
 8001606:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800160a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800160e:	fa92 f2a2 	rbit	r2, r2
 8001612:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001616:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800161a:	fab2 f282 	clz	r2, r2
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	f042 0220 	orr.w	r2, r2, #32
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	f002 021f 	and.w	r2, r2, #31
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0b4      	beq.n	80015a0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	4b58      	ldr	r3, [pc, #352]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800163e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	21f8      	movs	r1, #248	@ 0xf8
 800164c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001654:	fa91 f1a1 	rbit	r1, r1
 8001658:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800165c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001660:	fab1 f181 	clz	r1, r1
 8001664:	b2c9      	uxtb	r1, r1
 8001666:	408b      	lsls	r3, r1
 8001668:	494b      	ldr	r1, [pc, #300]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
 800166e:	e065      	b.n	800173c <HAL_RCC_OscConfig+0x604>
 8001670:	2301      	movs	r3, #1
 8001672:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001682:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001690:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	461a      	mov	r2, r3
 8001698:	2300      	movs	r3, #0
 800169a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fa8a 	bl	8000bb4 <HAL_GetTick>
 80016a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff fa85 	bl	8000bb4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d902      	bls.n	80016bc <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f000 bd45 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80016ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80016da:	d802      	bhi.n	80016e2 <HAL_RCC_OscConfig+0x5aa>
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0x5d2>
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <HAL_RCC_OscConfig+0x660>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	2202      	movs	r2, #2
 800170c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001710:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001714:	fa92 f2a2 	rbit	r2, r2
 8001718:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800171c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001720:	fab2 f282 	clz	r2, r2
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f042 0220 	orr.w	r2, r2, #32
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	f002 021f 	and.w	r2, r2, #31
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1b4      	bne.n	80016a6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8115 	beq.w	800197c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d07e      	beq.n	8001860 <HAL_RCC_OscConfig+0x728>
 8001762:	2301      	movs	r3, #1
 8001764:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_RCC_OscConfig+0x664>)
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	461a      	mov	r2, r3
 8001788:	2301      	movs	r3, #1
 800178a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fa12 	bl	8000bb4 <HAL_GetTick>
 8001790:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001794:	e00f      	b.n	80017b6 <HAL_RCC_OscConfig+0x67e>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fa08 	bl	8000bb4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d902      	bls.n	80017b6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f000 bcc8 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017f4:	2202      	movs	r2, #2
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800180e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001810:	4bb0      	ldr	r3, [pc, #704]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800181c:	2102      	movs	r1, #2
 800181e:	6019      	str	r1, [r3, #0]
 8001820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001824:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f1a3 	rbit	r1, r3
 800182e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001832:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001836:	6019      	str	r1, [r3, #0]
  return result;
 8001838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0a0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x668>
 800185e:	e08d      	b.n	800197c <HAL_RCC_OscConfig+0x844>
 8001860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001864:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001870:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001882:	601a      	str	r2, [r3, #0]
  return result;
 8001884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001888:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800188c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	4b90      	ldr	r3, [pc, #576]	@ (8001ad8 <HAL_RCC_OscConfig+0x9a0>)
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	461a      	mov	r2, r3
 800189e:	2300      	movs	r3, #0
 80018a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7ff f987 	bl	8000bb4 <HAL_GetTick>
 80018a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff f982 	bl	8000bb4 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d902      	bls.n	80018c2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	f000 bc42 	b.w	8002146 <HAL_RCC_OscConfig+0x100e>
 80018c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018ee:	2202      	movs	r2, #2
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001904:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001912:	2202      	movs	r2, #2
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001928:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800192c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192e:	4b69      	ldr	r3, [pc, #420]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001930:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800193a:	2102      	movs	r1, #2
 800193c:	6019      	str	r1, [r3, #0]
 800193e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001942:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f1a3 	rbit	r1, r3
 800194c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001950:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001954:	6019      	str	r1, [r3, #0]
  return result;
 8001956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d197      	bne.n	80018ac <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 819e 	beq.w	8001cce <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001998:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d116      	bne.n	80019d2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	61d3      	str	r3, [r2, #28]
 80019b0:	4b48      	ldr	r3, [pc, #288]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80019b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019bc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80019ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b42      	ldr	r3, [pc, #264]	@ (8001adc <HAL_RCC_OscConfig+0x9a4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d11a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019de:	4b3f      	ldr	r3, [pc, #252]	@ (8001adc <HAL_RCC_OscConfig+0x9a4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3e      	ldr	r2, [pc, #248]	@ (8001adc <HAL_RCC_OscConfig+0x9a4>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ea:	f7ff f8e3 	bl	8000bb4 <HAL_GetTick>
 80019ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	e009      	b.n	8001a08 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f4:	f7ff f8de 	bl	8000bb4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	@ 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e39e      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_OscConfig+0x9a4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ef      	beq.n	80019f4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x8fa>
 8001a24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	e035      	b.n	8001a9e <HAL_RCC_OscConfig+0x966>
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x924>
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a23      	ldr	r2, [pc, #140]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a20      	ldr	r2, [pc, #128]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	e020      	b.n	8001a9e <HAL_RCC_OscConfig+0x966>
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x94e>
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a18      	ldr	r2, [pc, #96]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0x966>
 8001a86:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <HAL_RCC_OscConfig+0x99c>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f880 	bl	8000bb4 <HAL_GetTick>
 8001ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	e012      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff f87b 	bl	8000bb4 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d908      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e339      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	10908120 	.word	0x10908120
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ae8:	2202      	movs	r2, #2
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b08:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b22:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b26:	601a      	str	r2, [r3, #0]
  return result;
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0xa10>
 8001b42:	4b98      	ldr	r3, [pc, #608]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0xa38>
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b50:	2202      	movs	r2, #2
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b78:	2102      	movs	r1, #2
 8001b7a:	6011      	str	r1, [r2, #0]
 8001b7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	fa92 f1a2 	rbit	r1, r2
 8001b8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b8e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b92:	6011      	str	r1, [r2, #0]
  return result;
 8001b94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b98:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f43f af7f 	beq.w	8001aba <HAL_RCC_OscConfig+0x982>
 8001bbc:	e07d      	b.n	8001cba <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7fe fff9 	bl	8000bb4 <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fff4 	bl	8000bb4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e2b2      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
 8001be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001be8:	2202      	movs	r2, #2
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c26:	601a      	str	r2, [r3, #0]
  return result;
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_OscConfig+0xb10>
 8001c42:	4b58      	ldr	r3, [pc, #352]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	e013      	b.n	8001c70 <HAL_RCC_OscConfig+0xb38>
 8001c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c50:	2202      	movs	r2, #2
 8001c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c66:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c74:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c78:	2102      	movs	r1, #2
 8001c7a:	6011      	str	r1, [r2, #0]
 8001c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c80:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	fa92 f1a2 	rbit	r1, r2
 8001c8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c8e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c92:	6011      	str	r1, [r2, #0]
  return result;
 8001c94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c98:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	fab2 f282 	clz	r2, r2
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f002 021f 	and.w	r2, r2, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d186      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cba:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d105      	bne.n	8001cce <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc2:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a37      	ldr	r2, [pc, #220]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8232 	beq.w	8002144 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	f000 8201 	beq.w	80020f0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	f040 8157 	bne.w	8001fae <HAL_RCC_OscConfig+0xe76>
 8001d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d04:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d20:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d24:	601a      	str	r2, [r3, #0]
  return result;
 8001d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d2e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d3a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe ff35 	bl	8000bb4 <HAL_GetTick>
 8001d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	e009      	b.n	8001d64 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe ff30 	bl	8000bb4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1f0      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
 8001d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d76:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d88:	601a      	str	r2, [r3, #0]
  return result;
 8001d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d9c:	d804      	bhi.n	8001da8 <HAL_RCC_OscConfig+0xc70>
 8001d9e:	4b01      	ldr	r3, [pc, #4]	@ (8001da4 <HAL_RCC_OscConfig+0xc6c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e029      	b.n	8001df8 <HAL_RCC_OscConfig+0xcc0>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001db0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001dd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fa93 f2a3 	rbit	r2, r3
 8001dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dee:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	4bc3      	ldr	r3, [pc, #780]	@ (8002104 <HAL_RCC_OscConfig+0xfcc>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dfc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e00:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e04:	6011      	str	r1, [r2, #0]
 8001e06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e0a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fa92 f1a2 	rbit	r1, r2
 8001e14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e18:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e1c:	6011      	str	r1, [r2, #0]
  return result;
 8001e1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e22:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f042 0220 	orr.w	r2, r2, #32
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	f002 021f 	and.w	r2, r2, #31
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d185      	bne.n	8001d50 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4baf      	ldr	r3, [pc, #700]	@ (8002104 <HAL_RCC_OscConfig+0xfcc>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	49a7      	ldr	r1, [pc, #668]	@ (8002104 <HAL_RCC_OscConfig+0xfcc>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
 8001e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e70:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e90:	601a      	str	r2, [r3, #0]
  return result;
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e9a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ea6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	461a      	mov	r2, r3
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fe7f 	bl	8000bb4 <HAL_GetTick>
 8001eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eba:	e009      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7fe fe7a 	bl	8000bb4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e13a      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
 8001ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ef4:	601a      	str	r2, [r3, #0]
  return result;
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001efe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f08:	d802      	bhi.n	8001f10 <HAL_RCC_OscConfig+0xdd8>
 8001f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8002104 <HAL_RCC_OscConfig+0xfcc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e027      	b.n	8001f60 <HAL_RCC_OscConfig+0xe28>
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fa93 f2a3 	rbit	r2, r3
 8001f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f56:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	4b69      	ldr	r3, [pc, #420]	@ (8002104 <HAL_RCC_OscConfig+0xfcc>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f64:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f6c:	6011      	str	r1, [r2, #0]
 8001f6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f72:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fa92 f1a2 	rbit	r1, r2
 8001f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f80:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f84:	6011      	str	r1, [r2, #0]
  return result;
 8001f86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f8a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d087      	beq.n	8001ebc <HAL_RCC_OscConfig+0xd84>
 8001fac:	e0ca      	b.n	8002144 <HAL_RCC_OscConfig+0x100c>
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001fb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001fd2:	601a      	str	r2, [r3, #0]
  return result;
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001fdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fe8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fdde 	bl	8000bb4 <HAL_GetTick>
 8001ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	e009      	b.n	8002012 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fdd9 	bl	8000bb4 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e099      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800201a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800201e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002036:	601a      	str	r2, [r3, #0]
  return result;
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002040:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b3f      	cmp	r3, #63	@ 0x3f
 800204a:	d802      	bhi.n	8002052 <HAL_RCC_OscConfig+0xf1a>
 800204c:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <HAL_RCC_OscConfig+0xfcc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e027      	b.n	80020a2 <HAL_RCC_OscConfig+0xf6a>
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800205a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002064:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002080:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002098:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_RCC_OscConfig+0xfcc>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020a6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80020aa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020ae:	6011      	str	r1, [r2, #0]
 80020b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020b4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	fa92 f1a2 	rbit	r1, r2
 80020be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020c2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80020c6:	6011      	str	r1, [r2, #0]
  return result;
 80020c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020cc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d187      	bne.n	8001ffe <HAL_RCC_OscConfig+0xec6>
 80020ee:	e029      	b.n	8002144 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d103      	bne.n	8002108 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e020      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
 8002104:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_OscConfig+0x1018>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002110:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002114:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	d10b      	bne.n	8002140 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002128:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800212c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b09e      	sub	sp, #120	@ 0x78
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e154      	b.n	8002416 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b89      	ldr	r3, [pc, #548]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b86      	ldr	r3, [pc, #536]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4984      	ldr	r1, [pc, #528]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b82      	ldr	r3, [pc, #520]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e13c      	b.n	8002416 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4978      	ldr	r1, [pc, #480]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80cd 	beq.w	8002362 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d137      	bne.n	8002240 <HAL_RCC_ClockConfig+0xec>
 80021d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80021de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80021e8:	d802      	bhi.n	80021f0 <HAL_RCC_ClockConfig+0x9c>
 80021ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_ClockConfig+0xbc>
 80021f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80021fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002202:	663b      	str	r3, [r7, #96]	@ 0x60
 8002204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800220c:	4b62      	ldr	r3, [pc, #392]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002214:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002216:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800221e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f042 0220 	orr.w	r2, r2, #32
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f002 021f 	and.w	r2, r2, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d171      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0ea      	b.n	8002416 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d137      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x164>
 8002248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800224c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002260:	d802      	bhi.n	8002268 <HAL_RCC_ClockConfig+0x114>
 8002262:	4b4d      	ldr	r3, [pc, #308]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e00f      	b.n	8002288 <HAL_RCC_ClockConfig+0x134>
 8002268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800226c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	647b      	str	r3, [r7, #68]	@ 0x44
 8002276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800227a:	643b      	str	r3, [r7, #64]	@ 0x40
 800227c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002284:	4b44      	ldr	r3, [pc, #272]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800228c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800228e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002298:	fab2 f282 	clz	r2, r2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f042 0220 	orr.w	r2, r2, #32
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f002 021f 	and.w	r2, r2, #31
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d135      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0ae      	b.n	8002416 <HAL_RCC_ClockConfig+0x2c2>
 80022b8:	2302      	movs	r3, #2
 80022ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ce:	d802      	bhi.n	80022d6 <HAL_RCC_ClockConfig+0x182>
 80022d0:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e00d      	b.n	80022f2 <HAL_RCC_ClockConfig+0x19e>
 80022d6:	2302      	movs	r3, #2
 80022d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e2:	2302      	movs	r3, #2
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	2202      	movs	r2, #2
 80022f4:	61ba      	str	r2, [r7, #24]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	fa92 f2a2 	rbit	r2, r2
 80022fc:	617a      	str	r2, [r7, #20]
  return result;
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	fab2 f282 	clz	r2, r2
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f042 0220 	orr.w	r2, r2, #32
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f002 021f 	and.w	r2, r2, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f202 	lsl.w	r2, r1, r2
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e07a      	b.n	8002416 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 0203 	bic.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	491a      	ldr	r1, [pc, #104]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002332:	f7fe fc3f 	bl	8000bb4 <HAL_GetTick>
 8002336:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002338:	e00a      	b.n	8002350 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233a:	f7fe fc3b 	bl	8000bb4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e062      	b.n	8002416 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_RCC_ClockConfig+0x244>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 020c 	and.w	r2, r3, #12
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	429a      	cmp	r2, r3
 8002360:	d1eb      	bne.n	800233a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002362:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d215      	bcs.n	800239c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 0207 	bic.w	r2, r3, #7
 8002378:	4906      	ldr	r1, [pc, #24]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <HAL_RCC_ClockConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d006      	beq.n	800239c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e041      	b.n	8002416 <HAL_RCC_ClockConfig+0x2c2>
 8002392:	bf00      	nop
 8002394:	40022000 	.word	0x40022000
 8002398:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <HAL_RCC_ClockConfig+0x2cc>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	491a      	ldr	r1, [pc, #104]	@ (8002420 <HAL_RCC_ClockConfig+0x2cc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_RCC_ClockConfig+0x2cc>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4912      	ldr	r1, [pc, #72]	@ (8002420 <HAL_RCC_ClockConfig+0x2cc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023da:	f000 f829 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023de:	4601      	mov	r1, r0
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_RCC_ClockConfig+0x2cc>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e8:	22f0      	movs	r2, #240	@ 0xf0
 80023ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	60fa      	str	r2, [r7, #12]
  return result;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	40d3      	lsrs	r3, r2
 80023fe:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <HAL_RCC_ClockConfig+0x2d0>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	fa21 f303 	lsr.w	r3, r1, r3
 8002406:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <HAL_RCC_ClockConfig+0x2d4>)
 8002408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <HAL_RCC_ClockConfig+0x2d8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fb8c 	bl	8000b2c <HAL_InitTick>
  
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3778      	adds	r7, #120	@ 0x78
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	08004418 	.word	0x08004418
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x30>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x36>
 800245e:	e026      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002462:	613b      	str	r3, [r7, #16]
      break;
 8002464:	e026      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002470:	5cd3      	ldrb	r3, [r2, r3]
 8002472:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800248c:	4a0e      	ldr	r2, [pc, #56]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	fbb2 f2f3 	udiv	r2, r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e004      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
      break;
 80024ac:	e002      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024b0:	613b      	str	r3, [r7, #16]
      break;
 80024b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b4:	693b      	ldr	r3, [r7, #16]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	007a1200 	.word	0x007a1200
 80024cc:	08004428 	.word	0x08004428
 80024d0:	08004438 	.word	0x08004438
 80024d4:	003d0900 	.word	0x003d0900

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b092      	sub	sp, #72	@ 0x48
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80d2 	beq.w	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10e      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4a49      	ldr	r2, [pc, #292]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	61d3      	str	r3, [r2, #28]
 8002514:	4b47      	ldr	r3, [pc, #284]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b44      	ldr	r3, [pc, #272]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a40      	ldr	r2, [pc, #256]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fb39 	bl	8000bb4 <HAL_GetTick>
 8002542:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fb35 	bl	8000bb4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	@ 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e167      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002564:	4b33      	ldr	r3, [pc, #204]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800256e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8082 	beq.w	800267a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002580:	429a      	cmp	r2, r3
 8002582:	d07a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800258e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	461a      	mov	r2, r3
 80025ae:	2301      	movs	r3, #1
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	461a      	mov	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025d6:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d049      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fae5 	bl	8000bb4 <HAL_GetTick>
 80025ea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fae1 	bl	8000bb4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e111      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002604:	2302      	movs	r3, #2
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002610:	2302      	movs	r3, #2
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	61fb      	str	r3, [r7, #28]
  return result;
 800261c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800262e:	4b01      	ldr	r3, [pc, #4]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	e00d      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	10908100 	.word	0x10908100
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	4b78      	ldr	r3, [pc, #480]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	2202      	movs	r2, #2
 8002652:	613a      	str	r2, [r7, #16]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	fa92 f2a2 	rbit	r2, r2
 800265a:	60fa      	str	r2, [r7, #12]
  return result;
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	fab2 f282 	clz	r2, r2
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f002 021f 	and.w	r2, r2, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0b9      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800267a:	4b6d      	ldr	r3, [pc, #436]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	496a      	ldr	r1, [pc, #424]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002688:	4313      	orrs	r3, r2
 800268a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800268c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a65      	ldr	r2, [pc, #404]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800269e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ac:	4b60      	ldr	r3, [pc, #384]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	f023 0203 	bic.w	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	495d      	ldr	r1, [pc, #372]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ca:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4956      	ldr	r1, [pc, #344]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026e8:	4b51      	ldr	r3, [pc, #324]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	494e      	ldr	r1, [pc, #312]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002706:	4b4a      	ldr	r3, [pc, #296]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f023 0210 	bic.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4947      	ldr	r1, [pc, #284]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002714:	4313      	orrs	r3, r2
 8002716:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002724:	4b42      	ldr	r3, [pc, #264]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	493f      	ldr	r1, [pc, #252]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002742:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f023 0220 	bic.w	r2, r3, #32
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4938      	ldr	r1, [pc, #224]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002750:	4313      	orrs	r3, r2
 8002752:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002760:	4b33      	ldr	r3, [pc, #204]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	4930      	ldr	r1, [pc, #192]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800276e:	4313      	orrs	r3, r2
 8002770:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800277e:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4929      	ldr	r1, [pc, #164]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800278c:	4313      	orrs	r3, r2
 800278e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800279c:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	4921      	ldr	r1, [pc, #132]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	491a      	ldr	r1, [pc, #104]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027d8:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	4912      	ldr	r1, [pc, #72]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	490b      	ldr	r1, [pc, #44]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002804:	4313      	orrs	r3, r2
 8002806:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002820:	4903      	ldr	r1, [pc, #12]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002822:	4313      	orrs	r3, r2
 8002824:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3748      	adds	r7, #72	@ 0x48
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e09d      	b.n	8002982 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002856:	d009      	beq.n	800286c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
 800285e:	e005      	b.n	800286c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fd ffac 	bl	80007e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028ac:	d902      	bls.n	80028b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	e002      	b.n	80028ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80028c2:	d007      	beq.n	80028d4 <HAL_SPI_Init+0xa0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028cc:	d002      	beq.n	80028d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	ea42 0103 	orr.w	r1, r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	0c1b      	lsrs	r3, r3, #16
 8002930:	f003 0204 	and.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002950:	ea42 0103 	orr.w	r1, r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002970:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b088      	sub	sp, #32
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_SPI_Transmit+0x22>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e15f      	b.n	8002c6c <HAL_SPI_Transmit+0x2e2>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029b4:	f7fe f8fe 	bl	8000bb4 <HAL_GetTick>
 80029b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ce:	e148      	b.n	8002c62 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_SPI_Transmit+0x52>
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029e0:	e13f      	b.n	8002c62 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2203      	movs	r2, #3
 80029e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a2c:	d10f      	bne.n	8002a4e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d007      	beq.n	8002a6c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a74:	d94f      	bls.n	8002b16 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_SPI_Transmit+0xfa>
 8002a7e:	8afb      	ldrh	r3, [r7, #22]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d142      	bne.n	8002b0a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	1c9a      	adds	r2, r3, #2
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002aa8:	e02f      	b.n	8002b0a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d112      	bne.n	8002ade <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002adc:	e015      	b.n	8002b0a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ade:	f7fe f869 	bl	8000bb4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d803      	bhi.n	8002af6 <HAL_SPI_Transmit+0x16c>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002af4:	d102      	bne.n	8002afc <HAL_SPI_Transmit+0x172>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002b08:	e0ab      	b.n	8002c62 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ca      	bne.n	8002aaa <HAL_SPI_Transmit+0x120>
 8002b14:	e080      	b.n	8002c18 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_SPI_Transmit+0x19a>
 8002b1e:	8afb      	ldrh	r3, [r7, #22]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d174      	bne.n	8002c0e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d912      	bls.n	8002b54 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	881a      	ldrh	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b02      	subs	r3, #2
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b52:	e05c      	b.n	8002c0e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b7a:	e048      	b.n	8002c0e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d12b      	bne.n	8002be2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d912      	bls.n	8002bba <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba4:	1c9a      	adds	r2, r3, #2
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b02      	subs	r3, #2
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bb8:	e029      	b.n	8002c0e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002be0:	e015      	b.n	8002c0e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be2:	f7fd ffe7 	bl	8000bb4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d803      	bhi.n	8002bfa <HAL_SPI_Transmit+0x270>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf8:	d102      	bne.n	8002c00 <HAL_SPI_Transmit+0x276>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002c0c:	e029      	b.n	8002c62 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1b1      	bne.n	8002b7c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fcf9 	bl	8003614 <SPI_EndRxTxTransaction>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e003      	b.n	8002c62 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d002      	beq.n	8002c9a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
 8002c96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c98:	e11a      	b.n	8002ed0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ca2:	d112      	bne.n	8002cca <HAL_SPI_Receive+0x56>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10e      	bne.n	8002cca <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f90e 	bl	8002ee2 <HAL_SPI_TransmitReceive>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	e107      	b.n	8002eda <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_SPI_Receive+0x64>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e100      	b.n	8002eda <HAL_SPI_Receive+0x266>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce0:	f7fd ff68 	bl	8000bb4 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_SPI_Receive+0x7e>
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cf6:	e0eb      	b.n	8002ed0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d42:	d908      	bls.n	8002d56 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	e007      	b.n	8002d66 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d64:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d6e:	d10f      	bne.n	8002d90 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b40      	cmp	r3, #64	@ 0x40
 8002d9c:	d007      	beq.n	8002dae <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002db6:	d86f      	bhi.n	8002e98 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002db8:	e034      	b.n	8002e24 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d117      	bne.n	8002df8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f103 020c 	add.w	r2, r3, #12
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002df6:	e015      	b.n	8002e24 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df8:	f7fd fedc 	bl	8000bb4 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d803      	bhi.n	8002e10 <HAL_SPI_Receive+0x19c>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e0e:	d102      	bne.n	8002e16 <HAL_SPI_Receive+0x1a2>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e22:	e055      	b.n	8002ed0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1c4      	bne.n	8002dba <HAL_SPI_Receive+0x146>
 8002e30:	e038      	b.n	8002ea4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d115      	bne.n	8002e6c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002e6a:	e015      	b.n	8002e98 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6c:	f7fd fea2 	bl	8000bb4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d803      	bhi.n	8002e84 <HAL_SPI_Receive+0x210>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e82:	d102      	bne.n	8002e8a <HAL_SPI_Receive+0x216>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e96:	e01b      	b.n	8002ed0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1c6      	bne.n	8002e32 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	6839      	ldr	r1, [r7, #0]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fb5b 	bl	8003564 <SPI_EndRxTransaction>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
 8002ec6:	e003      	b.n	8002ed0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b08a      	sub	sp, #40	@ 0x28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x26>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e20a      	b.n	800331e <HAL_SPI_TransmitReceive+0x43c>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f10:	f7fd fe50 	bl	8000bb4 <HAL_GetTick>
 8002f14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f2c:	7efb      	ldrb	r3, [r7, #27]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d00e      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x6e>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f38:	d106      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x66>
 8002f42:	7efb      	ldrb	r3, [r7, #27]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d003      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002f4e:	e1e0      	b.n	8003312 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x80>
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002f68:	e1d3      	b.n	8003312 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d003      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2205      	movs	r2, #5
 8002f7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	887a      	ldrh	r2, [r7, #2]
 8002faa:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc0:	d802      	bhi.n	8002fc8 <HAL_SPI_TransmitReceive+0xe6>
 8002fc2:	8a3b      	ldrh	r3, [r7, #16]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d908      	bls.n	8002fda <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	e007      	b.n	8002fea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fe8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff4:	2b40      	cmp	r3, #64	@ 0x40
 8002ff6:	d007      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003010:	f240 8081 	bls.w	8003116 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x140>
 800301c:	8a7b      	ldrh	r3, [r7, #18]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d16d      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	1c9a      	adds	r2, r3, #2
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003046:	e05a      	b.n	80030fe <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d11b      	bne.n	800308e <HAL_SPI_TransmitReceive+0x1ac>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <HAL_SPI_TransmitReceive+0x1ac>
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	2b01      	cmp	r3, #1
 8003064:	d113      	bne.n	800308e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	881a      	ldrh	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003076:	1c9a      	adds	r2, r3, #2
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d11c      	bne.n	80030d6 <HAL_SPI_TransmitReceive+0x1f4>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d016      	beq.n	80030d6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	b292      	uxth	r2, r2
 80030b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	1c9a      	adds	r2, r3, #2
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d2:	2301      	movs	r3, #1
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030d6:	f7fd fd6d 	bl	8000bb4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d80b      	bhi.n	80030fe <HAL_SPI_TransmitReceive+0x21c>
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ec:	d007      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80030fc:	e109      	b.n	8003312 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d19f      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x166>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d199      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x166>
 8003114:	e0e3      	b.n	80032de <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x244>
 800311e:	8a7b      	ldrh	r3, [r7, #18]
 8003120:	2b01      	cmp	r3, #1
 8003122:	f040 80cf 	bne.w	80032c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d912      	bls.n	8003156 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b02      	subs	r3, #2
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003154:	e0b6      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317c:	e0a2      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d134      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x314>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02f      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x314>
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	2b01      	cmp	r3, #1
 800319a:	d12c      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d912      	bls.n	80031cc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b02      	subs	r3, #2
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ca:	e012      	b.n	80031f2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d148      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x3b4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d042      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d923      	bls.n	8003264 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b02      	subs	r3, #2
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d81f      	bhi.n	8003292 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	e016      	b.n	8003292 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f103 020c 	add.w	r2, r3, #12
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003292:	2301      	movs	r3, #1
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003296:	f7fd fc8d 	bl	8000bb4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d803      	bhi.n	80032ae <HAL_SPI_TransmitReceive+0x3cc>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ac:	d102      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x3d2>
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80032c2:	e026      	b.n	8003312 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f47f af57 	bne.w	800317e <HAL_SPI_TransmitReceive+0x29c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f af50 	bne.w	800317e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f996 	bl	8003614 <SPI_EndRxTxTransaction>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003308:	e003      	b.n	8003312 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800331a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800331e:	4618      	mov	r0, r3
 8003320:	3728      	adds	r7, #40	@ 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003338:	f7fd fc3c 	bl	8000bb4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	4413      	add	r3, r2
 8003346:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003348:	f7fd fc34 	bl	8000bb4 <HAL_GetTick>
 800334c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800334e:	4b39      	ldr	r3, [pc, #228]	@ (8003434 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	015b      	lsls	r3, r3, #5
 8003354:	0d1b      	lsrs	r3, r3, #20
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800335e:	e054      	b.n	800340a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003366:	d050      	beq.n	800340a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003368:	f7fd fc24 	bl	8000bb4 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	429a      	cmp	r2, r3
 8003376:	d902      	bls.n	800337e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d13d      	bne.n	80033fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800338c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003396:	d111      	bne.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a0:	d004      	beq.n	80033ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033aa:	d107      	bne.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c4:	d10f      	bne.n	80033e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e017      	b.n	800342a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3b01      	subs	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4013      	ands	r3, r2
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	429a      	cmp	r2, r3
 8003426:	d19b      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800344a:	f7fd fbb3 	bl	8000bb4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	4413      	add	r3, r2
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800345a:	f7fd fbab 	bl	8000bb4 <HAL_GetTick>
 800345e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003468:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00da      	lsls	r2, r3, #3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	0d1b      	lsrs	r3, r3, #20
 8003478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003480:	e060      	b.n	8003544 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003488:	d107      	bne.n	800349a <SPI_WaitFifoStateUntilTimeout+0x62>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003498:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034a0:	d050      	beq.n	8003544 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034a2:	f7fd fb87 	bl	8000bb4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d902      	bls.n	80034b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d13d      	bne.n	8003534 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034d0:	d111      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034da:	d004      	beq.n	80034e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e4:	d107      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fe:	d10f      	bne.n	8003520 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e010      	b.n	8003556 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3b01      	subs	r3, #1
 8003542:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d196      	bne.n	8003482 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	@ 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000000 	.word	0x20000000

08003564 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003578:	d111      	bne.n	800359e <SPI_EndRxTransaction+0x3a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003582:	d004      	beq.n	800358e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358c:	d107      	bne.n	800359e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	2180      	movs	r1, #128	@ 0x80
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff febd 	bl	8003328 <SPI_WaitFlagStateUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e023      	b.n	800360c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035cc:	d11d      	bne.n	800360a <SPI_EndRxTransaction+0xa6>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d6:	d004      	beq.n	80035e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e0:	d113      	bne.n	800360a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff22 	bl	8003438 <SPI_WaitFifoStateUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e000      	b.n	800360c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff ff03 	bl	8003438 <SPI_WaitFifoStateUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e027      	b.n	8003698 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff fe68 	bl	8003328 <SPI_WaitFlagStateUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e014      	b.n	8003698 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2200      	movs	r2, #0
 8003676:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7ff fedc 	bl	8003438 <SPI_WaitFifoStateUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368a:	f043 0220 	orr.w	r2, r3, #32
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e000      	b.n	8003698 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e049      	b.n	8003746 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd f99c 	bl	8000a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 fa4a 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_TIM_PWM_Start+0x24>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	bf14      	ite	ne
 800376c:	2301      	movne	r3, #1
 800376e:	2300      	moveq	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e03c      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d109      	bne.n	800378e <HAL_TIM_PWM_Start+0x3e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e02f      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x58>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e022      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d109      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x72>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e015      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_PWM_Start+0x8c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e008      	b.n	80037ee <HAL_TIM_PWM_Start+0x9e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e097      	b.n	8003926 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0xb6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003804:	e023      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0xc6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003814:	e01b      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start+0xd6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003824:	e013      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d104      	bne.n	8003836 <HAL_TIM_PWM_Start+0xe6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003834:	e00b      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b10      	cmp	r3, #16
 800383a:	d104      	bne.n	8003846 <HAL_TIM_PWM_Start+0xf6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003844:	e003      	b.n	800384e <HAL_TIM_PWM_Start+0xfe>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2201      	movs	r2, #1
 8003854:	6839      	ldr	r1, [r7, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fd00 	bl	800425c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a33      	ldr	r2, [pc, #204]	@ (8003930 <HAL_TIM_PWM_Start+0x1e0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a32      	ldr	r2, [pc, #200]	@ (8003934 <HAL_TIM_PWM_Start+0x1e4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a30      	ldr	r2, [pc, #192]	@ (8003938 <HAL_TIM_PWM_Start+0x1e8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2f      	ldr	r2, [pc, #188]	@ (800393c <HAL_TIM_PWM_Start+0x1ec>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIM_PWM_Start+0x13e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2d      	ldr	r2, [pc, #180]	@ (8003940 <HAL_TIM_PWM_Start+0x1f0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_TIM_PWM_Start+0x142>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_TIM_PWM_Start+0x144>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a20      	ldr	r2, [pc, #128]	@ (8003930 <HAL_TIM_PWM_Start+0x1e0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <HAL_TIM_PWM_Start+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ba:	d013      	beq.n	80038e4 <HAL_TIM_PWM_Start+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a20      	ldr	r2, [pc, #128]	@ (8003944 <HAL_TIM_PWM_Start+0x1f4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_TIM_PWM_Start+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003948 <HAL_TIM_PWM_Start+0x1f8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_TIM_PWM_Start+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <HAL_TIM_PWM_Start+0x1e4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_TIM_PWM_Start+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a16      	ldr	r2, [pc, #88]	@ (8003938 <HAL_TIM_PWM_Start+0x1e8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d115      	bne.n	8003910 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	4b18      	ldr	r3, [pc, #96]	@ (800394c <HAL_TIM_PWM_Start+0x1fc>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d015      	beq.n	8003922 <HAL_TIM_PWM_Start+0x1d2>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d011      	beq.n	8003922 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390e:	e008      	b.n	8003922 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e000      	b.n	8003924 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40013400 	.word	0x40013400
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	00010007 	.word	0x00010007

08003950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800396a:	2302      	movs	r3, #2
 800396c:	e0ff      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b14      	cmp	r3, #20
 800397a:	f200 80f0 	bhi.w	8003b5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800397e:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	080039d9 	.word	0x080039d9
 8003988:	08003b5f 	.word	0x08003b5f
 800398c:	08003b5f 	.word	0x08003b5f
 8003990:	08003b5f 	.word	0x08003b5f
 8003994:	08003a19 	.word	0x08003a19
 8003998:	08003b5f 	.word	0x08003b5f
 800399c:	08003b5f 	.word	0x08003b5f
 80039a0:	08003b5f 	.word	0x08003b5f
 80039a4:	08003a5b 	.word	0x08003a5b
 80039a8:	08003b5f 	.word	0x08003b5f
 80039ac:	08003b5f 	.word	0x08003b5f
 80039b0:	08003b5f 	.word	0x08003b5f
 80039b4:	08003a9b 	.word	0x08003a9b
 80039b8:	08003b5f 	.word	0x08003b5f
 80039bc:	08003b5f 	.word	0x08003b5f
 80039c0:	08003b5f 	.word	0x08003b5f
 80039c4:	08003add 	.word	0x08003add
 80039c8:	08003b5f 	.word	0x08003b5f
 80039cc:	08003b5f 	.word	0x08003b5f
 80039d0:	08003b5f 	.word	0x08003b5f
 80039d4:	08003b1d 	.word	0x08003b1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f966 	bl	8003cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0208 	orr.w	r2, r2, #8
 80039f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6999      	ldr	r1, [r3, #24]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	619a      	str	r2, [r3, #24]
      break;
 8003a16:	e0a5      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f9d6 	bl	8003dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6999      	ldr	r1, [r3, #24]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	021a      	lsls	r2, r3, #8
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	619a      	str	r2, [r3, #24]
      break;
 8003a58:	e084      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fa3f 	bl	8003ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0208 	orr.w	r2, r2, #8
 8003a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0204 	bic.w	r2, r2, #4
 8003a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69d9      	ldr	r1, [r3, #28]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	61da      	str	r2, [r3, #28]
      break;
 8003a98:	e064      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 faa7 	bl	8003ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69d9      	ldr	r1, [r3, #28]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	021a      	lsls	r2, r3, #8
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	61da      	str	r2, [r3, #28]
      break;
 8003ada:	e043      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 faf0 	bl	80040c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0208 	orr.w	r2, r2, #8
 8003af6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0204 	bic.w	r2, r2, #4
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b1a:	e023      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fb34 	bl	8004190 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	021a      	lsls	r2, r3, #8
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b5c:	e002      	b.n	8003b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
      break;
 8003b62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop

08003b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a42      	ldr	r2, [pc, #264]	@ (8003c94 <TIM_Base_SetConfig+0x11c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00f      	beq.n	8003bb0 <TIM_Base_SetConfig+0x38>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b96:	d00b      	beq.n	8003bb0 <TIM_Base_SetConfig+0x38>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c98 <TIM_Base_SetConfig+0x120>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_Base_SetConfig+0x38>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8003c9c <TIM_Base_SetConfig+0x124>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_Base_SetConfig+0x38>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3d      	ldr	r2, [pc, #244]	@ (8003ca0 <TIM_Base_SetConfig+0x128>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d108      	bne.n	8003bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a33      	ldr	r2, [pc, #204]	@ (8003c94 <TIM_Base_SetConfig+0x11c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01b      	beq.n	8003c02 <TIM_Base_SetConfig+0x8a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd0:	d017      	beq.n	8003c02 <TIM_Base_SetConfig+0x8a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a30      	ldr	r2, [pc, #192]	@ (8003c98 <TIM_Base_SetConfig+0x120>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <TIM_Base_SetConfig+0x8a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c9c <TIM_Base_SetConfig+0x124>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <TIM_Base_SetConfig+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca0 <TIM_Base_SetConfig+0x128>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_Base_SetConfig+0x8a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca4 <TIM_Base_SetConfig+0x12c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_Base_SetConfig+0x8a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca8 <TIM_Base_SetConfig+0x130>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_Base_SetConfig+0x8a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8003cac <TIM_Base_SetConfig+0x134>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d108      	bne.n	8003c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <TIM_Base_SetConfig+0x11c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0xe8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a17      	ldr	r2, [pc, #92]	@ (8003ca0 <TIM_Base_SetConfig+0x128>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0xe8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ca4 <TIM_Base_SetConfig+0x12c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0xe8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <TIM_Base_SetConfig+0x130>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0xe8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a14      	ldr	r2, [pc, #80]	@ (8003cac <TIM_Base_SetConfig+0x134>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d103      	bne.n	8003c68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	611a      	str	r2, [r3, #16]
  }
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	40013400 	.word	0x40013400
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40014400 	.word	0x40014400
 8003cac:	40014800 	.word	0x40014800

08003cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f023 0201 	bic.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0303 	bic.w	r3, r3, #3
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f023 0302 	bic.w	r3, r3, #2
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dbc <TIM_OC1_SetConfig+0x10c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00f      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc0 <TIM_OC1_SetConfig+0x110>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc4 <TIM_OC1_SetConfig+0x114>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a29      	ldr	r2, [pc, #164]	@ (8003dc8 <TIM_OC1_SetConfig+0x118>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC1_SetConfig+0x80>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	@ (8003dcc <TIM_OC1_SetConfig+0x11c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0308 	bic.w	r3, r3, #8
 8003d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dbc <TIM_OC1_SetConfig+0x10c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc0 <TIM_OC1_SetConfig+0x110>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	@ (8003dc4 <TIM_OC1_SetConfig+0x114>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <TIM_OC1_SetConfig+0x118>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_OC1_SetConfig+0xc2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <TIM_OC1_SetConfig+0x11c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d111      	bne.n	8003d96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800

08003dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f023 0210 	bic.w	r2, r3, #16
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0320 	bic.w	r3, r3, #32
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a28      	ldr	r2, [pc, #160]	@ (8003ed0 <TIM_OC2_SetConfig+0x100>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_OC2_SetConfig+0x6c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a27      	ldr	r2, [pc, #156]	@ (8003ed4 <TIM_OC2_SetConfig+0x104>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10d      	bne.n	8003e58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed0 <TIM_OC2_SetConfig+0x100>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00f      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed4 <TIM_OC2_SetConfig+0x104>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed8 <TIM_OC2_SetConfig+0x108>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a1a      	ldr	r2, [pc, #104]	@ (8003edc <TIM_OC2_SetConfig+0x10c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_OC2_SetConfig+0xb0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a19      	ldr	r2, [pc, #100]	@ (8003ee0 <TIM_OC2_SetConfig+0x110>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d113      	bne.n	8003ea8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e86:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e8e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40013400 	.word	0x40013400
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800

08003ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a27      	ldr	r2, [pc, #156]	@ (8003fe0 <TIM_OC3_SetConfig+0xfc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_OC3_SetConfig+0x6a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <TIM_OC3_SetConfig+0x100>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10d      	bne.n	8003f6a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f68:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <TIM_OC3_SetConfig+0xfc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00f      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <TIM_OC3_SetConfig+0x100>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe8 <TIM_OC3_SetConfig+0x104>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d007      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a19      	ldr	r2, [pc, #100]	@ (8003fec <TIM_OC3_SetConfig+0x108>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_OC3_SetConfig+0xae>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <TIM_OC3_SetConfig+0x10c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d113      	bne.n	8003fba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40013400 	.word	0x40013400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40014800 	.word	0x40014800

08003ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <TIM_OC4_SetConfig+0xc0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00f      	beq.n	8004078 <TIM_OC4_SetConfig+0x84>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <TIM_OC4_SetConfig+0xc4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_OC4_SetConfig+0x84>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <TIM_OC4_SetConfig+0xc8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_OC4_SetConfig+0x84>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <TIM_OC4_SetConfig+0xcc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_OC4_SetConfig+0x84>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <TIM_OC4_SetConfig+0xd0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d109      	bne.n	800408c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800407e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40013400 	.word	0x40013400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800

080040c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800410c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a17      	ldr	r2, [pc, #92]	@ (800417c <TIM_OC5_SetConfig+0xb4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00f      	beq.n	8004142 <TIM_OC5_SetConfig+0x7a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a16      	ldr	r2, [pc, #88]	@ (8004180 <TIM_OC5_SetConfig+0xb8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00b      	beq.n	8004142 <TIM_OC5_SetConfig+0x7a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <TIM_OC5_SetConfig+0xbc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <TIM_OC5_SetConfig+0x7a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a14      	ldr	r2, [pc, #80]	@ (8004188 <TIM_OC5_SetConfig+0xc0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_OC5_SetConfig+0x7a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a13      	ldr	r2, [pc, #76]	@ (800418c <TIM_OC5_SetConfig+0xc4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d109      	bne.n	8004156 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	051b      	lsls	r3, r3, #20
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a18      	ldr	r2, [pc, #96]	@ (8004248 <TIM_OC6_SetConfig+0xb8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00f      	beq.n	800420c <TIM_OC6_SetConfig+0x7c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a17      	ldr	r2, [pc, #92]	@ (800424c <TIM_OC6_SetConfig+0xbc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00b      	beq.n	800420c <TIM_OC6_SetConfig+0x7c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a16      	ldr	r2, [pc, #88]	@ (8004250 <TIM_OC6_SetConfig+0xc0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_OC6_SetConfig+0x7c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <TIM_OC6_SetConfig+0xc4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_OC6_SetConfig+0x7c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a14      	ldr	r2, [pc, #80]	@ (8004258 <TIM_OC6_SetConfig+0xc8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d109      	bne.n	8004220 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	029b      	lsls	r3, r3, #10
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800

0800425c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	2201      	movs	r2, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	43db      	mvns	r3, r3
 800427e:	401a      	ands	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042bc:	2302      	movs	r3, #2
 80042be:	e063      	b.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d108      	bne.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004332:	d013      	beq.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a18      	ldr	r2, [pc, #96]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d10c      	bne.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	4313      	orrs	r3, r2
 800436c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40014000 	.word	0x40014000

080043a8 <memset>:
 80043a8:	4402      	add	r2, r0
 80043aa:	4603      	mov	r3, r0
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d100      	bne.n	80043b2 <memset+0xa>
 80043b0:	4770      	bx	lr
 80043b2:	f803 1b01 	strb.w	r1, [r3], #1
 80043b6:	e7f9      	b.n	80043ac <memset+0x4>

080043b8 <__libc_init_array>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	4d0d      	ldr	r5, [pc, #52]	@ (80043f0 <__libc_init_array+0x38>)
 80043bc:	4c0d      	ldr	r4, [pc, #52]	@ (80043f4 <__libc_init_array+0x3c>)
 80043be:	1b64      	subs	r4, r4, r5
 80043c0:	10a4      	asrs	r4, r4, #2
 80043c2:	2600      	movs	r6, #0
 80043c4:	42a6      	cmp	r6, r4
 80043c6:	d109      	bne.n	80043dc <__libc_init_array+0x24>
 80043c8:	4d0b      	ldr	r5, [pc, #44]	@ (80043f8 <__libc_init_array+0x40>)
 80043ca:	4c0c      	ldr	r4, [pc, #48]	@ (80043fc <__libc_init_array+0x44>)
 80043cc:	f000 f818 	bl	8004400 <_init>
 80043d0:	1b64      	subs	r4, r4, r5
 80043d2:	10a4      	asrs	r4, r4, #2
 80043d4:	2600      	movs	r6, #0
 80043d6:	42a6      	cmp	r6, r4
 80043d8:	d105      	bne.n	80043e6 <__libc_init_array+0x2e>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e0:	4798      	blx	r3
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7ee      	b.n	80043c4 <__libc_init_array+0xc>
 80043e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ea:	4798      	blx	r3
 80043ec:	3601      	adds	r6, #1
 80043ee:	e7f2      	b.n	80043d6 <__libc_init_array+0x1e>
 80043f0:	08004448 	.word	0x08004448
 80043f4:	08004448 	.word	0x08004448
 80043f8:	08004448 	.word	0x08004448
 80043fc:	0800444c 	.word	0x0800444c

08004400 <_init>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr

0800440c <_fini>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr
