
soundtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003410  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  0000503c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080035d8  080035d8  0000503c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080035d8  080035d8  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d8  080035d8  000045d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035dc  080035dc  000045dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  080035e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000503c  2**0
                  CONTENTS
 10 .bss          000009f8  2000003c  2000003c  0000503c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a34  20000a34  0000503c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaff  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002585  00000000  00000000  00013b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  000160f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b3  00000000  00000000  00016d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dda6  00000000  00000000  0001772b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bdb  00000000  00000000  000354d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af0db  00000000  00000000  000460ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5187  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003300  00000000  00000000  000f51cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000f84cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003580 	.word	0x08003580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08003580 	.word	0x08003580

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <enable_clk>:
// gpio.c
#include "gpio.h"

static void enable_clk(GPIO_TypeDef *p) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    if      (p == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000212:	d106      	bne.n	8000222 <enable_clk+0x1e>
 8000214:	4b1b      	ldr	r3, [pc, #108]	@ (8000284 <enable_clk+0x80>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	4a1a      	ldr	r2, [pc, #104]	@ (8000284 <enable_clk+0x80>)
 800021a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800021e:	6153      	str	r3, [r2, #20]
    else if (p == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    else if (p == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    else if (p == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
    else if (p == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
}
 8000220:	e02a      	b.n	8000278 <enable_clk+0x74>
    else if (p == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a18      	ldr	r2, [pc, #96]	@ (8000288 <enable_clk+0x84>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d106      	bne.n	8000238 <enable_clk+0x34>
 800022a:	4b16      	ldr	r3, [pc, #88]	@ (8000284 <enable_clk+0x80>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a15      	ldr	r2, [pc, #84]	@ (8000284 <enable_clk+0x80>)
 8000230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000234:	6153      	str	r3, [r2, #20]
}
 8000236:	e01f      	b.n	8000278 <enable_clk+0x74>
    else if (p == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a14      	ldr	r2, [pc, #80]	@ (800028c <enable_clk+0x88>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d106      	bne.n	800024e <enable_clk+0x4a>
 8000240:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <enable_clk+0x80>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a0f      	ldr	r2, [pc, #60]	@ (8000284 <enable_clk+0x80>)
 8000246:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800024a:	6153      	str	r3, [r2, #20]
}
 800024c:	e014      	b.n	8000278 <enable_clk+0x74>
    else if (p == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a0f      	ldr	r2, [pc, #60]	@ (8000290 <enable_clk+0x8c>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d106      	bne.n	8000264 <enable_clk+0x60>
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <enable_clk+0x80>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <enable_clk+0x80>)
 800025c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000260:	6153      	str	r3, [r2, #20]
}
 8000262:	e009      	b.n	8000278 <enable_clk+0x74>
    else if (p == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <enable_clk+0x90>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d105      	bne.n	8000278 <enable_clk+0x74>
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <enable_clk+0x80>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <enable_clk+0x80>)
 8000272:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000276:	6153      	str	r3, [r2, #20]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000
 8000288:	48000400 	.word	0x48000400
 800028c:	48000800 	.word	0x48000800
 8000290:	48000c00 	.word	0x48000c00
 8000294:	48001000 	.word	0x48001000

08000298 <GPIO_Init>:

void GPIO_Init(GPIO_TypeDef *port, uint16_t pin, uint32_t mode, uint32_t pull) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	607a      	str	r2, [r7, #4]
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	460b      	mov	r3, r1
 80002a6:	817b      	strh	r3, [r7, #10]
    enable_clk(port);
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ffab 	bl	8000204 <enable_clk>
    uint32_t pos = __builtin_ctz(pin);
 80002ae:	897b      	ldrh	r3, [r7, #10]
 80002b0:	fa93 f3a3 	rbit	r3, r3
 80002b4:	fab3 f383 	clz	r3, r3
 80002b8:	617b      	str	r3, [r7, #20]
    port->MODER = (port->MODER & ~(3u << (pos*2)))
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	2103      	movs	r1, #3
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	43db      	mvns	r3, r3
 80002ca:	401a      	ands	r2, r3
                |  (mode   << (pos*2));
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	6879      	ldr	r1, [r7, #4]
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	431a      	orrs	r2, r3
    port->MODER = (port->MODER & ~(3u << (pos*2)))
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	601a      	str	r2, [r3, #0]
    port->PUPDR = (port->PUPDR & ~(3u << (pos*2)))
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	68da      	ldr	r2, [r3, #12]
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	2103      	movs	r1, #3
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	43db      	mvns	r3, r3
 80002ec:	401a      	ands	r2, r3
                |  (pull   << (pos*2));
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	6839      	ldr	r1, [r7, #0]
 80002f4:	fa01 f303 	lsl.w	r3, r1, r3
 80002f8:	431a      	orrs	r2, r3
    port->PUPDR = (port->PUPDR & ~(3u << (pos*2)))
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	60da      	str	r2, [r3, #12]
}
 80002fe:	bf00      	nop
 8000300:	3718      	adds	r7, #24
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <GPIO_Write>:

void GPIO_Write(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state) {
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	460b      	mov	r3, r1
 8000310:	807b      	strh	r3, [r7, #2]
 8000312:	4613      	mov	r3, r2
 8000314:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) port->BSRR = pin;
 8000316:	787b      	ldrb	r3, [r7, #1]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d103      	bne.n	8000324 <GPIO_Write+0x1e>
 800031c:	887a      	ldrh	r2, [r7, #2]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	619a      	str	r2, [r3, #24]
    else                       port->BRR  = pin;
}
 8000322:	e002      	b.n	800032a <GPIO_Write+0x24>
    else                       port->BRR  = pin;
 8000324:	887a      	ldrh	r2, [r7, #2]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
	...

08000338 <GPIO_EXTI_SetCallback>:
}

// EXTI support
static void (*exti_cb)(uint16_t) = 0;

void GPIO_EXTI_SetCallback(void (*cb)(uint16_t pin)) {
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    exti_cb = cb;
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <GPIO_EXTI_SetCallback+0x1c>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000058 	.word	0x20000058

08000358 <GPIO_EXTI_Init>:

void GPIO_EXTI_Init(GPIO_TypeDef *port, uint16_t pin, uint32_t trig) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	460b      	mov	r3, r1
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	817b      	strh	r3, [r7, #10]
    uint32_t line  = __builtin_ctz(pin);
 8000366:	897b      	ldrh	r3, [r7, #10]
 8000368:	fa93 f3a3 	rbit	r3, r3
 800036c:	fab3 f383 	clz	r3, r3
 8000370:	61fb      	str	r3, [r7, #28]
    RCC->APB2ENR  |= RCC_APB2ENR_SYSCFGEN;
 8000372:	4b36      	ldr	r3, [pc, #216]	@ (800044c <GPIO_EXTI_Init+0xf4>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a35      	ldr	r2, [pc, #212]	@ (800044c <GPIO_EXTI_Init+0xf4>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
    uint32_t idx    = line >> 2;
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	61bb      	str	r3, [r7, #24]
    uint32_t shift  = (line & 3) * 4;
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	f003 0303 	and.w	r3, r3, #3
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	617b      	str	r3, [r7, #20]
    uint32_t src    = (port==GPIOA?0:
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000394:	d013      	beq.n	80003be <GPIO_EXTI_Init+0x66>
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4a2d      	ldr	r2, [pc, #180]	@ (8000450 <GPIO_EXTI_Init+0xf8>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d00d      	beq.n	80003ba <GPIO_EXTI_Init+0x62>
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000454 <GPIO_EXTI_Init+0xfc>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d007      	beq.n	80003b6 <GPIO_EXTI_Init+0x5e>
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000458 <GPIO_EXTI_Init+0x100>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d101      	bne.n	80003b2 <GPIO_EXTI_Init+0x5a>
 80003ae:	2303      	movs	r3, #3
 80003b0:	e006      	b.n	80003c0 <GPIO_EXTI_Init+0x68>
 80003b2:	2304      	movs	r3, #4
 80003b4:	e004      	b.n	80003c0 <GPIO_EXTI_Init+0x68>
 80003b6:	2302      	movs	r3, #2
 80003b8:	e002      	b.n	80003c0 <GPIO_EXTI_Init+0x68>
 80003ba:	2301      	movs	r3, #1
 80003bc:	e000      	b.n	80003c0 <GPIO_EXTI_Init+0x68>
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
                       port==GPIOB?1:
                       port==GPIOC?2:
                       port==GPIOD?3:4);
    SYSCFG->EXTICR[idx] = (SYSCFG->EXTICR[idx] & ~(0xFu << shift))
 80003c2:	4a26      	ldr	r2, [pc, #152]	@ (800045c <GPIO_EXTI_Init+0x104>)
 80003c4:	69bb      	ldr	r3, [r7, #24]
 80003c6:	3302      	adds	r3, #2
 80003c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003cc:	210f      	movs	r1, #15
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	43db      	mvns	r3, r3
 80003d6:	401a      	ands	r2, r3
                        |  (src << shift);
 80003d8:	6939      	ldr	r1, [r7, #16]
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
    SYSCFG->EXTICR[idx] = (SYSCFG->EXTICR[idx] & ~(0xFu << shift))
 80003e0:	491e      	ldr	r1, [pc, #120]	@ (800045c <GPIO_EXTI_Init+0x104>)
                        |  (src << shift);
 80003e2:	431a      	orrs	r2, r3
    SYSCFG->EXTICR[idx] = (SYSCFG->EXTICR[idx] & ~(0xFu << shift))
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	3302      	adds	r3, #2
 80003e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if (trig & GPIO_EXTI_RISING)  EXTI->RTSR |= (1u << line);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d008      	beq.n	8000408 <GPIO_EXTI_Init+0xb0>
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <GPIO_EXTI_Init+0x108>)
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	2101      	movs	r1, #1
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000402:	4917      	ldr	r1, [pc, #92]	@ (8000460 <GPIO_EXTI_Init+0x108>)
 8000404:	4313      	orrs	r3, r2
 8000406:	608b      	str	r3, [r1, #8]
    if (trig & GPIO_EXTI_FALLING) EXTI->FTSR |= (1u << line);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f003 0302 	and.w	r3, r3, #2
 800040e:	2b00      	cmp	r3, #0
 8000410:	d008      	beq.n	8000424 <GPIO_EXTI_Init+0xcc>
 8000412:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <GPIO_EXTI_Init+0x108>)
 8000414:	68da      	ldr	r2, [r3, #12]
 8000416:	2101      	movs	r1, #1
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	4910      	ldr	r1, [pc, #64]	@ (8000460 <GPIO_EXTI_Init+0x108>)
 8000420:	4313      	orrs	r3, r2
 8000422:	60cb      	str	r3, [r1, #12]
    EXTI->IMR |= (1u << line);
 8000424:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <GPIO_EXTI_Init+0x108>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	2101      	movs	r1, #1
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	490b      	ldr	r1, [pc, #44]	@ (8000460 <GPIO_EXTI_Init+0x108>)
 8000432:	4313      	orrs	r3, r2
 8000434:	600b      	str	r3, [r1, #0]

    // enable all EXTI IRQs once
    NVIC_EnableIRQ(EXTI0_IRQn);        // for EXTI line 0 (PA0)
 8000436:	2006      	movs	r0, #6
 8000438:	f7ff fec6 	bl	80001c8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI2_TSC_IRQn);    // for EXTI line 2 (PA2, shared w/ TSC)
 800043c:	2008      	movs	r0, #8
 800043e:	f7ff fec3 	bl	80001c8 <__NVIC_EnableIRQ>
}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	48000400 	.word	0x48000400
 8000454:	48000800 	.word	0x48000800
 8000458:	48000c00 	.word	0x48000c00
 800045c:	40010000 	.word	0x40010000
 8000460:	40010400 	.word	0x40010400

08000464 <GPIO_EXTI_IRQHandler>:
void GPIO_EXTI_IRQHandler(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
    for (uint32_t l = 0; l < 16; l++) {
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	e01a      	b.n	80004a6 <GPIO_EXTI_IRQHandler+0x42>
        uint32_t mask = (1u << l);
 8000470:	2201      	movs	r2, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	603b      	str	r3, [r7, #0]
        if (EXTI->PR & mask) {
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <GPIO_EXTI_IRQHandler+0x54>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	4013      	ands	r3, r2
 8000482:	2b00      	cmp	r3, #0
 8000484:	d00c      	beq.n	80004a0 <GPIO_EXTI_IRQHandler+0x3c>
            EXTI->PR = mask;
 8000486:	4a0c      	ldr	r2, [pc, #48]	@ (80004b8 <GPIO_EXTI_IRQHandler+0x54>)
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	6153      	str	r3, [r2, #20]
            if (exti_cb) exti_cb(mask);
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <GPIO_EXTI_IRQHandler+0x58>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d005      	beq.n	80004a0 <GPIO_EXTI_IRQHandler+0x3c>
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <GPIO_EXTI_IRQHandler+0x58>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	b292      	uxth	r2, r2
 800049c:	4610      	mov	r0, r2
 800049e:	4798      	blx	r3
    for (uint32_t l = 0; l < 16; l++) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3301      	adds	r3, #1
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d9e1      	bls.n	8000470 <GPIO_EXTI_IRQHandler+0xc>
        }
    }
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40010400 	.word	0x40010400
 80004bc:	20000058 	.word	0x20000058

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 feff 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f85d 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 80004ce:	f000 f8bd 	bl	800064c <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d2:	f000 f8fb 	bl	80006cc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80004d6:	f000 f937 	bl	8000748 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  SerialInitialise(
 80004da:	2300      	movs	r3, #0
 80004dc:	2200      	movs	r2, #0
 80004de:	4925      	ldr	r1, [pc, #148]	@ (8000574 <main+0xb4>)
 80004e0:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80004e4:	f000 fb30 	bl	8000b48 <SerialInitialise>
     &USART1_PORT,
     NULL,     // no TX-complete callback
     NULL      // no RX callback
   );
  // === SERVO INIT ===
  enableClocks();           // turn on all GPIO banks
 80004e8:	f000 fcba 	bl	8000e60 <enableClocks>
  setupGPIOPinsTim2();      // configure PA1–PA3, PA15 as TIM2 outputs
 80004ec:	f000 fcc8 	bl	8000e80 <setupGPIOPinsTim2>
  setupTim2Pwm();           // set up TIM2 for 20 ms PWM
 80004f0:	f000 fcea 	bl	8000ec8 <setupTim2Pwm>
  servoAngle(2, 10);
 80004f4:	210a      	movs	r1, #10
 80004f6:	2002      	movs	r0, #2
 80004f8:	f000 fd3c 	bl	8000f74 <servoAngle>
  // 1) Configure PA2 as an input with pull-up
  GPIO_Init(GPIOA, GPIO_PIN_0, /*mode=*/0, /*pull=*/2);
 80004fc:	2302      	movs	r3, #2
 80004fe:	2200      	movs	r2, #0
 8000500:	2101      	movs	r1, #1
 8000502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000506:	f7ff fec7 	bl	8000298 <GPIO_Init>
  GPIO_Init(GPIOA, GPIO_PIN_2, /*mode=*/0, /*pull=*/2);
 800050a:	2302      	movs	r3, #2
 800050c:	2200      	movs	r2, #0
 800050e:	2104      	movs	r1, #4
 8000510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000514:	f7ff fec0 	bl	8000298 <GPIO_Init>

  // 2) Register your callback
  GPIO_EXTI_SetCallback(my_exti_cb);
 8000518:	4817      	ldr	r0, [pc, #92]	@ (8000578 <main+0xb8>)
 800051a:	f7ff ff0d 	bl	8000338 <GPIO_EXTI_SetCallback>

  // 3) Enable EXTI on those pins
  GPIO_EXTI_Init(  GPIOA, GPIO_PIN_0, GPIO_EXTI_RISING);
 800051e:	2201      	movs	r2, #1
 8000520:	2101      	movs	r1, #1
 8000522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000526:	f7ff ff17 	bl	8000358 <GPIO_EXTI_Init>
  GPIO_EXTI_Init(  GPIOA, GPIO_PIN_2, GPIO_EXTI_FALLING);
 800052a:	2202      	movs	r2, #2
 800052c:	2104      	movs	r1, #4
 800052e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000532:	f7ff ff11 	bl	8000358 <GPIO_EXTI_Init>

  for (uint32_t i = 0; i < NUM_LEDS; i++) {
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e00b      	b.n	8000554 <main+0x94>
      GPIO_Init(
        LED_PORT,
        LED_PINS[i],
 800053c:	4a0f      	ldr	r2, [pc, #60]	@ (800057c <main+0xbc>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
      GPIO_Init(
 8000544:	2300      	movs	r3, #0
 8000546:	2201      	movs	r2, #1
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <main+0xc0>)
 800054a:	f7ff fea5 	bl	8000298 <GPIO_Init>
  for (uint32_t i = 0; i < NUM_LEDS; i++) {
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b07      	cmp	r3, #7
 8000558:	d9f0      	bls.n	800053c <main+0x7c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (goal_reached) {
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <main+0xc4>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0fa      	beq.n	800055a <main+0x9a>
          goal_reached = false;          // clear the trigger
 8000564:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <main+0xc4>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
          servoAngle(2, 10);             // move servo in “safe” context
 800056a:	210a      	movs	r1, #10
 800056c:	2002      	movs	r0, #2
 800056e:	f000 fd01 	bl	8000f74 <servoAngle>
      if (goal_reached) {
 8000572:	e7f2      	b.n	800055a <main+0x9a>
 8000574:	20000000 	.word	0x20000000
 8000578:	080007ed 	.word	0x080007ed
 800057c:	08003598 	.word	0x08003598
 8000580:	48001000 	.word	0x48001000
 8000584:	200003f4 	.word	0x200003f4

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09e      	sub	sp, #120	@ 0x78
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000592:	2228      	movs	r2, #40	@ 0x28
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ffb8 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	223c      	movs	r2, #60	@ 0x3c
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ffaa 	bl	800350c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b8:	2303      	movs	r3, #3
 80005ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2310      	movs	r3, #16
 80005cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80005dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fb30 	bl	8001c48 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005ee:	f000 f9c3 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000608:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800060c:	2101      	movs	r1, #1
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fb28 	bl	8002c64 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061a:	f000 f9ad 	bl	8000978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <SystemClock_Config+0xc0>)
 8000620:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fcda 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800063a:	f000 f99d 	bl	8000978 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3778      	adds	r7, #120	@ 0x78
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	00020020 	.word	0x00020020

0800064c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	@ (80006c4 <MX_I2C1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000658:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <MX_I2C1_Init+0x7c>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x74>)
 8000688:	f001 f8e4 	bl	8001854 <HAL_I2C_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000692:	f000 f971 	bl	8000978 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x74>)
 800069a:	f001 f976 	bl	800198a <HAL_I2CEx_ConfigAnalogFilter>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f968 	bl	8000978 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_I2C1_Init+0x74>)
 80006ac:	f001 f9b8 	bl	8001a20 <HAL_I2CEx_ConfigDigitalFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f95f 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000005c 	.word	0x2000005c
 80006c4:	40005400 	.word	0x40005400
 80006c8:	00201d2b 	.word	0x00201d2b

080006cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_SPI1_Init+0x74>)
 80006d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <MX_SPI1_Init+0x78>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_SPI1_Init+0x74>)
 80006d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_SPI1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_SPI1_Init+0x74>)
 80006e6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80006ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_SPI1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_SPI1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_SPI1_Init+0x74>)
 80006fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_SPI1_Init+0x74>)
 8000702:	2208      	movs	r2, #8
 8000704:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_SPI1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_SPI1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_SPI1_Init+0x74>)
 800071a:	2207      	movs	r2, #7
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <MX_SPI1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_SPI1_Init+0x74>)
 8000726:	2208      	movs	r2, #8
 8000728:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_SPI1_Init+0x74>)
 800072c:	f002 fe0a 	bl	8003344 <HAL_SPI_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 f91f 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000b0 	.word	0x200000b0
 8000744:	40013000 	.word	0x40013000

08000748 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 800074e:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <MX_USB_PCD_Init+0x40>)
 8000750:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000754:	2208      	movs	r2, #8
 8000756:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 800075a:	2202      	movs	r2, #2
 800075c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000760:	2202      	movs	r2, #2
 8000762:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000766:	2200      	movs	r2, #0
 8000768:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 800076c:	2200      	movs	r2, #0
 800076e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000772:	f001 f9a1 	bl	8001ab8 <HAL_PCD_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800077c:	f000 f8fc 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000114 	.word	0x20000114
 8000788:	40005c00 	.word	0x40005c00

0800078c <updateLeds>:

/* USER CODE BEGIN 4 */
/* helper to refresh the LEDs */
static void updateLeds(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
    // clamp streak so we never over-run the array
    uint32_t s = (streak > NUM_LEDS ? NUM_LEDS : streak);
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <updateLeds+0x54>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b08      	cmp	r3, #8
 8000798:	d802      	bhi.n	80007a0 <updateLeds+0x14>
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <updateLeds+0x54>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	e000      	b.n	80007a2 <updateLeds+0x16>
 80007a0:	2308      	movs	r3, #8
 80007a2:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < NUM_LEDS; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	e011      	b.n	80007ce <updateLeds+0x42>
    {
        // use our gpio module’s write function
        GPIO_Write(
          LED_PORT,
          LED_PINS[i],
 80007aa:	4a0e      	ldr	r2, [pc, #56]	@ (80007e4 <updateLeds+0x58>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
        GPIO_Write(
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	bf34      	ite	cc
 80007ba:	2301      	movcc	r3, #1
 80007bc:	2300      	movcs	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <updateLeds+0x5c>)
 80007c4:	f7ff fd9f 	bl	8000306 <GPIO_Write>
    for (uint32_t i = 0; i < NUM_LEDS; i++)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b07      	cmp	r3, #7
 80007d2:	d9ea      	bls.n	80007aa <updateLeds+0x1e>
          (i < s) ? GPIO_PIN_SET : GPIO_PIN_RESET
        );
    }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200003f0 	.word	0x200003f0
 80007e4:	08003598 	.word	0x08003598
 80007e8:	48001000 	.word	0x48001000

080007ec <my_exti_cb>:
static void my_exti_cb(uint16_t pin)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09c      	sub	sp, #112	@ 0x70
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 80007f6:	f000 fdc1 	bl	800137c <HAL_GetTick>
 80007fa:	66f8      	str	r0, [r7, #108]	@ 0x6c
    static uint32_t last_beep_time = 0;

    if (pin == GPIO_PIN_2)  // sound detected (beep)
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d12b      	bne.n	800085a <my_exti_cb+0x6e>
    {
        uint32_t now = HAL_GetTick();
 8000802:	f000 fdbb 	bl	800137c <HAL_GetTick>
 8000806:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (now - last_beep_time < BEEP_DEBOUNCE_MS)
 8000808:	4b55      	ldr	r3, [pc, #340]	@ (8000960 <my_exti_cb+0x174>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000814:	f0c0 80a0 	bcc.w	8000958 <my_exti_cb+0x16c>
            return;  // debounce: ignore if too soon after last beep

        last_beep_time = now;
 8000818:	4a51      	ldr	r2, [pc, #324]	@ (8000960 <my_exti_cb+0x174>)
 800081a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800081c:	6013      	str	r3, [r2, #0]
        sound = now;
 800081e:	4a51      	ldr	r2, [pc, #324]	@ (8000964 <my_exti_cb+0x178>)
 8000820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000822:	6013      	str	r3, [r2, #0]

        Data d = { .beep_data = { .timestamp = now } };
 8000824:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000830:	653b      	str	r3, [r7, #80]	@ 0x50
        uint8_t packet[ sizeof(Header) + sizeof(BeepData) ];
        uint16_t len = pack_buffer(packet, BEEP_EVENT, &d);
 8000832:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000836:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fa97 	bl	8000d70 <pack_buffer>
 8000842:	4603      	mov	r3, r0
 8000844:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
        SerialOutputBuffer(packet, len, &USART1_PORT);
 8000848:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 800084c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000850:	4a45      	ldr	r2, [pc, #276]	@ (8000968 <my_exti_cb+0x17c>)
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f8de 	bl	8000a14 <SerialOutputBuffer>
 8000858:	e07f      	b.n	800095a <my_exti_cb+0x16e>
    }
    else if (pin == GPIO_PIN_0) // button pressed
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d17c      	bne.n	800095a <my_exti_cb+0x16e>
    {
        btn = now;
 8000860:	4a42      	ldr	r2, [pc, #264]	@ (800096c <my_exti_cb+0x180>)
 8000862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000864:	6013      	str	r3, [r2, #0]
        uint32_t delta = (btn > sound) ? (btn - sound) : (sound - btn);
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <my_exti_cb+0x180>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b3e      	ldr	r3, [pc, #248]	@ (8000964 <my_exti_cb+0x178>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d905      	bls.n	800087e <my_exti_cb+0x92>
 8000872:	4b3e      	ldr	r3, [pc, #248]	@ (800096c <my_exti_cb+0x180>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b3b      	ldr	r3, [pc, #236]	@ (8000964 <my_exti_cb+0x178>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	e004      	b.n	8000888 <my_exti_cb+0x9c>
 800087e:	4b39      	ldr	r3, [pc, #228]	@ (8000964 <my_exti_cb+0x178>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b3a      	ldr	r3, [pc, #232]	@ (800096c <my_exti_cb+0x180>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	66bb      	str	r3, [r7, #104]	@ 0x68
        // === Transmit button press ===
        Data button_data = { .button_press_data = { .timestamp = now } };
 800088a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t packet[ sizeof(Header) + sizeof(ButtonPressData) ];
        uint16_t packet_len = pack_buffer(packet, BUTTON_PRESS, &button_data);
 8000898:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800089c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008a0:	2103      	movs	r1, #3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fa64 	bl	8000d70 <pack_buffer>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        SerialOutputBuffer(packet, packet_len, &USART1_PORT);
 80008ae:	f8b7 1066 	ldrh.w	r1, [r7, #102]	@ 0x66
 80008b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000968 <my_exti_cb+0x17c>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f8ab 	bl	8000a14 <SerialOutputBuffer>

        if (delta <= TIMING_WINDOW_MS)
 80008be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008c4:	d827      	bhi.n	8000916 <my_exti_cb+0x12a>
        {
            // Correct timing → increment streak
            streak++;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <my_exti_cb+0x184>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a28      	ldr	r2, [pc, #160]	@ (8000970 <my_exti_cb+0x184>)
 80008ce:	6013      	str	r3, [r2, #0]

            // Serialize & send new streak
            Data d = { .streak_data = { .streak = streak } };
 80008d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <my_exti_cb+0x184>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint8_t packet[ sizeof(Header) + sizeof(StreakData) ];
            uint16_t packet_len = pack_buffer(packet, STREAK_DATA, &d);
 80008e0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	2101      	movs	r1, #1
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fa40 	bl	8000d70 <pack_buffer>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            SerialOutputBuffer(packet, packet_len, &USART1_PORT);
 80008f6:	f8b7 1062 	ldrh.w	r1, [r7, #98]	@ 0x62
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000968 <my_exti_cb+0x17c>)
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f887 	bl	8000a14 <SerialOutputBuffer>
            // Optional: check for goal
            if (streak >= GOAL_SCORE)
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <my_exti_cb+0x184>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b04      	cmp	r3, #4
 800090c:	d921      	bls.n	8000952 <my_exti_cb+0x166>
            {
                goal_reached = true;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <my_exti_cb+0x188>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e01d      	b.n	8000952 <my_exti_cb+0x166>
            }
        }
        else
        {
            // Incorrect timing (or no prior beep) → reset streak
            streak = 0;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <my_exti_cb+0x184>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
            Data d = { .streak_data = { .streak = streak } };
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <my_exti_cb+0x184>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	617b      	str	r3, [r7, #20]
            uint8_t packet[ sizeof(Header) + sizeof(StreakData) ];
            uint16_t packet_len = pack_buffer(packet, STREAK_DATA, &d);
 800092c:	f107 0214 	add.w	r2, r7, #20
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2101      	movs	r1, #1
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fa1a 	bl	8000d70 <pack_buffer>
 800093c:	4603      	mov	r3, r0
 800093e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
            SerialOutputBuffer(packet, packet_len, &USART1_PORT);
 8000942:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <my_exti_cb+0x17c>)
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f861 	bl	8000a14 <SerialOutputBuffer>
        }

        updateLeds();  // redraw LEDs based on new streak
 8000952:	f7ff ff1b 	bl	800078c <updateLeds>
 8000956:	e000      	b.n	800095a <my_exti_cb+0x16e>
            return;  // debounce: ignore if too soon after last beep
 8000958:	bf00      	nop
    }
}
 800095a:	3770      	adds	r7, #112	@ 0x70
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200003f8 	.word	0x200003f8
 8000964:	200003ec 	.word	0x200003ec
 8000968:	20000000 	.word	0x20000000
 800096c:	200003e8 	.word	0x200003e8
 8000970:	200003f0 	.word	0x200003f0
 8000974:	200003f4 	.word	0x200003f4

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <__NVIC_EnableIRQ>:
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db0b      	blt.n	80009ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	4907      	ldr	r1, [pc, #28]	@ (80009bc <__NVIC_EnableIRQ+0x38>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	@ (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	@ (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <SerialOutputBuffer>:
    if (serial_port->tx_completion_function) {
        serial_port->tx_completion_function(counter);
    }
}

void SerialOutputBuffer(uint8_t *data, uint32_t length, SerialPort *serial_port) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
    // reset indices
    txIndex  = 0;
 8000a20:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <SerialOutputBuffer+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
    txLength = length > TX_BUFFER_SIZE ? TX_BUFFER_SIZE : length;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a2c:	bf28      	it	cs
 8000a2e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8000a32:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <SerialOutputBuffer+0x54>)
 8000a34:	6013      	str	r3, [r2, #0]
    txInProgress = true;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <SerialOutputBuffer+0x58>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]

    // copy exactly `length` bytes into the TX buffer
    memcpy(txBuffer, data, txLength);
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <SerialOutputBuffer+0x54>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	480a      	ldr	r0, [pc, #40]	@ (8000a70 <SerialOutputBuffer+0x5c>)
 8000a46:	f002 fd8d 	bl	8003564 <memcpy>

    // kick off the interrupt‐driven send
    serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200003fc 	.word	0x200003fc
 8000a68:	20000400 	.word	0x20000400
 8000a6c:	20000504 	.word	0x20000504
 8000a70:	20000404 	.word	0x20000404

08000a74 <isRxQueueFull>:
static volatile uint8_t rxQueueTail = 0;


// Checks if the RX queue is full
// return true if the queue is full, false otherwise
static bool isRxQueueFull(void) {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
    return ((rxQueueTail + 1) % RX_QUEUE_SIZE) == rxQueueHead;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <isRxQueueFull+0x34>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	3301      	adds	r3, #1
 8000a80:	425a      	negs	r2, r3
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	f002 0207 	and.w	r2, r2, #7
 8000a8a:	bf58      	it	pl
 8000a8c:	4253      	negpl	r3, r2
 8000a8e:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <isRxQueueFull+0x38>)
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	4293      	cmp	r3, r2
 8000a96:	bf0c      	ite	eq
 8000a98:	2301      	moveq	r3, #1
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	20000a2d 	.word	0x20000a2d
 8000aac:	20000a2c 	.word	0x20000a2c

08000ab0 <EnqueueRxMessage>:
//Enqueues a complete message
// msg Pointer to the message to enqueue
// length Length of the message
// return true if the message was enqueued, false if queue is full

static bool EnqueueRxMessage(const char *msg, uint32_t length) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
    if (isRxQueueFull()) {
 8000aba:	f7ff ffdb 	bl	8000a74 <isRxQueueFull>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <EnqueueRxMessage+0x18>
        return false;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e037      	b.n	8000b38 <EnqueueRxMessage+0x88>
    }

    uint8_t tail = rxQueueTail;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <EnqueueRxMessage+0x90>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	73fb      	strb	r3, [r7, #15]
    uint32_t copyLength = (length < (sizeof(rxQueue[tail].message) - 1)) ?
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ad2:	bf28      	it	cs
 8000ad4:	237f      	movcs	r3, #127	@ 0x7f
 8000ad6:	60bb      	str	r3, [r7, #8]
                          length : (sizeof(rxQueue[tail].message) - 1);

    memcpy(rxQueue[tail].message, msg, copyLength);
 8000ad8:	7bfa      	ldrb	r2, [r7, #15]
 8000ada:	4613      	mov	r3, r2
 8000adc:	015b      	lsls	r3, r3, #5
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4a18      	ldr	r2, [pc, #96]	@ (8000b44 <EnqueueRxMessage+0x94>)
 8000ae4:	4413      	add	r3, r2
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fd3a 	bl	8003564 <memcpy>
    rxQueue[tail].message[copyLength] = '\0';
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	4914      	ldr	r1, [pc, #80]	@ (8000b44 <EnqueueRxMessage+0x94>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	015b      	lsls	r3, r3, #5
 8000af8:	4413      	add	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	18ca      	adds	r2, r1, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4413      	add	r3, r2
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
    rxQueue[tail].length = copyLength;
 8000b06:	7bfa      	ldrb	r2, [r7, #15]
 8000b08:	490e      	ldr	r1, [pc, #56]	@ (8000b44 <EnqueueRxMessage+0x94>)
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	015b      	lsls	r3, r3, #5
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	3380      	adds	r3, #128	@ 0x80
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	601a      	str	r2, [r3, #0]
    rxQueueTail = (rxQueueTail + 1) % RX_QUEUE_SIZE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <EnqueueRxMessage+0x90>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	3301      	adds	r3, #1
 8000b22:	425a      	negs	r2, r3
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	f002 0207 	and.w	r2, r2, #7
 8000b2c:	bf58      	it	pl
 8000b2e:	4253      	negpl	r3, r2
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b03      	ldr	r3, [pc, #12]	@ (8000b40 <EnqueueRxMessage+0x90>)
 8000b34:	701a      	strb	r2, [r3, #0]

    return true;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000a2d 	.word	0x20000a2d
 8000b44:	2000060c 	.word	0x2000060c

08000b48 <SerialInitialise>:
 tx_completion_function Function to call when TX is complete
 rx_completion_function Function to call when RX is complete
 */
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port,
                      void (*tx_completion_function)(uint32_t),
                      void (*rx_completion_function)(char *, uint32_t)) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
    serial_port->tx_completion_function = tx_completion_function;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	625a      	str	r2, [r3, #36]	@ 0x24
    serial_port->rx_completion_function = rx_completion_function;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	629a      	str	r2, [r3, #40]	@ 0x28

    // Enable required clocks
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b62:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <SerialInitialise+0xf4>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a35      	ldr	r2, [pc, #212]	@ (8000c3c <SerialInitialise+0xf4>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <SerialInitialise+0xf4>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a32      	ldr	r2, [pc, #200]	@ (8000c3c <SerialInitialise+0xf4>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6193      	str	r3, [r2, #24]
    RCC->AHBENR  |= serial_port->MaskAHBENR;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <SerialInitialise+0xf4>)
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	492e      	ldr	r1, [pc, #184]	@ (8000c3c <SerialInitialise+0xf4>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	614b      	str	r3, [r1, #20]

    // Configure GPIO pins
    serial_port->GPIO->MODER   = serial_port->SerialPinModeValue;
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	6952      	ldr	r2, [r2, #20]
 8000b90:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	6992      	ldr	r2, [r2, #24]
 8000b9a:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	6a19      	ldr	r1, [r3, #32]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	69da      	ldr	r2, [r3, #28]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	6a1a      	ldr	r2, [r3, #32]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable UART clocks
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <SerialInitialise+0xf4>)
 8000bc2:	69da      	ldr	r2, [r3, #28]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	491c      	ldr	r1, [pc, #112]	@ (8000c3c <SerialInitialise+0xf4>)
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <SerialInitialise+0xf4>)
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	4919      	ldr	r1, [pc, #100]	@ (8000c3c <SerialInitialise+0xf4>)
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	618b      	str	r3, [r1, #24]

    // === Compute BRR dynamically based on PCLK and baudRate ===
    uint32_t pclk;
    if (serial_port->UART == USART1) {
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <SerialInitialise+0xf8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d103      	bne.n	8000bee <SerialInitialise+0xa6>
        pclk = SystemCoreClock;  // USART1 is on APB2
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <SerialInitialise+0xfc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e001      	b.n	8000bf2 <SerialInitialise+0xaa>
    } else {
        // For USART2, USART3, etc. (typically APB1)
        // Replace 36000000 with your actual APB1 clock if not using HAL
        pclk = 48000000;
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <SerialInitialise+0x100>)
 8000bf0:	617b      	str	r3, [r7, #20]
    }

    serial_port->UART->BRR = (pclk + baudRate / 2U) / baudRate;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	085a      	lsrs	r2, r3, #1
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	18d1      	adds	r1, r2, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	fbb1 f2f2 	udiv	r2, r1, r2
 8000c04:	60da      	str	r2, [r3, #12]

    // Enable RX interrupt
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0220 	orr.w	r2, r2, #32
 8000c14:	601a      	str	r2, [r3, #0]

    // Enable UART TX/RX and UART itself
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f042 020d 	orr.w	r2, r2, #13
 8000c24:	601a      	str	r2, [r3, #0]

    // Configure NVIC (only if using USART1 here—can make dynamic if needed)
    NVIC_SetPriority(USART1_IRQn, 3);
 8000c26:	2103      	movs	r1, #3
 8000c28:	2025      	movs	r0, #37	@ 0x25
 8000c2a:	f7ff fec9 	bl	80009c0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8000c2e:	2025      	movs	r0, #37	@ 0x25
 8000c30:	f7ff fea8 	bl	8000984 <__NVIC_EnableIRQ>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40013800 	.word	0x40013800
 8000c44:	20000030 	.word	0x20000030
 8000c48:	02dc6c00 	.word	0x02dc6c00

08000c4c <USART1_IRQHandler>:
void Serial_WaitUntilTXComplete(void) {
    while (txInProgress);  // spin until TX is done
}
//USART Interrupt Handler (TX and RX)
void USART1_IRQHandler(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
    // Handle TX interrupts
    if (USART1_PORT.UART->ISR & USART_ISR_TXE) {
 8000c52:	4b3e      	ldr	r3, [pc, #248]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d021      	beq.n	8000ca4 <USART1_IRQHandler+0x58>
        if (txIndex < txLength) {
 8000c60:	4b3b      	ldr	r3, [pc, #236]	@ (8000d50 <USART1_IRQHandler+0x104>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <USART1_IRQHandler+0x108>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d20a      	bcs.n	8000c82 <USART1_IRQHandler+0x36>
            // Send next character
            USART1_PORT.UART->TDR = txBuffer[txIndex++];
 8000c6c:	4b38      	ldr	r3, [pc, #224]	@ (8000d50 <USART1_IRQHandler+0x104>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	4937      	ldr	r1, [pc, #220]	@ (8000d50 <USART1_IRQHandler+0x104>)
 8000c74:	600a      	str	r2, [r1, #0]
 8000c76:	4a38      	ldr	r2, [pc, #224]	@ (8000d58 <USART1_IRQHandler+0x10c>)
 8000c78:	5cd2      	ldrb	r2, [r2, r3]
 8000c7a:	4b34      	ldr	r3, [pc, #208]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000c80:	e010      	b.n	8000ca4 <USART1_IRQHandler+0x58>
        } else {
            // Transmission complete, disable TX interrupt
            USART1_PORT.UART->CR1 &= ~USART_CR1_TXEIE;
 8000c82:	4b32      	ldr	r3, [pc, #200]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c90:	601a      	str	r2, [r3, #0]
            txIndex = 0;
 8000c92:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <USART1_IRQHandler+0x104>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
            txLength = 0;
 8000c98:	4b2e      	ldr	r3, [pc, #184]	@ (8000d54 <USART1_IRQHandler+0x108>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
            txInProgress = false;
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d5c <USART1_IRQHandler+0x110>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
        }
    }

    // Handle RX interrupts
    if (USART1_PORT.UART->ISR & USART_ISR_RXNE) {
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d048      	beq.n	8000d44 <USART1_IRQHandler+0xf8>
        char c = USART1_PORT.UART->RDR;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	73fb      	strb	r3, [r7, #15]

        // Add character to active buffer if there's space
        if (rxIndex < RX_BUFFER_SIZE - 1) {
 8000cbc:	4b28      	ldr	r3, [pc, #160]	@ (8000d60 <USART1_IRQHandler+0x114>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b7e      	cmp	r3, #126	@ 0x7e
 8000cc2:	d80a      	bhi.n	8000cda <USART1_IRQHandler+0x8e>
            activeRxBuffer[rxIndex++] = c;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <USART1_IRQHandler+0x118>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b25      	ldr	r3, [pc, #148]	@ (8000d60 <USART1_IRQHandler+0x114>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1c59      	adds	r1, r3, #1
 8000cce:	4824      	ldr	r0, [pc, #144]	@ (8000d60 <USART1_IRQHandler+0x114>)
 8000cd0:	6001      	str	r1, [r0, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e002      	b.n	8000ce0 <USART1_IRQHandler+0x94>
        } else {
            rxIndex = 0; // Reset buffer if overflow occurs
 8000cda:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <USART1_IRQHandler+0x114>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
        }

        // Check for end of message
        if (c == '\r') {
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2b0d      	cmp	r3, #13
 8000ce4:	d12e      	bne.n	8000d44 <USART1_IRQHandler+0xf8>
            // Null-terminate the message
            activeRxBuffer[rxIndex] = '\0';
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <USART1_IRQHandler+0x118>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <USART1_IRQHandler+0x114>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]

            // Save pointer and length for the completed message
            volatile char *completedMessage = activeRxBuffer;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <USART1_IRQHandler+0x118>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60bb      	str	r3, [r7, #8]
            uint32_t messageLength = rxIndex;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <USART1_IRQHandler+0x114>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	607b      	str	r3, [r7, #4]

            // Switch active buffer before processing, so new chars go into the other one
            activeRxBuffer = (activeRxBuffer == rxBuffer1) ? rxBuffer2 : rxBuffer1;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <USART1_IRQHandler+0x118>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a18      	ldr	r2, [pc, #96]	@ (8000d68 <USART1_IRQHandler+0x11c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d101      	bne.n	8000d0e <USART1_IRQHandler+0xc2>
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <USART1_IRQHandler+0x120>)
 8000d0c:	e000      	b.n	8000d10 <USART1_IRQHandler+0xc4>
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <USART1_IRQHandler+0x11c>)
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <USART1_IRQHandler+0x118>)
 8000d12:	6013      	str	r3, [r2, #0]
            rxIndex = 0;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <USART1_IRQHandler+0x114>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]

            // Process immediately if not busy,
            // otherwise enqueue the message for later processing.
            volatile bool processingMessage;
            if (!processingMessage) {
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d009      	beq.n	8000d3c <USART1_IRQHandler+0xf0>
                // Not busy: process the message immediately via the registered callback
                if (USART1_PORT.rx_completion_function) {
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d009      	beq.n	8000d44 <USART1_IRQHandler+0xf8>
                    USART1_PORT.rx_completion_function((char *)completedMessage, messageLength);
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <USART1_IRQHandler+0x100>)
 8000d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	4798      	blx	r3
                    // If the queue is full... I should add error here
                }
            }
        }
    }
}
 8000d3a:	e003      	b.n	8000d44 <USART1_IRQHandler+0xf8>
                if (!EnqueueRxMessage((const char*)completedMessage, messageLength)) {
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	68b8      	ldr	r0, [r7, #8]
 8000d40:	f7ff feb6 	bl	8000ab0 <EnqueueRxMessage>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	200003fc 	.word	0x200003fc
 8000d54:	20000400 	.word	0x20000400
 8000d58:	20000404 	.word	0x20000404
 8000d5c:	20000504 	.word	0x20000504
 8000d60:	20000608 	.word	0x20000608
 8000d64:	2000002c 	.word	0x2000002c
 8000d68:	20000508 	.word	0x20000508
 8000d6c:	20000588 	.word	0x20000588

08000d70 <pack_buffer>:
#include "serialise.h"
#include <string.h>

// Function to pack data into a buffer for transmission
uint16_t pack_buffer(uint8_t *buffer, MessageType message_type, Data *data) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	72fb      	strb	r3, [r7, #11]
    Header header = {
 8000d7e:	23aa      	movs	r3, #170	@ 0xaa
 8000d80:	753b      	strb	r3, [r7, #20]
 8000d82:	2355      	movs	r3, #85	@ 0x55
 8000d84:	757b      	strb	r3, [r7, #21]
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	82fb      	strh	r3, [r7, #22]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	833b      	strh	r3, [r7, #24]
        .sentinel1    = SENTINEL_1,
        .sentinel2    = SENTINEL_2,
        .message_type = message_type,
        .data_length  = 0
    };
    uint16_t buffer_idx  = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	83bb      	strh	r3, [r7, #28]
    uint16_t data_length = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	83fb      	strh	r3, [r7, #30]

    // Determine payload size based on message type
    switch (message_type) {
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d817      	bhi.n	8000dce <pack_buffer+0x5e>
 8000d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000da4 <pack_buffer+0x34>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000db5 	.word	0x08000db5
 8000da8:	08000dbd 	.word	0x08000dbd
 8000dac:	08000dc3 	.word	0x08000dc3
 8000db0:	08000dc9 	.word	0x08000dc9
        case STRING_PACKET:
            data_length = data->string_packet.length;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	83fb      	strh	r3, [r7, #30]
            break;
 8000dba:	e00a      	b.n	8000dd2 <pack_buffer+0x62>
        case STREAK_DATA:
            data_length = sizeof(data->streak_data);
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	83fb      	strh	r3, [r7, #30]
            break;
 8000dc0:	e007      	b.n	8000dd2 <pack_buffer+0x62>
        case BEEP_EVENT:
            data_length = sizeof(data->beep_data);
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	83fb      	strh	r3, [r7, #30]
            break;
 8000dc6:	e004      	b.n	8000dd2 <pack_buffer+0x62>
        case BUTTON_PRESS:
            data_length = sizeof(data->button_press_data);
 8000dc8:	2304      	movs	r3, #4
 8000dca:	83fb      	strh	r3, [r7, #30]
            break;
 8000dcc:	e001      	b.n	8000dd2 <pack_buffer+0x62>
        default:
            return 0;  // unknown message type
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e042      	b.n	8000e58 <pack_buffer+0xe8>
    }
    header.data_length = data_length;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	833b      	strh	r3, [r7, #24]

    // 1) Copy header
    memcpy(buffer + buffer_idx, &header, sizeof(Header));
 8000dd6:	8bbb      	ldrh	r3, [r7, #28]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	f107 0114 	add.w	r1, r7, #20
 8000de0:	2206      	movs	r2, #6
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fbbe 	bl	8003564 <memcpy>
    buffer_idx += sizeof(Header);
 8000de8:	8bbb      	ldrh	r3, [r7, #28]
 8000dea:	3306      	adds	r3, #6
 8000dec:	83bb      	strh	r3, [r7, #28]

    // 2) Copy payload
    if (message_type == STRING_PACKET) {
 8000dee:	7afb      	ldrb	r3, [r7, #11]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d109      	bne.n	8000e08 <pack_buffer+0x98>
        memcpy(buffer + buffer_idx,
 8000df4:	8bbb      	ldrh	r3, [r7, #28]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	18d0      	adds	r0, r2, r3
               data->string_packet.data,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
        memcpy(buffer + buffer_idx,
 8000dfe:	8bfa      	ldrh	r2, [r7, #30]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f002 fbaf 	bl	8003564 <memcpy>
 8000e06:	e022      	b.n	8000e4e <pack_buffer+0xde>
               data_length);
    } else if (message_type == STREAK_DATA) {
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d108      	bne.n	8000e20 <pack_buffer+0xb0>
        memcpy(buffer + buffer_idx,
 8000e0e:	8bbb      	ldrh	r3, [r7, #28]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4413      	add	r3, r2
               &data->streak_data,
 8000e14:	6879      	ldr	r1, [r7, #4]
        memcpy(buffer + buffer_idx,
 8000e16:	8bfa      	ldrh	r2, [r7, #30]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fba3 	bl	8003564 <memcpy>
 8000e1e:	e016      	b.n	8000e4e <pack_buffer+0xde>
               data_length);
    } else if (message_type == BEEP_EVENT) {
 8000e20:	7afb      	ldrb	r3, [r7, #11]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d108      	bne.n	8000e38 <pack_buffer+0xc8>
        memcpy(buffer + buffer_idx,
 8000e26:	8bbb      	ldrh	r3, [r7, #28]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4413      	add	r3, r2
               &data->beep_data,
 8000e2c:	6879      	ldr	r1, [r7, #4]
        memcpy(buffer + buffer_idx,
 8000e2e:	8bfa      	ldrh	r2, [r7, #30]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 fb97 	bl	8003564 <memcpy>
 8000e36:	e00a      	b.n	8000e4e <pack_buffer+0xde>
               data_length);
    } else if (message_type == BUTTON_PRESS) {
 8000e38:	7afb      	ldrb	r3, [r7, #11]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d107      	bne.n	8000e4e <pack_buffer+0xde>
        memcpy(buffer + buffer_idx,
 8000e3e:	8bbb      	ldrh	r3, [r7, #28]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4413      	add	r3, r2
               &data->button_press_data,
 8000e44:	6879      	ldr	r1, [r7, #4]
        memcpy(buffer + buffer_idx,
 8000e46:	8bfa      	ldrh	r2, [r7, #30]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fb8b 	bl	8003564 <memcpy>
               data_length);
    }

    buffer_idx += data_length;
 8000e4e:	8bba      	ldrh	r2, [r7, #28]
 8000e50:	8bfb      	ldrh	r3, [r7, #30]
 8000e52:	4413      	add	r3, r2
 8000e54:	83bb      	strh	r3, [r7, #28]
    return buffer_idx;
 8000e56:	8bbb      	ldrh	r3, [r7, #28]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <enableClocks>:
 *      Author: willw
 */

#include "main.h"

void enableClocks(void) {
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	// Enable all GPIO clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN | RCC_AHBENR_GPIOEEN;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <enableClocks+0x1c>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <enableClocks+0x1c>)
 8000e6a:	f443 1378 	orr.w	r3, r3, #4063232	@ 0x3e0000
 8000e6e:	6153      	str	r3, [r2, #20]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <setupGPIOPinsTim2>:

void setupGPIOPinsTim2(void) {
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
    // Setup GPIO for PWM output: CH1=PA15, CH2=PA1, CH4=PA3 (drop CH3/PA2)
    GPIOA->MODER |= (0x2 << (15 * 2))  // PA15 AF
 8000e84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e92:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8000e96:	6013      	str	r3, [r2, #0]
                   | (0x2 << (1 * 2))  // PA1  AF
                   | (0x2 << (3 * 2)); // PA3  AF

    // Alternate‐function select for PA15, PA1, PA3
    GPIOA->AFR[0] |= (0x1 << (1 * 4))  // PA1 → AF1 (TIM2_CH2)
 8000e98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ea2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6213      	str	r3, [r2, #32]
                   | (0x1 << (3 * 4)); // PA3 → AF1 (TIM2_CH4)
    GPIOA->AFR[1] |= (0x1 << ((15 - 8) * 4)); // PA15 → AF1 (TIM2_CH1)
 8000eac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <setupTim2Pwm>:

void setupTim2Pwm(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Enable TIM2 peripheral clock
 8000ecc:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <setupTim2Pwm+0xa8>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	4a27      	ldr	r2, [pc, #156]	@ (8000f70 <setupTim2Pwm+0xa8>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	61d3      	str	r3, [r2, #28]

	// Configure timer registers
	TIM2->PSC = 7; // Prescaler of 1 microsec for 8 MHz clock
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000edc:	2207      	movs	r2, #7
 8000ede:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 20000; // Auto-reload after 20 ms for PWM application
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ee4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set to PWM mode 1 for CH1, CH2, CH4 only (drop CH3)
    TIM2->CCMR1 |= (0x6 << 4) | TIM_CCMR1_OC1PE    // CH1
 8000eea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef4:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000ef8:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000efc:	6193      	str	r3, [r2, #24]
                 | (0x6 << 12) | TIM_CCMR1_OC2PE;  // CH2
    TIM2->CCMR2 |=               /* no CH3 */
 8000efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f08:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000f0c:	61d3      	str	r3, [r2, #28]
                 (0x6 << 12) | TIM_CCMR2_OC4PE;  // CH4

    // Enable polarity & output for CH1, CH2, CH4
    TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P /*| CC3P*/ | TIM_CCER_CC4P);
 8000f0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f1c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000f20:	6213      	str	r3, [r2, #32]
    TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E           | TIM_CCER_CC4E;
 8000f22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f30:	f043 0311 	orr.w	r3, r3, #17
 8000f34:	6213      	str	r3, [r2, #32]


	TIM2->CR1 |= TIM_CR1_ARPE; // Enable auto-reload preload
 8000f36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f44:	6013      	str	r3, [r2, #0]
	TIM2->EGR = TIM_EGR_UG; // Generate an update event (apply PSC + ARR)
 8000f46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	615a      	str	r2, [r3, #20]

	TIM2->CNT = 0;
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN; // Start the timer
 8000f56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]

}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000

08000f74 <servoAngle>:


void servoAngle(uint8_t channel, uint8_t degree) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
	// Calculate the pulse width
    uint16_t pulse = (uint16_t)(1000 + (1000 * degree)/90);
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff8 <servoAngle+0x84>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	441a      	add	r2, r3
 8000f96:	1192      	asrs	r2, r2, #6
 8000f98:	17db      	asrs	r3, r3, #31
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000fa2:	81fb      	strh	r3, [r7, #14]

    // Apply to the given channel
    switch (channel) {
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d81f      	bhi.n	8000fec <servoAngle+0x78>
 8000fac:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb4 <servoAngle+0x40>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fcf 	.word	0x08000fcf
 8000fbc:	08000fd9 	.word	0x08000fd9
 8000fc0:	08000fe3 	.word	0x08000fe3
        case 1: TIM2->CCR1 = pulse; break;
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fcc:	e00e      	b.n	8000fec <servoAngle+0x78>
        case 2: TIM2->CCR2 = pulse; break;
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000fd6:	e009      	b.n	8000fec <servoAngle+0x78>
        case 3: TIM2->CCR3 = pulse; break;
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000fe0:	e004      	b.n	8000fec <servoAngle+0x78>
        case 4: TIM2->CCR4 = pulse; break;
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fea:	bf00      	nop
    }
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	b60b60b7 	.word	0xb60b60b7

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_MspInit+0x44>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_MspInit+0x44>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6193      	str	r3, [r2, #24]
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_MspInit+0x44>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <HAL_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_MspInit+0x44>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_MspInit+0x44>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001032:	2007      	movs	r0, #7
 8001034:	f000 fa60 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <HAL_I2C_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d127      	bne.n	80010b6 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800107e:	23c0      	movs	r3, #192	@ 0xc0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001082:	2312      	movs	r3, #18
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2301      	movs	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <HAL_I2C_MspInit+0x84>)
 800109a:	f000 fa61 	bl	8001560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_I2C_MspInit+0x80>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400

080010cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_SPI_MspInit+0x7c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d128      	bne.n	8001140 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_SPI_MspInit+0x80>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a16      	ldr	r2, [pc, #88]	@ (800114c <HAL_SPI_MspInit+0x80>)
 80010f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_SPI_MspInit+0x80>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_SPI_MspInit+0x80>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <HAL_SPI_MspInit+0x80>)
 800110c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_SPI_MspInit+0x80>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800111e:	23e0      	movs	r3, #224	@ 0xe0
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800112e:	2305      	movs	r3, #5
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113c:	f000 fa10 	bl	8001560 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40013000 	.word	0x40013000
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a18      	ldr	r2, [pc, #96]	@ (80011d0 <HAL_PCD_MspInit+0x80>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d129      	bne.n	80011c6 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <HAL_PCD_MspInit+0x84>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <HAL_PCD_MspInit+0x84>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_PCD_MspInit+0x84>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800118a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800119c:	230e      	movs	r3, #14
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011aa:	f000 f9d9 	bl	8001560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_PCD_MspInit+0x84>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a08      	ldr	r2, [pc, #32]	@ (80011d4 <HAL_PCD_MspInit+0x84>)
 80011b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_PCD_MspInit+0x84>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40005c00 	.word	0x40005c00
 80011d4:	40021000 	.word	0x40021000

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <UsageFault_Handler+0x4>

08001200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122e:	f000 f891 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}

08001236 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */

void EXTI0_IRQHandler(void)       { GPIO_EXTI_IRQHandler(); }
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
 800123a:	f7ff f913 	bl	8000464 <GPIO_EXTI_IRQHandler>
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}

08001242 <EXTI2_TSC_IRQHandler>:
void EXTI2_TSC_IRQHandler(void)   { GPIO_EXTI_IRQHandler(); }
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
 8001246:	f7ff f90d 	bl	8000464 <GPIO_EXTI_IRQHandler>
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001278:	f7ff ffea 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	@ (80012b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	@ (80012c0 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a2:	f002 f93b 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a6:	f7ff f90b 	bl	80004c0 <main>

080012aa <LoopForever>:

LoopForever:
    b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012ac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80012b8:	080035e0 	.word	0x080035e0
  ldr r2, =_sbss
 80012bc:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80012c0:	20000a34 	.word	0x20000a34

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f90d 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fe8a 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f917 	bl	8001546 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001330:	f000 f8ed 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000030 	.word	0x20000030
 800134c:	20000038 	.word	0x20000038
 8001350:	20000034 	.word	0x20000034

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000038 	.word	0x20000038
 8001378:	20000a30 	.word	0x20000a30

0800137c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000a30 	.word	0x20000a30

08001394 <__NVIC_SetPriorityGrouping>:
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_SetPriority>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff47 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff5c 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffb0 	bl	80014b4 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e154      	b.n	800181a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8146 	beq.w	8001814 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x40>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d017      	beq.n	800163e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d123      	bne.n	8001692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	6939      	ldr	r1, [r7, #16]
 800168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0203 	and.w	r2, r3, #3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80a0 	beq.w	8001814 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d4:	4b58      	ldr	r3, [pc, #352]	@ (8001838 <HAL_GPIO_Init+0x2d8>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a57      	ldr	r2, [pc, #348]	@ (8001838 <HAL_GPIO_Init+0x2d8>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b55      	ldr	r3, [pc, #340]	@ (8001838 <HAL_GPIO_Init+0x2d8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016ec:	4a53      	ldr	r2, [pc, #332]	@ (800183c <HAL_GPIO_Init+0x2dc>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001716:	d019      	beq.n	800174c <HAL_GPIO_Init+0x1ec>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a49      	ldr	r2, [pc, #292]	@ (8001840 <HAL_GPIO_Init+0x2e0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d013      	beq.n	8001748 <HAL_GPIO_Init+0x1e8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a48      	ldr	r2, [pc, #288]	@ (8001844 <HAL_GPIO_Init+0x2e4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00d      	beq.n	8001744 <HAL_GPIO_Init+0x1e4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a47      	ldr	r2, [pc, #284]	@ (8001848 <HAL_GPIO_Init+0x2e8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d007      	beq.n	8001740 <HAL_GPIO_Init+0x1e0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a46      	ldr	r2, [pc, #280]	@ (800184c <HAL_GPIO_Init+0x2ec>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_GPIO_Init+0x1dc>
 8001738:	2304      	movs	r3, #4
 800173a:	e008      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 800173c:	2305      	movs	r3, #5
 800173e:	e006      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 8001740:	2303      	movs	r3, #3
 8001742:	e004      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 8001744:	2302      	movs	r3, #2
 8001746:	e002      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 800174c:	2300      	movs	r3, #0
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	f002 0203 	and.w	r2, r2, #3
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	4093      	lsls	r3, r2
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800175e:	4937      	ldr	r1, [pc, #220]	@ (800183c <HAL_GPIO_Init+0x2dc>)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176c:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001790:	4a2f      	ldr	r2, [pc, #188]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001796:	4b2e      	ldr	r3, [pc, #184]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ba:	4a25      	ldr	r2, [pc, #148]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800180e:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <HAL_GPIO_Init+0x2f0>)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	f47f aea3 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	48000400 	.word	0x48000400
 8001844:	48000800 	.word	0x48000800
 8001848:	48000c00 	.word	0x48000c00
 800184c:	48001000 	.word	0x48001000
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e08d      	b.n	8001982 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fbe2 	bl	8001044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	@ 0x24
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e006      	b.n	80018dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d108      	bne.n	80018f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	e007      	b.n	8001906 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001918:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001928:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69d9      	ldr	r1, [r3, #28]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1a      	ldr	r2, [r3, #32]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b20      	cmp	r3, #32
 800199e:	d138      	bne.n	8001a12 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e032      	b.n	8001a14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2224      	movs	r2, #36	@ 0x24
 80019ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
  }
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d139      	bne.n	8001aaa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e033      	b.n	8001aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2224      	movs	r2, #36	@ 0x24
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0201 	orr.w	r2, r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0b9      	b.n	8001c3e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fb36 	bl	8001150 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fcd2 	bl	800349a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e03e      	b.n	8001b7a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3311      	adds	r3, #17
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3310      	adds	r3, #16
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	3313      	adds	r3, #19
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	3320      	adds	r3, #32
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	3324      	adds	r3, #36	@ 0x24
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	3301      	adds	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3bb      	bcc.n	8001afc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e044      	b.n	8001c14 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	3301      	adds	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	791b      	ldrb	r3, [r3, #4]
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3b5      	bcc.n	8001b8a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c2a:	f001 fc51 	bl	80034d0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f000 bff4 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 816d 	beq.w	8001f5e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c84:	4bb4      	ldr	r3, [pc, #720]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d00c      	beq.n	8001caa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c90:	4bb1      	ldr	r3, [pc, #708]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d157      	bne.n	8001d4c <HAL_RCC_OscConfig+0x104>
 8001c9c:	4bae      	ldr	r3, [pc, #696]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca8:	d150      	bne.n	8001d4c <HAL_RCC_OscConfig+0x104>
 8001caa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cae:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cca:	d802      	bhi.n	8001cd2 <HAL_RCC_OscConfig+0x8a>
 8001ccc:	4ba2      	ldr	r3, [pc, #648]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0xb6>
 8001cd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cea:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001cee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001cfa:	4b97      	ldr	r3, [pc, #604]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d02:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d0a:	fa92 f2a2 	rbit	r2, r2
 8001d0e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d12:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d16:	fab2 f282 	clz	r2, r2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f002 021f 	and.w	r2, r2, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8114 	beq.w	8001f5c <HAL_RCC_OscConfig+0x314>
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 810b 	bne.w	8001f5c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f000 bf85 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x124>
 8001d5e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7d      	ldr	r2, [pc, #500]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e036      	b.n	8001dda <HAL_RCC_OscConfig+0x192>
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x14e>
 8001d7c:	4b76      	ldr	r3, [pc, #472]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a75      	ldr	r2, [pc, #468]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b73      	ldr	r3, [pc, #460]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a72      	ldr	r2, [pc, #456]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e021      	b.n	8001dda <HAL_RCC_OscConfig+0x192>
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x17a>
 8001da8:	4b6b      	ldr	r3, [pc, #428]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6a      	ldr	r2, [pc, #424]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b68      	ldr	r3, [pc, #416]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a67      	ldr	r2, [pc, #412]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x192>
 8001dc2:	4b65      	ldr	r3, [pc, #404]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a64      	ldr	r2, [pc, #400]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b62      	ldr	r3, [pc, #392]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a61      	ldr	r2, [pc, #388]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dda:	4b5f      	ldr	r3, [pc, #380]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dde:	f023 020f 	bic.w	r2, r3, #15
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	495a      	ldr	r1, [pc, #360]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d054      	beq.n	8001eae <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff faba 	bl	800137c <HAL_GetTick>
 8001e08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fab5 	bl	800137c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	@ 0x64
 8001e1c:	d902      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	f000 bf19 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
 8001e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e28:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e38:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e44:	d802      	bhi.n	8001e4c <HAL_RCC_OscConfig+0x204>
 8001e46:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	e015      	b.n	8001e78 <HAL_RCC_OscConfig+0x230>
 8001e4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e50:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e64:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e74:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e7c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e84:	fa92 f2a2 	rbit	r2, r2
 8001e88:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001e8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0b0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1c6>
 8001eac:	e057      	b.n	8001f5e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff fa65 	bl	800137c <HAL_GetTick>
 8001eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fa60 	bl	800137c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	@ 0x64
 8001ec6:	d902      	bls.n	8001ece <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f000 bec4 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
 8001ece:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001ee2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eee:	d802      	bhi.n	8001ef6 <HAL_RCC_OscConfig+0x2ae>
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x2da>
 8001ef6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001efa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f0e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f12:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_RCC_OscConfig+0x310>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f26:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f36:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1b0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x270>
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_OscConfig+0x316>
 8001f58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 816c 	beq.w	800224c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f74:	4bcc      	ldr	r3, [pc, #816]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00b      	beq.n	8001f98 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f80:	4bc9      	ldr	r3, [pc, #804]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d16d      	bne.n	8002068 <HAL_RCC_OscConfig+0x420>
 8001f8c:	4bc6      	ldr	r3, [pc, #792]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d167      	bne.n	8002068 <HAL_RCC_OscConfig+0x420>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001faa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fb6:	d802      	bhi.n	8001fbe <HAL_RCC_OscConfig+0x376>
 8001fb8:	4bbb      	ldr	r3, [pc, #748]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e013      	b.n	8001fe6 <HAL_RCC_OscConfig+0x39e>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001fd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001fe2:	4bb1      	ldr	r3, [pc, #708]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001fec:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ff0:	fa92 f2a2 	rbit	r2, r2
 8001ff4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001ff8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCC_OscConfig+0x3e6>
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d002      	beq.n	800202e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f000 be14 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b9e      	ldr	r3, [pc, #632]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	21f8      	movs	r1, #248	@ 0xf8
 8002044:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800204c:	fa91 f1a1 	rbit	r1, r1
 8002050:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002054:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002058:	fab1 f181 	clz	r1, r1
 800205c:	b2c9      	uxtb	r1, r1
 800205e:	408b      	lsls	r3, r1
 8002060:	4991      	ldr	r1, [pc, #580]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e0f1      	b.n	800224c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8083 	beq.w	8002180 <HAL_RCC_OscConfig+0x538>
 800207a:	2301      	movs	r3, #1
 800207c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800208c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800209a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	461a      	mov	r2, r3
 80020a2:	2301      	movs	r3, #1
 80020a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff f969 	bl	800137c <HAL_GetTick>
 80020aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b0:	f7ff f964 	bl	800137c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d902      	bls.n	80020c6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	f000 bdc8 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80020d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80020e4:	d802      	bhi.n	80020ec <HAL_RCC_OscConfig+0x4a4>
 80020e6:	4b70      	ldr	r3, [pc, #448]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e013      	b.n	8002114 <HAL_RCC_OscConfig+0x4cc>
 80020ec:	2302      	movs	r3, #2
 80020ee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002104:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002110:	4b65      	ldr	r3, [pc, #404]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	2202      	movs	r2, #2
 8002116:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800211a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800211e:	fa92 f2a2 	rbit	r2, r2
 8002122:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002126:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800212a:	fab2 f282 	clz	r2, r2
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f042 0220 	orr.w	r2, r2, #32
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f002 021f 	and.w	r2, r2, #31
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0b4      	beq.n	80020b0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b58      	ldr	r3, [pc, #352]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002152:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	21f8      	movs	r1, #248	@ 0xf8
 800215c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002164:	fa91 f1a1 	rbit	r1, r1
 8002168:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800216c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002170:	fab1 f181 	clz	r1, r1
 8002174:	b2c9      	uxtb	r1, r1
 8002176:	408b      	lsls	r3, r1
 8002178:	494b      	ldr	r1, [pc, #300]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
 800217e:	e065      	b.n	800224c <HAL_RCC_OscConfig+0x604>
 8002180:	2301      	movs	r3, #1
 8002182:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002192:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff f8e6 	bl	800137c <HAL_GetTick>
 80021b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff f8e1 	bl	800137c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d902      	bls.n	80021cc <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	f000 bd45 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80021de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80021ea:	d802      	bhi.n	80021f2 <HAL_RCC_OscConfig+0x5aa>
 80021ec:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e013      	b.n	800221a <HAL_RCC_OscConfig+0x5d2>
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800220a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002216:	4b24      	ldr	r3, [pc, #144]	@ (80022a8 <HAL_RCC_OscConfig+0x660>)
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2202      	movs	r2, #2
 800221c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002220:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002224:	fa92 f2a2 	rbit	r2, r2
 8002228:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800222c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f042 0220 	orr.w	r2, r2, #32
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f002 021f 	and.w	r2, r2, #31
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f202 	lsl.w	r2, r1, r2
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1b4      	bne.n	80021b6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8115 	beq.w	800248c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d07e      	beq.n	8002370 <HAL_RCC_OscConfig+0x728>
 8002272:	2301      	movs	r3, #1
 8002274:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_RCC_OscConfig+0x664>)
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	461a      	mov	r2, r3
 8002298:	2301      	movs	r3, #1
 800229a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7ff f86e 	bl	800137c <HAL_GetTick>
 80022a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a4:	e00f      	b.n	80022c6 <HAL_RCC_OscConfig+0x67e>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b0:	f7ff f864 	bl	800137c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d902      	bls.n	80022c6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	f000 bcc8 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022e0:	2202      	movs	r2, #2
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002304:	2202      	movs	r2, #2
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	fa93 f2a3 	rbit	r2, r3
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800231e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002320:	4bb0      	ldr	r3, [pc, #704]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800232c:	2102      	movs	r1, #2
 800232e:	6019      	str	r1, [r3, #0]
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f1a3 	rbit	r1, r3
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002346:	6019      	str	r1, [r3, #0]
  return result;
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0a0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x668>
 800236e:	e08d      	b.n	800248c <HAL_RCC_OscConfig+0x844>
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002380:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002392:	601a      	str	r2, [r3, #0]
  return result;
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800239c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b90      	ldr	r3, [pc, #576]	@ (80025e8 <HAL_RCC_OscConfig+0x9a0>)
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	461a      	mov	r2, r3
 80023ae:	2300      	movs	r3, #0
 80023b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe ffe3 	bl	800137c <HAL_GetTick>
 80023b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe ffde 	bl	800137c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d902      	bls.n	80023d2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	f000 bc42 	b.w	8002c56 <HAL_RCC_OscConfig+0x100e>
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023da:	2202      	movs	r2, #2
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023fe:	2202      	movs	r2, #2
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002422:	2202      	movs	r2, #2
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800243c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243e:	4b69      	ldr	r3, [pc, #420]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002446:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800244a:	2102      	movs	r1, #2
 800244c:	6019      	str	r1, [r3, #0]
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	fa93 f1a3 	rbit	r1, r3
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002464:	6019      	str	r1, [r3, #0]
  return result;
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d197      	bne.n	80023bc <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 819e 	beq.w	80027de <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a8:	4b4e      	ldr	r3, [pc, #312]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d116      	bne.n	80024e2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	4b4b      	ldr	r3, [pc, #300]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024be:	61d3      	str	r3, [r2, #28]
 80024c0:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	4b42      	ldr	r3, [pc, #264]	@ (80025ec <HAL_RCC_OscConfig+0x9a4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11a      	bne.n	8002524 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ee:	4b3f      	ldr	r3, [pc, #252]	@ (80025ec <HAL_RCC_OscConfig+0x9a4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3e      	ldr	r2, [pc, #248]	@ (80025ec <HAL_RCC_OscConfig+0x9a4>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7fe ff3f 	bl	800137c <HAL_GetTick>
 80024fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	e009      	b.n	8002518 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe ff3a 	bl	800137c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	@ 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e39e      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b34      	ldr	r3, [pc, #208]	@ (80025ec <HAL_RCC_OscConfig+0x9a4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x8fa>
 8002534:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e035      	b.n	80025ae <HAL_RCC_OscConfig+0x966>
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x924>
 8002552:	4b24      	ldr	r3, [pc, #144]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	4b21      	ldr	r3, [pc, #132]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a20      	ldr	r2, [pc, #128]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	e020      	b.n	80025ae <HAL_RCC_OscConfig+0x966>
 800256c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002570:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d10c      	bne.n	8002596 <HAL_RCC_OscConfig+0x94e>
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a18      	ldr	r2, [pc, #96]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a15      	ldr	r2, [pc, #84]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	e00b      	b.n	80025ae <HAL_RCC_OscConfig+0x966>
 8002596:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a0f      	ldr	r2, [pc, #60]	@ (80025e4 <HAL_RCC_OscConfig+0x99c>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7fe fedc 	bl	800137c <HAL_GetTick>
 80025c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e012      	b.n	80025f0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fed7 	bl	800137c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d908      	bls.n	80025f0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e339      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	10908120 	.word	0x10908120
 80025ec:	40007000 	.word	0x40007000
 80025f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025f8:	2202      	movs	r2, #2
 80025fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fa93 f2a3 	rbit	r2, r3
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800261c:	2202      	movs	r2, #2
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002636:	601a      	str	r2, [r3, #0]
  return result;
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002640:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_RCC_OscConfig+0xa10>
 8002652:	4b98      	ldr	r3, [pc, #608]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	e013      	b.n	8002680 <HAL_RCC_OscConfig+0xa38>
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002660:	2202      	movs	r2, #2
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4b8d      	ldr	r3, [pc, #564]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002684:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002688:	2102      	movs	r1, #2
 800268a:	6011      	str	r1, [r2, #0]
 800268c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002690:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	fa92 f1a2 	rbit	r1, r2
 800269a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800269e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026a2:	6011      	str	r1, [r2, #0]
  return result;
 80026a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026a8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f002 021f 	and.w	r2, r2, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f43f af7f 	beq.w	80025ca <HAL_RCC_OscConfig+0x982>
 80026cc:	e07d      	b.n	80027ca <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe fe55 	bl	800137c <HAL_GetTick>
 80026d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe fe50 	bl	800137c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2b2      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002700:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800271c:	2202      	movs	r2, #2
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002724:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002736:	601a      	str	r2, [r3, #0]
  return result;
 8002738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002740:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0xb10>
 8002752:	4b58      	ldr	r3, [pc, #352]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	e013      	b.n	8002780 <HAL_RCC_OscConfig+0xb38>
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002760:	2202      	movs	r2, #2
 8002762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002768:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	fa93 f2a3 	rbit	r2, r3
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	4b4d      	ldr	r3, [pc, #308]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002784:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002788:	2102      	movs	r1, #2
 800278a:	6011      	str	r1, [r2, #0]
 800278c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002790:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	fa92 f1a2 	rbit	r1, r2
 800279a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800279e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027a2:	6011      	str	r1, [r2, #0]
  return result;
 80027a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d186      	bne.n	80026d8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ca:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b38      	ldr	r3, [pc, #224]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a37      	ldr	r2, [pc, #220]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8232 	beq.w	8002c54 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	f000 8201 	beq.w	8002c00 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b02      	cmp	r3, #2
 800280c:	f040 8157 	bne.w	8002abe <HAL_RCC_OscConfig+0xe76>
 8002810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002814:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002818:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800281c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002822:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	fa93 f2a3 	rbit	r2, r3
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002834:	601a      	str	r2, [r3, #0]
  return result;
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800283e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800284a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	461a      	mov	r2, r3
 8002852:	2300      	movs	r3, #0
 8002854:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fd91 	bl	800137c <HAL_GetTick>
 800285a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285e:	e009      	b.n	8002874 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fd8c 	bl	800137c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1f0      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800287c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002898:	601a      	str	r2, [r3, #0]
  return result;
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ac:	d804      	bhi.n	80028b8 <HAL_RCC_OscConfig+0xc70>
 80028ae:	4b01      	ldr	r3, [pc, #4]	@ (80028b4 <HAL_RCC_OscConfig+0xc6c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e029      	b.n	8002908 <HAL_RCC_OscConfig+0xcc0>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fa93 f2a3 	rbit	r2, r3
 80028d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	4bc3      	ldr	r3, [pc, #780]	@ (8002c14 <HAL_RCC_OscConfig+0xfcc>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002910:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800291a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	fa92 f1a2 	rbit	r1, r2
 8002924:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002928:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800292c:	6011      	str	r1, [r2, #0]
  return result;
 800292e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002932:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0220 	orr.w	r2, r2, #32
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d185      	bne.n	8002860 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002954:	4baf      	ldr	r3, [pc, #700]	@ (8002c14 <HAL_RCC_OscConfig+0xfcc>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	430b      	orrs	r3, r1
 8002976:	49a7      	ldr	r1, [pc, #668]	@ (8002c14 <HAL_RCC_OscConfig+0xfcc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002984:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029a0:	601a      	str	r2, [r3, #0]
  return result;
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029aa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	2301      	movs	r3, #1
 80029c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe fcdb 	bl	800137c <HAL_GetTick>
 80029c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ca:	e009      	b.n	80029e0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fcd6 	bl	800137c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e13a      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a04:	601a      	str	r2, [r3, #0]
  return result;
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a18:	d802      	bhi.n	8002a20 <HAL_RCC_OscConfig+0xdd8>
 8002a1a:	4b7e      	ldr	r3, [pc, #504]	@ (8002c14 <HAL_RCC_OscConfig+0xfcc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e027      	b.n	8002a70 <HAL_RCC_OscConfig+0xe28>
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b69      	ldr	r3, [pc, #420]	@ (8002c14 <HAL_RCC_OscConfig+0xfcc>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a74:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a7c:	6011      	str	r1, [r2, #0]
 8002a7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a82:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fa92 f1a2 	rbit	r1, r2
 8002a8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a90:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a94:	6011      	str	r1, [r2, #0]
  return result;
 8002a96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f042 0220 	orr.w	r2, r2, #32
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f002 021f 	and.w	r2, r2, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d087      	beq.n	80029cc <HAL_RCC_OscConfig+0xd84>
 8002abc:	e0ca      	b.n	8002c54 <HAL_RCC_OscConfig+0x100c>
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ac6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ae2:	601a      	str	r2, [r3, #0]
  return result;
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002aec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002af8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	461a      	mov	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fc3a 	bl	800137c <HAL_GetTick>
 8002b08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0c:	e009      	b.n	8002b22 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fc35 	bl	800137c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e099      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b46:	601a      	str	r2, [r3, #0]
  return result;
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b5a:	d802      	bhi.n	8002b62 <HAL_RCC_OscConfig+0xf1a>
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <HAL_RCC_OscConfig+0xfcc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e027      	b.n	8002bb2 <HAL_RCC_OscConfig+0xf6a>
 8002b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b66:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b82:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	fa93 f2a3 	rbit	r2, r3
 8002ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_OscConfig+0xfcc>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bb6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002bbe:	6011      	str	r1, [r2, #0]
 8002bc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bc4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	fa92 f1a2 	rbit	r1, r2
 8002bce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bd2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002bd6:	6011      	str	r1, [r2, #0]
  return result;
 8002bd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bdc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	fab2 f282 	clz	r2, r2
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f042 0220 	orr.w	r2, r2, #32
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f002 021f 	and.w	r2, r2, #31
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d187      	bne.n	8002b0e <HAL_RCC_OscConfig+0xec6>
 8002bfe:	e029      	b.n	8002c54 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d103      	bne.n	8002c18 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e020      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
 8002c14:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_RCC_OscConfig+0x1018>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c20:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d10b      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c3c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b09e      	sub	sp, #120	@ 0x78
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e154      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b89      	ldr	r3, [pc, #548]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d910      	bls.n	8002cac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b86      	ldr	r3, [pc, #536]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4984      	ldr	r1, [pc, #528]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b82      	ldr	r3, [pc, #520]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e13c      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4978      	ldr	r1, [pc, #480]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80cd 	beq.w	8002e72 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d137      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xec>
 8002ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002cee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cf8:	d802      	bhi.n	8002d00 <HAL_RCC_ClockConfig+0x9c>
 8002cfa:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e00f      	b.n	8002d20 <HAL_RCC_ClockConfig+0xbc>
 8002d00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d1c:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d28:	fa92 f2a2 	rbit	r2, r2
 8002d2c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f042 0220 	orr.w	r2, r2, #32
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f002 021f 	and.w	r2, r2, #31
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d171      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0ea      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d137      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x164>
 8002d58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d70:	d802      	bhi.n	8002d78 <HAL_RCC_ClockConfig+0x114>
 8002d72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	e00f      	b.n	8002d98 <HAL_RCC_ClockConfig+0x134>
 8002d78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d94:	4b44      	ldr	r3, [pc, #272]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d9c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002da0:	fa92 f2a2 	rbit	r2, r2
 8002da4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002da6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f002 021f 	and.w	r2, r2, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d135      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0ae      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2c2>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dde:	d802      	bhi.n	8002de6 <HAL_RCC_ClockConfig+0x182>
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	e00d      	b.n	8002e02 <HAL_RCC_ClockConfig+0x19e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df2:	2302      	movs	r3, #2
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	2202      	movs	r2, #2
 8002e04:	61ba      	str	r2, [r7, #24]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	fa92 f2a2 	rbit	r2, r2
 8002e0c:	617a      	str	r2, [r7, #20]
  return result;
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e07a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 0203 	bic.w	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	491a      	ldr	r1, [pc, #104]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e42:	f7fe fa9b 	bl	800137c <HAL_GetTick>
 8002e46:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4a:	f7fe fa97 	bl	800137c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e062      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 020c 	and.w	r2, r3, #12
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d1eb      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d215      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 0207 	bic.w	r2, r3, #7
 8002e88:	4906      	ldr	r1, [pc, #24]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d006      	beq.n	8002eac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <HAL_RCC_ClockConfig+0x2c2>
 8002ea2:	bf00      	nop
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <HAL_RCC_ClockConfig+0x2cc>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	491a      	ldr	r1, [pc, #104]	@ (8002f30 <HAL_RCC_ClockConfig+0x2cc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <HAL_RCC_ClockConfig+0x2cc>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4912      	ldr	r1, [pc, #72]	@ (8002f30 <HAL_RCC_ClockConfig+0x2cc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eea:	f000 f829 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <HAL_RCC_ClockConfig+0x2cc>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef8:	22f0      	movs	r2, #240	@ 0xf0
 8002efa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	60fa      	str	r2, [r7, #12]
  return result;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	40d3      	lsrs	r3, r2
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x2d0>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	fa21 f303 	lsr.w	r3, r1, r3
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <HAL_RCC_ClockConfig+0x2d4>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <HAL_RCC_ClockConfig+0x2d8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f9e8 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3778      	adds	r7, #120	@ 0x78
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	080035a8 	.word	0x080035a8
 8002f38:	20000030 	.word	0x20000030
 8002f3c:	20000034 	.word	0x20000034

08002f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x30>
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x36>
 8002f6e:	e026      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f70:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	e026      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	0c9b      	lsrs	r3, r3, #18
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	4a17      	ldr	r2, [pc, #92]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f84:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e004      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
      break;
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fc0:	613b      	str	r3, [r7, #16]
      break;
 8002fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc4:	693b      	ldr	r3, [r7, #16]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	007a1200 	.word	0x007a1200
 8002fdc:	080035b8 	.word	0x080035b8
 8002fe0:	080035c8 	.word	0x080035c8
 8002fe4:	003d0900 	.word	0x003d0900

08002fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b092      	sub	sp, #72	@ 0x48
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80d2 	beq.w	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300c:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10e      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4a49      	ldr	r2, [pc, #292]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003022:	61d3      	str	r3, [r2, #28]
 8003024:	4b47      	ldr	r3, [pc, #284]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	4b44      	ldr	r3, [pc, #272]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003042:	4b41      	ldr	r3, [pc, #260]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a40      	ldr	r2, [pc, #256]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304e:	f7fe f995 	bl	800137c <HAL_GetTick>
 8003052:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	e008      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003056:	f7fe f991 	bl	800137c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	@ 0x64
 8003062:	d901      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e167      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	4b37      	ldr	r3, [pc, #220]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003074:	4b33      	ldr	r3, [pc, #204]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800307e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8082 	beq.w	800318a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003090:	429a      	cmp	r2, r3
 8003092:	d07a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003094:	4b2b      	ldr	r3, [pc, #172]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800309e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b25      	ldr	r3, [pc, #148]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	461a      	mov	r2, r3
 80030be:	2301      	movs	r3, #1
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	4b1c      	ldr	r3, [pc, #112]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	461a      	mov	r2, r3
 80030e2:	2300      	movs	r3, #0
 80030e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030e6:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d049      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fe f941 	bl	800137c <HAL_GetTick>
 80030fa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe f93d 	bl	800137c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e111      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003114:	2302      	movs	r3, #2
 8003116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003120:	2302      	movs	r3, #2
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	61fb      	str	r3, [r7, #28]
  return result;
 800312c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800313e:	4b01      	ldr	r3, [pc, #4]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	e00d      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003144:	40021000 	.word	0x40021000
 8003148:	40007000 	.word	0x40007000
 800314c:	10908100 	.word	0x10908100
 8003150:	2302      	movs	r3, #2
 8003152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	4b78      	ldr	r3, [pc, #480]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	2202      	movs	r2, #2
 8003162:	613a      	str	r2, [r7, #16]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	fa92 f2a2 	rbit	r2, r2
 800316a:	60fa      	str	r2, [r7, #12]
  return result;
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	fab2 f282 	clz	r2, r2
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f002 021f 	and.w	r2, r2, #31
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f202 	lsl.w	r2, r1, r2
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0b9      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800318a:	4b6d      	ldr	r3, [pc, #436]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	496a      	ldr	r1, [pc, #424]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003198:	4313      	orrs	r3, r2
 800319a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800319c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b66      	ldr	r3, [pc, #408]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	4a65      	ldr	r2, [pc, #404]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031bc:	4b60      	ldr	r3, [pc, #384]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	f023 0203 	bic.w	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	495d      	ldr	r1, [pc, #372]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031da:	4b59      	ldr	r3, [pc, #356]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	4956      	ldr	r1, [pc, #344]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031f8:	4b51      	ldr	r3, [pc, #324]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	494e      	ldr	r1, [pc, #312]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003206:	4313      	orrs	r3, r2
 8003208:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003216:	4b4a      	ldr	r3, [pc, #296]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4947      	ldr	r1, [pc, #284]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003224:	4313      	orrs	r3, r2
 8003226:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003234:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	493f      	ldr	r1, [pc, #252]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003252:	4b3b      	ldr	r3, [pc, #236]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f023 0220 	bic.w	r2, r3, #32
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4938      	ldr	r1, [pc, #224]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003260:	4313      	orrs	r3, r2
 8003262:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003270:	4b33      	ldr	r3, [pc, #204]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	4930      	ldr	r1, [pc, #192]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800327e:	4313      	orrs	r3, r2
 8003280:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800328e:	4b2c      	ldr	r3, [pc, #176]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	4929      	ldr	r1, [pc, #164]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800329c:	4313      	orrs	r3, r2
 800329e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032ac:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	4921      	ldr	r1, [pc, #132]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	491a      	ldr	r1, [pc, #104]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80032e8:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	4912      	ldr	r1, [pc, #72]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003306:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	490b      	ldr	r1, [pc, #44]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003314:	4313      	orrs	r3, r2
 8003316:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	4903      	ldr	r1, [pc, #12]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003332:	4313      	orrs	r3, r2
 8003334:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3748      	adds	r7, #72	@ 0x48
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000

08003344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e09d      	b.n	8003492 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003366:	d009      	beq.n	800337c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	61da      	str	r2, [r3, #28]
 800336e:	e005      	b.n	800337c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fe98 	bl	80010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033bc:	d902      	bls.n	80033c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e002      	b.n	80033ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80033d2:	d007      	beq.n	80033e4 <HAL_SPI_Init+0xa0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003426:	ea42 0103 	orr.w	r1, r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	f003 0204 	and.w	r2, r3, #4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003460:	ea42 0103 	orr.w	r1, r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034a2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80034a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <memset>:
 800350c:	4402      	add	r2, r0
 800350e:	4603      	mov	r3, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	4d0d      	ldr	r5, [pc, #52]	@ (8003554 <__libc_init_array+0x38>)
 8003520:	4c0d      	ldr	r4, [pc, #52]	@ (8003558 <__libc_init_array+0x3c>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	2600      	movs	r6, #0
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	4d0b      	ldr	r5, [pc, #44]	@ (800355c <__libc_init_array+0x40>)
 800352e:	4c0c      	ldr	r4, [pc, #48]	@ (8003560 <__libc_init_array+0x44>)
 8003530:	f000 f826 	bl	8003580 <_init>
 8003534:	1b64      	subs	r4, r4, r5
 8003536:	10a4      	asrs	r4, r4, #2
 8003538:	2600      	movs	r6, #0
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	080035d8 	.word	0x080035d8
 8003558:	080035d8 	.word	0x080035d8
 800355c:	080035d8 	.word	0x080035d8
 8003560:	080035dc 	.word	0x080035dc

08003564 <memcpy>:
 8003564:	440a      	add	r2, r1
 8003566:	4291      	cmp	r1, r2
 8003568:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800356c:	d100      	bne.n	8003570 <memcpy+0xc>
 800356e:	4770      	bx	lr
 8003570:	b510      	push	{r4, lr}
 8003572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800357a:	4291      	cmp	r1, r2
 800357c:	d1f9      	bne.n	8003572 <memcpy+0xe>
 800357e:	bd10      	pop	{r4, pc}

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
